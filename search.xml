<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaScript之排序集锦</title>
      <link href="/2020/01/17/javascript-zhi-pai-xu-ji-jin/"/>
      <url>/2020/01/17/javascript-zhi-pai-xu-ji-jin/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-之排序集锦"><a href="#JavaScript-之排序集锦" class="headerlink" title="JavaScript 之排序集锦"></a>JavaScript 之排序集锦</h2><hr><h3 id="1、快速排序"><a href="#1、快速排序" class="headerlink" title="1、快速排序"></a>1、快速排序</h3><p><img src="http://www.conardli.top/docs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p><p>单独开辟两个存储空间 <code>left</code> 和 <code>right</code> 来存储每次递归比 <code>target</code> 小和大的序列,每次递归直接返回 <code>left</code> 、 <code>target</code> 、 <code>right</code> 拼接后的数组.<br>浪费大量存储空间,写法简单.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> target <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="2、归并排序"><a href="#2、归并排序" class="headerlink" title="2、归并排序"></a>2、归并排序</h3><p>利用归并的思想实现的排序方法。</p><p>该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><ul><li>将已有序的子序列合并，得到完全有序的序列</li><li>即先使每个子序列有序，再使子序列段间有序</li><li>若将两个有序表合并成一个有序表，称为二路归并</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-f65e17c1828ae579.gif?imageMogr2/auto-orient/strip|imageView2/2/w/811/format/webp" alt="归并排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-518da026621cbed5.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="归并排序"></p><p>分割数组时直接将数组分割为两个数组，合并时直接合并数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>front<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>front<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>front<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>front<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> front <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="3、选择排序"><a href="#3、选择排序" class="headerlink" title="3、选择排序"></a>3、选择排序</h3><p><img src="http://www.conardli.top/docs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><p>每次循环选取一个最小的数字放到前面的有序序列中.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="4、插入排序"><a href="#4、插入排序" class="headerlink" title="4、插入排序"></a>4、插入排序</h3><p>将左侧序列看成一个有序序列，每次将一个数字插入该有序序列。<br>插入时，从有序序列最右侧开始比较，若比较的数较大，后移一位。</p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-d317b2a2e4591ad4.gif?imageMogr2/auto-orient/strip|imageView2/2/w/811/format/webp" alt="插入排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> target <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        target <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="5、冒泡排序"><a href="#5、冒泡排序" class="headerlink" title="5、冒泡排序"></a>5、冒泡排序</h3><p><img src="https://upload-images.jianshu.io/upload_images/12585785-00bd06c1b1cdcb72.gif?imageMogr2/auto-orient/strip|imageView2/2/w/826/format/webp" alt="冒泡排序"></p><ul><li>循环数组，比较当前元素和下一个元素，如果当前元素比下一个元素大，向上冒泡。</li><li>这样一次循环之后最后一个数就是本数组最大的数。</li><li>下一次循环继续上面的操作，不循环已经排序好的数。</li><li>优化：当一次循环没有发生冒泡，说明已经排序完成，停止循环。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> complete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 比较相邻数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        complete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有冒泡结束循环</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="6、堆排序"><a href="#6、堆排序" class="headerlink" title="6、堆排序"></a>6、堆排序</h3><ul><li>创建一个大顶堆，大顶堆的堆顶一定是最大的元素。</li><li>交换第一个元素和最后一个元素，让剩余的元素继续调整为大顶堆。</li><li>从后往前以此和第一个元素交换并重新构建，排序完成。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-e1fc1f31b1b0dc32.gif?imageMogr2/auto-orient/strip|imageView2/2/w/547/format/webp" alt="堆排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-e07e488f103d04a2.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="堆排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 构建大顶堆, 从第一个非叶子节点开始, 进行下沉操作.</span><span class="token keyword">function</span> <span class="token function">createHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">adjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将第target个元素进行下沉, 孩子节点有比他大的就下沉</span><span class="token keyword">function</span> <span class="token function">adjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> target<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找到孩子节点中最大的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下沉</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      target <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">createHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 交换第一个和最后一个元素, 然后重新调整大顶堆</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">adjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="7、希尔排序"><a href="#7、希尔排序" class="headerlink" title="7、希尔排序"></a>7、希尔排序</h3><p>希尔排序的核心在于间隔序列的设定.既可以提前设定好间隔序列,也可以动态的定义间隔序列.动态定义间隔序列的算法是<code>《算法(第4版)》</code> 的合著者 <code>Robret Sedgewick</code> 提出的.</p><ul><li>先将整个待排序记录序列分割成若干个子序列</li><li>在序列内分别进行直接插入排序,待整个序列基本有序时,在对全体记录进行一次直接插入排序</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-23abea5f9a7eb194.gif?imageMogr2/auto-orient/strip|imageView2/2/w/665/format/webp" alt="希尔排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-0ed048c95908255b.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="希尔排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> gap <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 复制数组</span>  result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      result<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    gap <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="8、计数排序"><a href="#8、计数排序" class="headerlink" title="8、计数排序"></a>8、计数排序</h3><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li><li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-a4af4d4837bc5cb2.gif?imageMogr2/auto-orient/strip|imageView2/2/w/1012/format/webp" alt="计数排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-7940185bd6499f5c.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="计数排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> sortIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bucketLen <span class="token operator">=</span> maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketLen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>sortIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>      bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="9、桶排序"><a href="#9、桶排序" class="headerlink" title="9、桶排序"></a>9、桶排序</h3><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-76601f156098c376.png?imageMogr2/auto-orient/strip|imageView2/2/w/891/format/webp" alt="桶排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-374f4e4a41b59bb6.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="桶排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入数据的最小值</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入数据的最大值</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//桶的初始化</span>  <span class="token keyword">const</span> DEFAULT_BUCKET_SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置桶的默认数量为5</span>  bucketSize <span class="token operator">=</span> bucketSize <span class="token operator">||</span> DEFAULT_BUCKET_SIZE<span class="token punctuation">;</span>  <span class="token keyword">let</span> bucketCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketCount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//利用映射函数将数据分配到各个桶中</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">insertionSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对每个桶进行排序，这里使用了插入排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="10、基数排序"><a href="#10、基数排序" class="headerlink" title="10、基数排序"></a>10、基数排序</h3><ul><li>该算法是稳定的排序法；</li><li>在所有的情况下，时间复杂度均为 O(nlog(p)k)，空间复杂度为 O(n*p)<br>（其中 K 为关键词位数，p 为数据字符数(即基数 radix)）；</li><li>若 n 很大，p 固定或很小，此方法将很有效。</li><li>基数排序不需要进行元素间的比较，属于分配/分布排序；</li><li>根据起始方向可分为 最高位优先 MSD 和 最低位优先 LSD</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-ee41d9ba9d41c625.gif?imageMogr2/auto-orient/strip|imageView2/2/w/1012/format/webp" alt="基数排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-d1c26722a18c0dd8.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="基数排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> radix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>radix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认为十进制</span>    radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果未指定关键词位数将自动使用首个元素的位数作为n</span>    n <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> i<span class="token punctuation">,</span>    j<span class="token punctuation">,</span>    tmp<span class="token punctuation">,</span>    num<span class="token punctuation">,</span>    queues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    q <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    queues<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成Q[0]~Q[radix-1]</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//LSD低位起始</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      tmp <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>radix<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取某位数值</span>      <span class="token comment" spellcheck="true">//这里这个转换只能搞得动十进制= =其他就会有问题 因为不能直接用其他进制来进行运算 所以考虑使用字符串处理</span>      queues<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//重构q</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>queues<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queues<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之类型推论</title>
      <link href="/2019/12/17/typescript-lei-xing-tui-lun/"/>
      <url>/2019/12/17/typescript-lei-xing-tui-lun/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>TypeScript</code> 类型推论：即类型是在哪里如何被推断的。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><code>TypeScript</code> 里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。如下面的例子</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>变量 <code>x</code> 的类型被推断为数字。这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。大多数情况下，类型推断是直截了当地。后面的小节，我们会浏览类型推论时的细微差别。</p><h3 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h3><p>当需要从几个表达式中推断类型的时候，会使用这些表达式的类型来推断出一个最合适的通用类型。例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>为了推断 <code>x</code> 的类型，我们必须考虑所有元素的类型。这里有两种选择：<code>number</code> 和 <code>null</code>。计算通用类型算法会考虑所有的候选类型，并选出一个兼容所有候选类型的类型。</p><p>由于最终的类型通用类型取自候选类型，有些时候候选类型共享相同的通用类型，但是没有一个类型能做为所有候选类型的类型。例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>这里，我们想让 <code>zoo</code> 被推断为 <code>Animal[]</code> 类型。但是这个数组里没有对象是 <code>Animal</code> 类型的，因此不能推断出这个结果。为了更正，当候选类型不能使用的时候，我们需要明确的指出类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> zoo<span class="token punctuation">:</span>Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，<code>(Rhino | Elephant | Snake)[]</code>。</p><h3 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h3><p><code>TypeScript</code> 类型推断也可能按照相反的方向进行。这被叫做 <code>按上下文归类</code>。按上下文归类会发生在表达式的类型与所处的位置相关时。比如：</p><pre class=" language-typescript"><code class="language-typescript">window<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;- Error</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个例子会得到一个类型错误，<code>TypeScript</code> 类型检查器使用 <code>Window.onmousedown</code> 函数的类型推断来推断右边函数表达式的类型。因此，就能推断出 <code>mouseEvent</code> 参数的类型了。如果函数表达式不是在上下文类型的位置， <code>mouseEvent</code> 参数的类型需要指定为 <code>any</code>，这样也不会报错了。</p><p>如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略。 重写上面的例子：</p><pre class=" language-typescript"><code class="language-typescript">window<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nouseEvent<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;- Now, no error is given</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个函数表达式有明确的参数类型注解，上下文类型被忽略。这样的话就不报错了，因为这里不会使用到上下文类型。</p><p>上下文归类在很多情况下使用到。通常包含函数的参数、赋值表达式的右边、类型断言、对象成员、数组字面量和返回值语句。上下文类型也会做为最佳通用类型的候选类型。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">createZoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子里，最佳通用类型有 <code>4</code> 个候选者：<code>Animal</code>，<code>Rhino</code>，<code>Elephant</code> 和 <code>Snake</code>。当然, <code>Animal</code> 会被做为最佳通用类型。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类型推论 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之枚举</title>
      <link href="/2019/11/12/typescript-mei-ju/"/>
      <url>/2019/11/12/typescript-mei-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>使用枚举我们可以定义一些带名字的常量</li><li>使用枚举可以清晰地表达意图或者创建一组有区别的用例。</li><li><code>TypeScript</code> 支持基于数字的和基于字符串的枚举。</li></ul><hr><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>首先让我能看看数字枚举，如果你使用过其他编程语言应该会很熟悉。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Down<span class="token punctuation">,</span>  Left<span class="token punctuation">,</span>  Right<span class="token punctuation">}</span></code></pre><p>如上，我们定义了一个数字枚举，<code>Up</code> 使用初始化为 <code>1</code>。其余成员会从 <code>1</code> 开始自动增长。换句话说， <code>Direction.Up</code> 的值为 <code>1</code>，<code>Down</code> 为 <code>2</code>, <code>Left</code> 为 <code>3</code>，<code>Right</code> 为 <code>4</code>。</p><p>我们还可以完全不使用初始化器：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  Up<span class="token punctuation">,</span>  Down<span class="token punctuation">,</span>  Left<span class="token punctuation">,</span>  Right<span class="token punctuation">}</span></code></pre><p>现在， <code>Up</code> 的值为 <code>0</code>，<code>Down</code> 的值为 <code>1</code> 等等。当我们不在乎成员的值的时候，这种自增长的行为是很有用处的，但是要注意每个枚举成员的值都是不同的。</p><p>使用枚举很简单：</p><ul><li>通过枚举的属性来访问枚举成员</li><li>通过枚举的名字来访问枚举类型</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Response <span class="token punctuation">{</span>  No <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  Yes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">respond</span><span class="token punctuation">(</span>recipient<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> Response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">'Princess Caroline'</span><span class="token punctuation">,</span> Response<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数字枚举可以被混入到 <code>计算过的和常量成员</code>。简短地说，不带初始化的枚举或者被放在第一的位置，或者被放在使用了数字常量或其他常量初始化了的枚举后面。换句话说，下面的情况是不被允许的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> E <span class="token operator">=</span> <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">getSomeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    B <span class="token comment" spellcheck="true">// 错误!'A'不是常量初始化的，所以'B'需要一个初始化器</span><span class="token punctuation">}</span></code></pre><hr><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p>字符串枚举的概念很简单，但是有细微的运行时的差别。在一个字符串枚举里，每个成员都必须用字符串字面量，或另一个字符串枚举成员进行初始化。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  Up <span class="token operator">=</span> <span class="token string">'Up'</span><span class="token punctuation">,</span>  Down <span class="token operator">=</span> <span class="token string">'Down'</span><span class="token punctuation">,</span>  Left <span class="token operator">=</span> <span class="token string">'Left'</span><span class="token punctuation">,</span>  Right <span class="token operator">=</span> <span class="token string">'Right'</span><span class="token punctuation">}</span></code></pre><p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。换句话说，如果你正在调试且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息（尽管 <code>反向映射</code> 会有所帮助），字符串枚举允许提供一个运行时有意义并且可读的值，独立于枚举成员的名字。</p><hr><h3 id="异构枚举-Heterogeneous-enums"><a href="#异构枚举-Heterogeneous-enums" class="headerlink" title="异构枚举 Heterogeneous enums"></a>异构枚举 <code>Heterogeneous enums</code></h3><p>从技术的角度来说，枚举可以混合数字和字符串成员，但是似乎你并不会这么做：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> BooleanLikeHeterogeneousEnum <span class="token punctuation">{</span>  No <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  Yes <span class="token operator">=</span> <span class="token string">'Yes'</span><span class="token punctuation">}</span></code></pre><p>除非你真的想要利用 <code>JavaScript</code> 运行时的行为，否则我们不建议这样做。</p><hr><h3 id="计算的和常量成员"><a href="#计算的和常量成员" class="headerlink" title="计算的和常量成员"></a>计算的和常量成员</h3><p>每个枚举成员都带有一个值，它可以是 <strong>_常量_</strong> 或 <strong><em>计算出来</em></strong>的。当满足如下条件时，枚举成员被当作是常量：</p><ul><li>它是枚举的第一个成员且没有初始化器，这种情况下它被赋值 <code>0</code>：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// E.X is constant</span><span class="token keyword">enum</span> E <span class="token punctuation">{</span>  X<span class="token punctuation">}</span></code></pre><ul><li>它不带有初始化器且它之前的枚举成员是一个 <strong>_数字_</strong>常量。这种情况下，当前枚举成员的值为它上一个枚举成员的值加 <code>1</code>。</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// All enum members in 'E1' and 'E2' are constant.</span><span class="token keyword">enum</span> E1 <span class="token punctuation">{</span>  X<span class="token punctuation">,</span>  Y<span class="token punctuation">,</span>  Z<span class="token punctuation">}</span><span class="token keyword">enum</span> E2 <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  B<span class="token punctuation">,</span>  C<span class="token punctuation">}</span></code></pre><ul><li>枚举成员使用 <strong><em>常量枚举表达式</em></strong> 初始化。常量枚举表达式是 <code>TypeScript</code> 的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常量枚举表达式：<ul><li>一个枚举表达式字面量(主要是字符串字面量或数字字面量)</li><li>一个对之前定义的常量枚举成员的引用(可以是在不同的枚举类型中定义的)</li><li>带括号的常量枚举表达式</li><li>一元运算符 <code>+</code>，<code>-</code>，<code>~</code> 其中之一应用在了常量枚举表达式</li><li>常量枚举表达式作为二元运算符 <code>+</code>，<code>-</code>，<code>*</code> ，<code>/</code>，<code>%</code>，<code>&lt;&lt;</code>， <code>&gt;&gt;</code>，<code>&gt;&gt;&gt;</code>，<code>&amp;</code>，<code>|</code>，<code>^</code> 的操作对象。若常量枚举表达式求值后为 <code>NaN</code> 或 <code>Infinity</code>，则会在编译阶段报错。</li></ul></li></ul><p>所有其它情况的枚举成员被当作是需要计算得出的值。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> FileAccess <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// constant members</span>  None<span class="token punctuation">,</span>  Read <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>  Write <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>  ReadWrite <span class="token operator">=</span> Read <span class="token operator">|</span> Write<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// computed member</span>  G <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span></code></pre><hr><h3 id="联合枚举与枚举成员的类型"><a href="#联合枚举与枚举成员的类型" class="headerlink" title="联合枚举与枚举成员的类型"></a>联合枚举与枚举成员的类型</h3><p>存在一种特殊的非计算的常量枚举成员的子集：字面量枚举成员。字面量枚举成员是指不带有初始值的常量枚举成员，或者是值被初始化为：</p><ul><li>任何字符串字面量（例如：<code>foo</code>， <code>bar</code>， <code>baz</code>）</li><li>任何数字字面量（例如： <code>1</code>， <code>100</code>）</li><li>应用了一元 <code>-</code> 符号的数字字面量（例如： <code>-1</code>， <code>-100</code>）</li></ul><p>当所有枚举成员都拥有字面量枚举值时，它就带有了一种特殊的语义。</p><p>首先，枚举成员成为了类型！ 例如，我们可以说某些成员 只能是枚举成员的值：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> ShapeKind <span class="token punctuation">{</span>  Circle<span class="token punctuation">,</span>  Square<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> ShapeKind<span class="token punctuation">.</span>Circle<span class="token punctuation">;</span>  radius<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> ShapeKind<span class="token punctuation">.</span>Square<span class="token punctuation">;</span>  sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Circle <span class="token operator">=</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> ShapeKind<span class="token punctuation">.</span>Square<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Error !</span>  rasius<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>另一个变化是枚举类型本身变成了每个枚举成员的 _联合_。虽然我们还没有讨论<strong>联合类型</strong>，但你只要知道通过联合枚举，类型系统能够利用这样一个事实，它可以知道枚举里的值的集合。因此，<code>TypeScript</code> 能够捕获在比较值的时候犯的愚蠢的错误。例如：</p><pre class=" language-typescript"><code class="language-typescript">enmu E <span class="token punctuation">{</span>  Foo<span class="token punctuation">,</span>  Bar<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> E<span class="token punctuation">.</span>Foo <span class="token operator">||</span> x <span class="token operator">!==</span> E<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Error! Operator '!==' cannot be applied to types 'E.Foo' and 'E.Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个例子里，我们先检查 <code>x</code> 是否不是 <code>E.Foo</code>。如果通过了这个检查，然后 <code>||</code> 会发生短路效果，<code>if</code> 语句体里的内容会被执行。然而，这个检查没有通过，那么<code>x</code> 只能为 <code>E.Foo</code>，因此没理由再去检查它是否为 <code>E.Bar</code>。</p><hr><h3 id="运行时的枚举"><a href="#运行时的枚举" class="headerlink" title="运行时的枚举"></a>运行时的枚举</h3><p>枚举是在运行时真正存在的对象。例如下面的枚举：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> E <span class="token punctuation">{</span>  X<span class="token punctuation">,</span>  Y<span class="token punctuation">,</span>  Z<span class="token punctuation">}</span></code></pre><p>实际上可以传递给函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> X<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>X<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Works, since 'E' has a property named 'X' which is a number.</span><span class="token function">f</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>除了创建一个以属性名作为对象成员的对象之外，数字枚举成员还具有了 <strong>反向映射</strong>，从枚举值到枚举名字。例如，在下面的例子中：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>  A<span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> Enum<span class="token punctuation">.</span>A<span class="token punctuation">;</span><span class="token keyword">let</span> nameOfA <span class="token operator">=</span> Enum<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span></code></pre><p><code>TypeScript</code> 可能会将这段代码编译为下面的 <code>JavaScript</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Enum<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Enum<span class="token punctuation">[</span><span class="token punctuation">(</span>Enum<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Enum <span class="token operator">||</span> <span class="token punctuation">(</span>Enum <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> Enum<span class="token punctuation">.</span>A<span class="token punctuation">;</span><span class="token keyword">var</span> nameOfA <span class="token operator">=</span> Enum<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（<code>name</code> -&gt; <code>value</code>）和 反向映射（<code>value</code> -&gt; <code>name</code>）。引用枚举成员总会生成为对象属性访问并且永远也不会内联代码。</p><p>要注意的是，不会为 字符串枚举成员生成反向映射。</p><hr><h3 id="const-枚举"><a href="#const-枚举" class="headerlink" title="const 枚举"></a><code>const</code> 枚举</h3><p>大多数情况下，枚举是十分有效的方案。然而在某些情况下需求很严格。为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问。我们可以使用 <code>const</code> 枚举。常量枚举通过在枚举上使用 <code>const</code> 修饰符来定义。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  B <span class="token operator">=</span> A <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>常量枚举只能使用常量枚举白噢大事，并且不同于常规的枚举，它们在编译阶段会被删除。常量枚举成员字在使用的地方会被内联起来。之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>  Up<span class="token punctuation">,</span>  Down<span class="token punctuation">,</span>  Left<span class="token punctuation">,</span>  Right<span class="token punctuation">}</span><span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>  Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span>  Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span>  Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span>  Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>生成后的代码为：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">var</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment" spellcheck="true">/*Up*/</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">/*Down*/</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">/*Left*/</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">/*Right*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><hr><h3 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h3><p>外部枚举用来描述已经存在的枚举类型的形状。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  B<span class="token punctuation">,</span>  C <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之泛型</title>
      <link href="/2019/11/01/typescript-zhi-fan-xing/"/>
      <url>/2019/11/01/typescript-zhi-fan-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>软件工程中，我们不仅要创建一致的定义良好的 <code>API</code>，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同样也能支持未来的数据类型，这在创建大型系统时为你提供例了十分灵活的功能。</p><p>在像 <code>C#</code> 和 <code>Java</code> 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。</p><hr><h3 id="泛型之-Hello-World"><a href="#泛型之-Hello-World" class="headerlink" title="泛型之 Hello World"></a>泛型之 Hello World</h3><p>下面来创建第一个使用泛型的例子：<code>identity</code> 函数。这个函数会返回传入传入它的值。你可以把这个函数当成是 <code>echo</code> 命令。</p><p>不用泛型的话，这个函数可能是下面这样：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者，我们使用 <code>any</code> 类型来定义函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用 <code>any</code> 类型会导致这个函数可以接收任何类型的 <code>arg</code> 参数，这样就丢失了一些信息：传入的类型与返回的类型应该是相同的。如果我么传入一个数字，我们值知道任何类型的值都有可能被返回。</p><p>因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了 <code>类型变量</code> ，它是一种特殊的变量，只用于表示类型而不是值。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们给 <code>identity</code> 添加了类型变量 <code>T</code>。 <code>T</code> 帮助我们捕获用户传入的类型（比如：<code>number</code>），之后我们就可以使用这个类型。 之后我们再次使用了 <code>T</code> 当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。 这允许我们跟踪函数里使用的类型的信息。</p><p>我们把这个版本的 <code>identity</code> 函数叫做泛型，因为它可以适用于多个类型。不同于使用 <code>any</code>，它不会丢失信息，像第一个例子那样保持准确性，传入数值类型并返回数值类型。</p><p>我们定义了泛型函数后，可以用两种方法使用：<br>第一种是，传入所有的参数，包含类型参数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> output <span class="token operator">=</span> identity<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'myString'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type of output will be 'string'</span></code></pre><p>这里我们明确的指定了 <code>T</code> 是 <code>string</code> 类型，并做为一个参数传给函数，使用了 <code>&lt;&gt;</code> 括起来而不是 <code>()</code>。</p><p>第二种方法更普遍。利用了类型推断 <code>--</code> 即编译器会根据传入的参数自动地帮助我们确定 <code>T</code> 的类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">'myString'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type of output will be 'string'</span></code></pre><p>注意我们没必要使用 <code>&lt;&gt;</code> 来明确地传入类型；编译器可以查看 <code>myString</code> 的值，然后把 <code>T</code> 设置为它的类型。类型推断帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入 <code>T</code> 的类型，在一些复杂的情况下，这是可能出现的。</p><hr><h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><p>使用泛型创建像 <code>identity</code> 这样的泛型函数时，编译器要求你在函数体内必须正确的使用这个通用的类型。换句话说，你必须把这些参数当做是任意或所有类型。</p><p>看下之前 <code>identity</code> 例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果我们想同时打印出 <code>arg</code> 的长度。 我们很可能会这样做：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error：T doesn't have .length</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可以这样理解 <code>loggingIdentity</code> 的类型：泛型函数 <code>loggingIdentity</code> ，接收类型参数 <code>T</code> 和参数 <code>arg</code> ，它是个元素类型是 <code>T</code> 的数组，并返回元素类型是 <code>T</code> 的数组。如果我们传入数字数组，将返回一个数字数组，因为此时 <code>T</code> 的类型为 <code>number</code> 。这可以让我们把泛型变量 <code>T</code> 当作类型的一部分使用，而不是整个类型，增加了灵活性。</p><p>我们也可以这样实现上面的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Array has a .length, so no more error</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用过其他语言，你可能对这种语法已经很熟悉了。在下一节，会介绍如何创建自定义泛型像 <code>T</code> 一样。</p><hr><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><p>上一节，我们创建了 <code>identity</code> 通用函数，可以适用于不同的类型。在这节，我们研究一下函数本身的类型，以及如何让创建泛型接口。<br>泛型函数的类型与非泛型函数的类型没有什么不同，只是有一个类型参数在最前面，像函数声明一样：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> <span class="token operator">&lt;</span>U<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> U<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> U <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>我们还可以使用带有调用签名的对象字面量来定义泛型函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> indetity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">}</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>这引导我们去写第一个泛型接口了。我们把上面例子里的对象字面量拿出来做为一个接口：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> identitty<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> GenericIdentity <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>一个相似的例子，我们可能想把泛型参数当作整个接口的一个参数。这样我们就能清楚的知道使用的具体是那个泛型类型（比如：<code>Dictionary&lt;string&gt;</code> 而不是 <code>Dictionary</code>）。这样接口里的其它成员也能知道这个参数的类型了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> GenericIdentityFn<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>注意，我们的示例做了少许改动。不再描述泛型函数，而是把非泛型函数签名作为泛型类型的一部分。当我们使用 <code>GenericIdentityFn</code> 的时候，还得传入一个类型参数来指定泛型类型（这里是：<code>number</code>），锁定了之后代码里使用的类型。对于描述哪些部分属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</p><p>除了泛型接口，我们还可以创建泛型类。注意，无法创建泛型枚举和泛型命名空间。</p><hr><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类看上去与泛型接口差不多。泛型类使用(<code>&lt;&gt;</code>)扩起泛型类型，跟在类名后面。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  zeroValue<span class="token punctuation">:</span> T<span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">,</span> y<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>GenericNumber</code> 类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用 number 类型。 也可以使用字符串或其它更复杂的类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> stringNumeric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><p>我们在 <a href="https://libing.art/2019/10/09/typescript-lei/" target="_blank" rel="noopener">类</a> 那节说过，类有两部分：静态部分和实例部分。泛型类指的是实例部分的类型，所以类的静态属性不能使用泛型类型。</p><hr><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>你应该会记得之前的一个例子，我们有时候想操作某类型的一组值，并且我们知道这组值具有什么样的属性。在 <code>loggingIdentity</code> 例子中，我们想访问 <code>arg</code> 的 <code>lengrh</code> 属性，但是编译器并不能证明每种类型都有 <code>length</code> 属性，所以就报错了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: T doesn't have .length</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相比于操作 <code>any</code> 所有类型，我们想要限制函数去处理任意带有 <code>.length</code> 属性的所有类型。只要传入的类型有这个属性，我们就允许，就是说至少包含这一属性。为此，我们需要列出对于 <code>T</code> 的约束要求。</p><p>为此，我们定义一个接口来描述约束条件。创建一个包含 <code>.length</code> 属性的接口，使用这个接口和 <code>extends</code> 关键字来实现约束：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Lengthwise</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Now we konw it has a .length property, so no more error</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number doesn't have a .length property</span></code></pre><p>我们需要传入符合约束类型的值，必须包含必须的属性：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><p>你可以声明一个类型参数，且它被另一个类型函数所约束。比如，现在我们想要用属性名从对象里获取这个属性，并且我们想要确保这个属性存在于对象 <code>obj</code> 上，因此我们需要在这两个类型之间使用约束。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">,</span> key<span class="token punctuation">:</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.</span></code></pre><hr><h3 id="在泛型里使用类类型"><a href="#在泛型里使用类类型" class="headerlink" title="在泛型里使用类类型"></a>在泛型里使用类类型</h3><p>在 <code>TypeScript</code> 使用泛型创建工厂函数时，需要引用构造函数的类类型。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> create<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">BeeKeeper</span> <span class="token punctuation">{</span>  hasMask<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ZooKeeper</span> <span class="token punctuation">{</span>  nametag<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  numLegs<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bee</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  keeper<span class="token punctuation">:</span> BeeKeeper<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Ainmal</span> <span class="token punctuation">{</span>  keeper<span class="token punctuation">:</span> ZooKeeper<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> createInstance<span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Ainmal</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> A<span class="token punctuation">)</span><span class="token punctuation">:</span> A <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">createInstance</span><span class="token punctuation">(</span>Lion<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>nametag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// typechecks!</span><span class="token function">createInstance</span><span class="token punctuation">(</span>Bee<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>hasMask<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// typechecks!</span></code></pre><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/generics.html" target="_blank" rel="noopener">TypeScript 泛型</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之函数</title>
      <link href="/2019/10/22/typescript-han-shu/"/>
      <url>/2019/10/22/typescript-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>函数是 <code>JavaScript</code> 应用程序的基础，它帮助你实现抽象层、模拟类、信息隐藏和模块。在 <code>TypeScript</code> 里，虽然已经支持类、命名空间和模块，但函数任然是主要的定义行为的地方。 <code>TypeScript</code> 为 <code>JavaScript</code> 函数添加了额外的功能，让我们可以更容易的使用。</p><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和 <code>JavaScript</code> 一样， <code>TypeScript</code> 函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列 <code>API</code> 函数还是只使用一次的函数。</p><p>通过下面的例子可以迅速回想起这两种 <code>JavaScript</code> 中的函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Named function</span>funnction <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Anonymous function</span><span class="token keyword">const</span> myAdd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 <code>JavaScript</code> 里，函数可以使用函数体外部的变量。当函数这么做时，我们说它 <code>捕获</code> 了这些变量。至于为什么可以这样做以及其中的利弊超出了本文范围，但是深刻理解这个机制对学习 <code>JavaScript</code> 和 <code>TypeScript</code> 会非常有帮助。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addToZ</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>让我们为上面那个函数添加类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myAdd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 <code>TypeScript</code> 能够根据返回语句自动推断出返回值类型，因此我们通常省略它。</p><hr><h3 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h3><p>现在我们已经为函数指定了类型，下面 👇 让我们写出函数的完整类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>函数类型包含两部分：</p><ul><li>1、参数类型</li><li>2、返回值类型<br>当写出完整函数类型的时候，这两部分是需要的。我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。这个名字只是为了增加可读性。我们也可以这么写：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>baseValue<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> increment<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。<br>第二部分是返回值类型。对于返回值，我们在函数和返回值类型之前使用 <code>=&gt;</code> 符号，使之清晰明了。如之前提到的，返回值类型是函数类型的必要部分，如果函数没有任何返回值，你也必须指定返回值类型为 <code>void</code> 而不能留空。<br>函数的类型只是由类型和返回值组成的。函数中使用的捕获变量不会体现在类型里。实际上，这些变量是函数的隐藏状态，并不是组成 <code>API</code> 的一部分。</p><hr><h3 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h3><p>尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，<code>TypeScript</code> 编译器会自动识别出类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// myAdd has the full function type</span><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// The parameters `x` and `y` have the type number</span><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>baseValue<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> increment<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这叫做”按上下文归类”，是类型推断的一种，它帮助我们更好的为程序指定类型。</p><hr><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><p><code>TypeScript</code> 里的每个函数参数都是必须的。这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。间短地说，传递给一个函数地参数个数必须与函数期望的参数个数一致。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>fristName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too few parameters</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too many parameters</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// right</span></code></pre><p><code>Javascript</code> 里，每个参数都是可选的，可传可不传。没传参的时候，它的值就是 <code>undefined</code>。在 <code>TypeScript</code> 里我们可以在参数名旁使用 <code>?</code> 实现可选参数的功能。比如，我们想让 <code>lastName</code> 是可选的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// works correctly now</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Expected 1-2 arguments, but got 3.</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// right</span></code></pre><p>可选参数必须跟在必须参数后面。如果上例我们想让 <code>firstName</code> 是可选的，那么就必须调整它们的位置，把 <code>firstName</code> 放在后面。</p><p>在 <code>TypeScript</code> 里，我们也可以为参数提供一个默认值，当用户没有传递这个参数或传递的值是 <code>undefined</code> 时，它们叫做有默认初始化值的参数。让我们修改上例，把 <code>lastName</code> 的默认值设置为 <code>Smith</code> 。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName <span class="token operator">=</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob Smith</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob Smith</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Expected 1-2 arguments, but got 3.</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  Bob Admas</span></code></pre><p>在所有必须参数后面的带初始默认话的参数都是可选的，与可选参数一样，在调用函数的时候可以省略。也就是说可选参数与末尾的默认参数共享参数类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>和</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName <span class="token operator">=</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>共享同样的类型(<code>firstName: string, lastName?: string</code>) =&gt; <code>string</code>。默认参数的默认值消失了，只保留了它是一个可选参数的信息。</p><p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。如果带默认值的参数出现在必须参数前面，用户必须明确的传入 <code>undefined</code> 值来获得默认值。例如，我们重写最后一个例子，让 <code>undefined</code> 是带默认值的参数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName <span class="token operator">=</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too few parameters</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too many parameters</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay and returns "Bob Admas"</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay and returns "Will Admas"</span></code></pre><hr><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>必须参数、默认参数和可选参数有个共同点：它们表示某一个参数。有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来，在 <code>JavaScript</code> 里，你可以使用 <code>arguments</code> 来 访问所有传入的参数。</p><p>在 <code>TypeScript</code> 里，你可以把所有参数收集到一个变量里：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Joseph'</span><span class="token punctuation">,</span> <span class="token string">'Samuel'</span><span class="token punctuation">,</span> <span class="token string">'Lucas'</span><span class="token punctuation">,</span> <span class="token string">'MacKinzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Joseph Samuel Lucas MacKinzie</span></code></pre><p>剩余参数会被当作个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号 (<code>...</code>) 后面给定的名字，你可以在函数体内使用这个数组。</p><p>这个省略号也会在带有剩余参数的函数类型定义上使用到：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> buildNameFun<span class="token punctuation">:</span> <span class="token punctuation">(</span>fname<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span> <span class="token operator">=</span> buildName<span class="token punctuation">;</span></code></pre><hr><h3 id="This"><a href="#This" class="headerlink" title="This"></a><code>This</code></h3><p>学习如何在 <code>JavaScript</code> 里正确的使用 <code>this</code> 就好比一场成人礼。由于 <code>TypeScript</code> 是 <code>JavaScript</code> 的超集， <code>TypeScript</code> 程序员也需要弄清 <code>this</code> 工作机制并且有 <code>bug</code> 的时候能够找出错误所在。幸运的是， <code>TypeScript</code> 能通知你错误地使用了 <code>this</code> 的地方。如果你想了解 <code>JavaScript</code> 里的 <code>this</code> 是如何工作的，那么首先阅读 <code>Yehuda Katz</code> 写的<a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">Understanding JavaScript Function Invocation and “this”</a>。 <code>Yehuda Katz</code> 的文章详细的阐述了 <code>this</code> 的内部工作原理，因此我们这里只做简单介绍。</p><hr><h3 id="this-和-箭头函数"><a href="#this-和-箭头函数" class="headerlink" title="this 和 箭头函数"></a><code>this</code> 和 箭头函数</h3><p><code>JavaScript</code> 里， <code>this</code> 的值在函数被调用的时候才会指定。这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。但众所周知，这不是一件很简单的事，尤其是返回一个函数或将函数当作参数传递的时候。</p><p>下面看一个例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pickerCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> pickerSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickerCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickerSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>        card<span class="token punctuation">:</span> pickerCard <span class="token operator">%</span> <span class="token number">13</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickerCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card: '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">' of '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到 <code>createCardPicker</code> 是个函数，并且它又返回了一个函数。如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。因为 <code>createCardPicker</code> 返回的函数里的 <code>this</code> 被设置成了 <code>window</code> 而不是 <code>deck</code> 对象。因为我们只是独立的调用了 <code>cardPicker</code> 。顶级的非方法式调用会将 <code>this</code> 视为 <code>window</code> 。(注意 ⚠️：在严格模式下， <code>this</code> 为 <code>undefined</code> 而不是 <code>window</code> 。)</p><p>为了解决这个问题，我们可以在函数被返回时就绑好正确的 <code>this</code> 。这样的话，无论之后怎么使用它，都会引用绑定的 <code>deck</code> 对象。我们需要改变函数表达式来使用 <code>ECMAScript 6</code> 箭头语法。箭头函数能保存函数创建时的 <code>this</code> 值，而不是调用时的值。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pickerCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> pickerSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickerCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickerSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>        card<span class="token punctuation">:</span> pickerCard <span class="token operator">%</span> <span class="token number">13</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card: '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">' of '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更好事情是， <code>TypeScript</code> 会警告你犯了一个错误，如果你给编译器设置了 <code>--nolmplicitThis</code> 标记。它会指出 <code>this.suits[pickedSuit]</code> 里的 <code>this</code> 的类型为 <code>ay</code> 。</p><hr><h3 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a><code>this</code> 参数</h3><p>不幸的是，<code>this.suits[pickedSuit]</code> 的类型依旧为 <code>any</code>。这是因为 <code>this</code> 来自对象字面量里的函数表达式。修改的方法是，提供一个显式的 <code>this</code> 参数。 <code>this</code> 参数是个假的参数，它出现在参数列表的最前面：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// make sure `this` is unusable in this standalone function</span><span class="token punctuation">}</span></code></pre><p>让我们往例子里添加一些接口，<code>Card</code> 和 <code>Deck</code>，让类型重用能够变得清晰简单些：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Card</span> <span class="token punctuation">{</span>  suit<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  card<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Deck</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  cards<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Deck<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Card<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> deck<span class="token punctuation">:</span> Deck <span class="token operator">=</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 注意:该函数现在显式地指定它的被调用方必须是Deck类型</span>  createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Deck<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pickerCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> pickerSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickerCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickerSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>        card<span class="token punctuation">:</span> pickerCard <span class="token operator">%</span> <span class="token number">13</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickerCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card: '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">' of '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在 <code>TypeScript</code> 知道 <code>createCardPicker</code> 期望在某个 <code>Deck</code> 对象上调用。也就是说 <code>this</code> 是 <code>Deck</code> 类型的，而非 <code>any</code> 类型，因此 <code>--noImplicitThis</code> 不会报错了。</p><hr><h3 id="this-参数在回调函数里"><a href="#this-参数在回调函数里" class="headerlink" title="this 参数在回调函数里"></a><em><code>this</code></em> 参数在回调函数里</h3><p>你也可以看到过在回调函数里的 <code>this</code> 报错：当你将一个函数传递到某个库函数里稍后会被调用时。因为当回调函数被调用的时候，它们会被当成一个普通函数调用， <code>this</code> 将为 <code>undefined</code> 。稍作改动，你就可以通过 <code>this</code> 参数来避免错误。首先，库函数的作者要指定 <code>this</code> 的类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">UIElement</span> <span class="token punctuation">{</span>  <span class="token function">addClickListener</span><span class="token punctuation">(</span>onclick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>this: void</code> 表示 <code>addClickListener</code> 期望 <code>onclick</code> 是不需要此<code>this</code> 类型的函数。其次，用 <code>this</code> 注释您的调用代码。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// oops, used this here. using this callback would crash at runtime</span>  <span class="token function">onClickBad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Handler<span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uiElement<span class="token punctuation">.</span><span class="token function">addClickListener</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>onClickBad<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>指定了 <code>this</code> 类型后，你显式声明 <code>onClickBad</code> 必须在 <code>Handler</code> 的实例上调用。然后 <code>TypeScript</code> 会检测 <code>addClickListener</code> 要求函数带有 <code>this: void</code> 。改变 <code>this</code> 类型来修复这个错误：</p><p>指定了 this 类型后，你显式声明 onClickBad 必须在 Handler 的实例上调用。 然后 TypeScript 会检测到 addClickListener 要求函数带有 this: void。 改变 this 类型来修复这个错误：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// oops, used this here. using this callback would crash at runtime</span>  <span class="token function">onClickGood</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uiElement<span class="token punctuation">.</span><span class="token function">addClickListener</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>onClickGood<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为 <code>onClickGood</code> 指定了 <code>this</code> 类型为 <code>void</code>，因此传递 <code>addClickListener</code> 是合法的。 当然了，这也意味着不能使用 <code>this.info</code>。 如果你两者都想要，你不得不使用箭头函数了：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  onClickGood <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是可行的因为箭头函数不会捕获 <code>this</code> ，所以你总是可以把它们传给期望 <code>this: void</code> 的函数。 缺点是每个 <code>Handler</code> 对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 <code>Handler</code> 的原型链上。 它们在不同 <code>Handler</code> 对象间是共享的。</p><hr><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p><code>JavaScript</code> 本身是个动态语言，<code>JavaScript</code> 里函数根据传入不同的参数而返回不同类型的数据是很常见的。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Check to see if we're working with an object/array</span>  <span class="token comment" spellcheck="true">// if so, they gave us the deck and we'll pick the card</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pickedCard<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Otherwise just let them pick the card</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      suit<span class="token punctuation">:</span> suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>      card<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">13</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> myDeck <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'diamonds'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'hearts'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard1 <span class="token operator">=</span> myDeck<span class="token punctuation">[</span><span class="token function">pickedCard</span><span class="token punctuation">(</span>myDeck<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card'</span> <span class="token operator">+</span> pickedCard1<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">'of'</span> <span class="token operator">+</span> pickedCard1<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard2 <span class="token operator">=</span> <span class="token function">pickedCard</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">'of'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>pickCard</code> 方法根据传入参数的不同会返回两种不同的类型。如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。如果用户想抓牌，我们告诉他抓到了什么牌。但是这怎么在类型系统里表示呢。</p><p>方法是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。<br>下面我们来重载 <code>pickCard</code> 函数。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">{</span>suit<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> card<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  suit<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  card<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Check to see if we're working with an object/array</span>  <span class="token comment" spellcheck="true">// if so, they gave us the deck and we'll pick up the card</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickedCard<span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pickerCard<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Otherwise just let them pick up the card</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickefSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      suit<span class="token punctuation">:</span> suits<span class="token punctuation">[</span><span class="token string">'pickerSuit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      card<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">13</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> myDeck <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'diamonds'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'hearts'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard1 <span class="token operator">=</span> myDeck<span class="token punctuation">[</span><span class="token function">pickCard</span><span class="token punctuation">(</span>myDeck<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard2 <span class="token operator">=</span> <span class="token function">pickCard</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">'of'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样改变后，重载的 <code>pickCard</code> 函数在调用的时候会进行正确的类型检测。</p><p>为了让编译器能够选择正确的检查类型，它与 <code>JavaScript</code> 里的处理流程相似。它查找重载列表，尝试使用第一个重载定义。如果匹配的话就使用这个。因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p><p>注意，<code>function pickCard(x): any</code> 并不是重载列表的一部分，因此这里只要两个重载：一个接收对象，另一个接收数字，以其它参数调用 <code>pickCard</code> 会产生错误。</p><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/functions.html" target="_blank" rel="noopener">TypeScript 函数</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之类</title>
      <link href="/2019/10/09/typescript-lei/"/>
      <url>/2019/10/09/typescript-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>传统的 <code>JavaScript</code> 程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从 <code>ECMAScript 2015</code>，也就是 <code>ECMAScript 6</code> 开始，<code>JavaScript</code> 程序员将能够使用基于类的面向对象的方式。 使用 <code>TypeScript</code>，我们允许开发者现在就使用这些特性，并且编译后的 <code>JavaScript</code> 可以在所有主流浏览器和平台上运行，而不需要等到下个 <code>JavaScript</code> 版本。</p><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>下面来看一个使用 <code>类</code> 的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {greeting: 'World'}</span>greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,World</span></code></pre><p>如果你使用过 <code>C#</code> 或 <code>Java</code>，你会对这种语法非常熟悉。我们声明一个 <code>Greeter</code> 类，这个类有三个成员：</p><ul><li>一个 <code>greeting</code> 的属性</li><li>一个构造函数</li><li>一个 <code>greet</code> 方法</li></ul><p>你会注意到，我们在引用任何一个类的成员的时候，都用了 <code>this</code> ，它表示我们访问的是类的成员。<br>最后一行，我们用 <code>new</code> 构造了 <code>Greeter</code> 类的一个实例。它会调用之前定义的构造函数，创建一个 <code>Greeter</code> 类型的新对象，并执行构造函数初始化它。</p><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在 <code>TypeScript</code> 里，我们可以使用常用的面向对象模式。基于类的程序设计中一种最基本的模式是：允许使用继承类拓展现有的类。<br>看下面 👇 的例子 🌰：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Animal moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof! Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Woof! Woof!</span>dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Animal moved 10m.</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Woof! Woof!</span></code></pre><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。这里， <code>Dog</code> 是一个派生类，它派生自 <code>Animal</code> 基类，通过 <code>extends</code> 关键字。派生类通常被称作子类，基类通常被称作 超类。</p><ul><li><strong>基类</strong>：在面向对象设计中，被定义为包含所有实体共性的 <code>class</code> 类型。已存在的用来派生新类的类称为基类，又称父类。</li><li><strong>派生类</strong>：从已定义类产生新类的过程称为派生，由已存在的类派生出来的新类称为派生类，又称子类。</li></ul><p>因为 <code>Dog</code> 继承了 <code>Animal</code> 的功能，因此我们可以创建一个 <code>Dog</code> 的实例，拥有 <code>bark()</code> 和 <code>move()</code> 方法。<br>下面我们来看个更加复杂的例子。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Slithering'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Galloping'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">'Sammy the Python'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">'Tommy the Palomino'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Slithering  Sammy the Python moved 5m.</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Galloping  Tommy the Palomino moved 34m.</span></code></pre><p>这个例子展示了一些上面没有提到的特性。这一次我们使用 <code>extends</code> 关键字创建了 <code>Animal</code> 的两个子类： <code>Snake</code> 和 <code>Horse</code> 。</p><p>与前一个例子的不同点是，派生类包含了一个构造函数，它必须调用 <code>super</code>，它会执行基类的构造函数。而且，在构造函数里访问 <code>this</code> 之前，我们一定要调用 <code>super</code>，这个是 <code>TypeScript</code> 强制执行的一条重要规则。</p><p>这个例子演示了如何让在子类里重写父类的方法。 <code>Snake</code> 和 <code>Horse</code> 类都创建了 <code>move</code> 方法，它们重写了从 <code>Animal</code> 继承来的 <code>move</code> 方法，使得 <code>move</code> 方法根据不同的类而具有不同的功能。注意，即使 <code>tom</code> 被声明为 <code>Animal</code> 类型，但因为它是 <code>Horse</code> ，调用 <code>tom.move(34)</code> 时，它会调用 <code>Horse</code> 重写的方法。</p><hr><h3 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h3><h4 id="公共-public"><a href="#公共-public" class="headerlink" title="公共 public"></a><code>公共 public</code></h4><p>在上面的例子里，我们可以自由的访问程序里定义的成员。如果你对其语言中的类比较了解，就会注意到我们在之前的代码里并没有使用 <code>public</code> 来做修饰符，在 <code>TypeScript</code> 里，成员都默认为 <code>public</code> 。</p><p>你也可以明确的将一个成员标记成 <code>public</code> 。我们可以用下面的方式来重写上面的 <code>Animal</code> 类：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="私有-private"><a href="#私有-private" class="headerlink" title="私有 private"></a><code>私有 private</code></h4><p>当成员被标记为 <code>private</code> 时，它就不能在声明它的类的外部访问。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error： Property 'name' is private and only accessible within class 'Animal'</span></code></pre><p><code>TypeScript</code> 使用的是结构性类型系统。当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p><p>然而，当我们比较带有 <code>private</code> 或 <code>protected</code> 成员类型的时候，情况就不同了。如果其中一个类型里包含 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为两个类型是兼容的。对于 <code>protected</code> 成员也使用这个规则。</p><p>下面来看一个例子，更好的说明了这一点：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Rhino</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'Rhino'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">consoructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Goat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> rhino <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal <span class="token operator">=</span> rhino<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay</span>animal <span class="token operator">=</span> employee<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：Animal 与 Employee 不兼容.</span></code></pre><p>在这个例子中，有 <code>Animal</code> 、 <code>Rhino</code> 和 <code>Empolyee</code> 三个类， <code>Rhino</code> 是 <code>Animal</code> 的子类， <code>Empolyee</code> 类看上去与 <code>Animal</code> 是相同的。我们创建了几个这些类的实例，并相互赋值拉看看会发生什么。因为 <code>Animal</code> 和 <code>Rhino</code> 共享了来自 <code>Animal</code> 里的私有成员定义 <code>private name: string</code>，因此它们是兼容的。然而 <code>Emloyee</code> 却 不是这样。当把 <code>Employee</code> 赋值给 <code>Animal</code> 的时候，得到一个错误，说它们的类型不兼容。尽管 <code>Employee</code> 里也有一个私有成员 <code>name</code> ，但它明显不是 <code>Animal</code> 里面定义的那个。</p><h4 id="受保护的-protected"><a href="#受保护的-protected" class="headerlink" title="受保护的 protected"></a><code>受保护的 protected</code></h4><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同， <code>protected</code> 成员在派生类中仍然可以访问。例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Empolyee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>theName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Empolyee</span><span class="token punctuation">(</span><span class="token string">'Howard'</span><span class="token punctuation">,</span> <span class="token string">'Sales'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {name: 'Howard', department: 'Sales'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span><span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  Hello, my name is Howard and I work in Sales.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误：属性 'name' 受保护，并且只能在类 'Person' 及其子类中访问</span></code></pre><p>注意 ⚠️，我们不能再 <code>Person</code> 类外使用 <code>name</code>，但是我们仍然可以通过 <code>Empolyee</code> 类的实例方法访问，因为 <code>Employee</code> 是由 <code>Person</code> 派生而来的。</p><p>构造函数可以被标记成 <code>protected</code>，这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Empooyee 能继承 Person</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>theName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'Howard'</span><span class="token punctuation">,</span> <span class="token string">'Sales'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay</span><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'John'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：Person 的构造函数是被保护的</span></code></pre><hr><h3 id="reanonly-修饰符"><a href="#reanonly-修饰符" class="headerlink" title="reanonly 修饰符"></a>reanonly 修饰符</h3><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Octopus</span> <span class="token punctuation">{</span>  readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  readonly numberOfLegs<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Octopus</span><span class="token punctuation">(</span><span class="token string">'Man with the 8 strong legs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dad<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {numberOfLegs: 8, name: 'Man with the 8 strong legs'}</span>dad<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Man with the 3-piece suit'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误：name 是只读的.</span></code></pre><h4 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h4><p>在上面的例子中，我们必须在 <code>Octopus</code> 类里定义一个只读成员 <code>name</code> 和 <code>theName</code> 的构造函数，并且立刻将 <code>theName</code> 赋值给 <code>name</code>，这种情况经常会遇到。参数属性可以方便的让我们在一个地方定义并初始化一个成员。下面的例子是对之前 <code>Octopus</code> 的修改版，使用了参数属性：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Octopus</span> <span class="token punctuation">{</span>  readonly numberOfLegs<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意看我们是如何舍弃了 <code>theName</code>，仅在构造函数里使用 <code>readonly name: string</code>，参数来创建和初始化 <code>name</code> 成员。我们把声明和赋值合并至一处。<br>参数属性通过构造函数参数前面添加一个访问限定符来声明。使用 <code>private</code> 限定一个参数属性会声明并初始化一个私有成员；对于 <code>public</code> 和 <code>protected</code> 来说也是一样。</p><h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p><code>TypeScript</code> 支持通过 <code>getter</code> 和 <code>setter</code> 来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。<br>下面来看如何把一个简单的类改写成使用 <code>get</code> 和 <code>set</code> 。首先，我们从一个没有使用存取器的例子开始。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>  fullName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'Bob Smith'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob Smith</span><span class="token punctuation">}</span></code></pre><p>我们可以随意的设置 <code>fullName</code>，这是非常方便的，但是这也可能会带来麻烦。<br>下面这个版本里，我们先检查用户密码是否正确，然后在允许其修改员工信息。我们把 <code>fullName</code> 的直接访问改成了可以检查密码的 <code>set</code> 方法。我们也加了一个 <code>get</code> 方法，让上面的例子仍然可以工作。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> passcode <span class="token operator">=</span> <span class="token string">'secret passcode'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> _fullName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span>newName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>passcode <span class="token operator">&amp;&amp;</span> passcode <span class="token operator">!==</span> <span class="token string">'secret passcode'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName <span class="token operator">=</span> newName<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error：Unauthorized update of employee!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'Bob Smith'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 弹出  Blob Smith</span><span class="token punctuation">}</span></code></pre><p>我们可以修改一下密码，来验证一下存取器是否工作的。当密码不对时，会提示我们没有权限去修改员工。<br>对于存取器有下面几点需要注意的：</p><ul><li>首先，存取器要求你将编译器设置为输出 <code>ECMAScript 5</code> 或更高，不支持降级到 <code>ECMAScript 3</code> 。</li><li>其次，只有带 <code>get</code> 不带有 <code>set</code> 的存取器自动被推断为 <code>readonly</code> 。</li></ul><hr><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。我们可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。在这个例子里，我们使用 <code>static</code> 定义 <code>origin</code>，因为它是所有网格都会用到的属性。每个实例想要访问这个属性的时候，都要在 <code>origin</code> 前加上类名。如同在实例属性上使用 <code>this.</code> 前缀来访问属性一样，这里我们使用 <code>Grid.</code> 来访问静态属性。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">calculateDistanceFromOrigin</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> xDist <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> Grid<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">let</span> yDist <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> Grid<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>xDist <span class="token operator">*</span> xDist <span class="token operator">+</span> yDist <span class="token operator">*</span> yDist<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> scale<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> grid1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grid</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5x scale</span><span class="token keyword">let</span> grid2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grid</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5x scale</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grid1<span class="token punctuation">.</span><span class="token function">calculateDistanceFromOrigin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 14.142135623730951</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grid2<span class="token punctuation">.</span><span class="token function">calculateDistanceFromOrigin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.8284271247461903</span></code></pre><hr><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类作为其他派生类的基类使用。它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节。<code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  abstract <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'roaming the search...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。抽象方法的语法于与接口方法类似。两者都是定义方法签名但不包含方法体。然而，抽象方法必须包含 <code>abstract</code> 关键字并且可以包含访问修饰符。</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Department name '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  abstract <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须在派生类中实现</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AccountingDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'Accounting and Auditing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在派生类的构造函数中必须调用 super()</span>  <span class="token punctuation">}</span>  <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The Accounting Department meets each Monday at 10am.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Genaerating accounting reports...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> department<span class="token punctuation">:</span> Department<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 允许创建一个对抽象类型的引用</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error：Cannot create an instance of an abstract class.</span><span class="token comment" spellcheck="true">// 错误：不能创建一个抽象类的实例</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountingDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 允许对一个抽象子类进行实例化和赋值</span>department<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Department name Accounting and Auditing</span>department<span class="token punctuation">.</span><span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The Accounting Department meets each Monday at 10am.'</span>department<span class="token punctuation">.</span><span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error： Property 'generateReports' does not exist on type 'Department'.</span><span class="token comment" spellcheck="true">// generateReports 方法在声明的抽象类中不存在</span></code></pre><hr><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>当你在 <code>TypeScript</code> 中声明了一个类的时候，实际上同时声明了很多东西。首先就是 <strong><em>实例的类型</em></strong>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> greeter<span class="token punctuation">:</span> Greeter<span class="token punctuation">;</span>greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,World</span></code></pre><p>这里我们写了 <code>let greeter: Greeter</code>，意思是 <code>Greeter</code> 类的实例类型是 <code>Greeter</code> 。这对于用过其他面向对象的语言的程序员来说讲已经是老习惯了。</p><p>我们也创建了一个叫<em>构造函数</em>的值。这个函数会在我们使用 <code>new</code> 创建类实例的时候被调用。下面我们来看看，上面的代码被编译成 <code>JavaScript</code> 后是什么样子的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Greeter <span class="token operator">=</span> <span class="token comment" spellcheck="true">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Greeter</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Greeter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>greet <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Greeter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> greeter<span class="token punctuation">;</span>greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,World</span></code></pre><p>上面的代码里，<code>var Greeter</code> 将被赋值为构造函数。当我们调用 <code>new</code> 并执行了这个函数后，便会得到一个类的实例。这个构造函数也包含了类的所有静态属性。换个角度说，我们可以认为类具有<em>实例部分</em>和<em>静态部分</em>这个两个部分。</p><p>让我们稍微改写一下这个例子，看看它们之间的区别：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> standardGreeting <span class="token operator">=</span> <span class="token string">'Hello,there'</span><span class="token punctuation">;</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Greeter<span class="token punctuation">.</span>standardGreeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> greeter1<span class="token punctuation">:</span> Greeter<span class="token punctuation">;</span>greeter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter1<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,there</span><span class="token keyword">let</span> greeterMaker<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Greeter <span class="token operator">=</span> Greeter<span class="token punctuation">;</span>greeterMaker<span class="token punctuation">.</span>standardGreeting <span class="token operator">=</span> <span class="token string">'Hey,there'</span><span class="token punctuation">;</span><span class="token keyword">let</span> greeter2<span class="token punctuation">:</span> Greeter<span class="token punctuation">;</span>greeter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter2<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hey,there</span></code></pre><p>这个例子里， <code>greeter1</code> 与之前看到的一样。我们实例化 <code>Greeter</code> 类，并使用这个对象。与我们之前看到的一样。</p><p>再之后，我们直接使用类。我们创建了一个叫 <code>greeterMaker</code> 的变量。这个变量保存了这个类或者说保存了类构造函数。然后我们使用 <code>typeof Greeter</code>，意思是取 <code>Greeter</code> 类的类型，而不是实例的类型。或者更确切的说，”告诉我 <code>Greeter</code> 标识符的类型”，也就是构造函数的类型。这个类型包含了类的所有静态成员和构造函数。之后，就和前面一样，我们在 <code>greeterMaker</code> 上使用 <code>new</code>，创建 <code>Greeter</code> 的实例。</p><h4 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h4><p>类定义会创建两个东西：类的实例类型和一个构造函数。因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> point3d<span class="token punctuation">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>point3d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { x: 1, y: 2, z: 3 }</span></code></pre><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/classes.html" target="_blank" rel="noopener">TypeScript 类</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之接口</title>
      <link href="/2019/10/02/typescript-jie-kou/"/>
      <url>/2019/10/02/typescript-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>TypeScript</code> 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做 <code>鸭式辨型法</code> 或 <code>结构性子类型化</code>。在 <code>TypeScript</code> 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><hr><h3 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h3><p>下面通过一个简单的示例来观察接口是如何让工作的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">:</span> <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>  size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  label<span class="token punctuation">:</span> <span class="token string">'Size 10 Object'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printLabel</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类型检查器会查看 <code>printLabel</code> 的调用。 <code>printLabel</code> 有一个参数，并要求这个对象参数有一个名为 <code>label</code> 类型为 <code>string</code> 的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候<code>TypeScript</code> 却并不会这么宽松，我们下面会稍做讲解。</p><p>下面我们重写上面的例子，这次使用接口来描述：必须包含一个 <code>label</code> 属性且类型为 <code>string</code>：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">LabelledValue</span> <span class="token punctuation">{</span>  label<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">:</span> LabelledValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>  size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  label<span class="token punctuation">:</span> <span class="token string">'Size 10 Object'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printLabel</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>LabelledValue</code> 接口就好比一个名字，用来描述上面例子里的要求。它代表了有一个 <code>label</code> 属性且类型为 <code>string</code> 的对象。需要注意的是，我们在这里并不能像在其他语言里一样，说传给 <code>printLabel</code> 的对象实现了这个接口。我们只会去关注值的外形，只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p><p>还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p><hr><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里的属性不全都是必须的。有些是只在某些条件下存在，或者根本不存在。可选属性在应用 <code>option bags</code> 模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><p>下面是应用了 <code>option bags</code> 的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'black'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p><p>可选属性的好处之一是可以对可能存在的属性进行 <code>预定义</code>，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 <code>createSquare</code>里的 <code>color</code> 属性名拼错，就会得到一个错误提示：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>clor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Error: Property 'clor' does not exist on type 'SquareConfig'</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>clor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'black'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候来修改其值。你可以在属性名前用 <code>readonly</code> 来指定只读属性：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  readonly x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  readonly y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可以通过赋值一个对象字面量来构造一个 <code>Point</code>。赋值后，<code>x</code> 和 <code>y</code> 再也不能被改变了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> p1<span class="token punctuation">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p><code>TypeScript</code> 具有 <code>ReadonlyArray&lt;T&gt;</code> 类型，它与 <code>Array&lt;T&gt;</code> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> ro<span class="token punctuation">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> a<span class="token punctuation">;</span>ro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span>ro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span>ro<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span>a <span class="token operator">=</span> ro<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>上面代码的最后一行，可以看到就算把整个 <code>ReadonlyArray</code> 赋值到一个普通数组也是不可以的。但是你可以用类型断言重写：</p><pre class=" language-typescript"><code class="language-typescript">a <span class="token operator">=</span> ro as <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong><em><code>readonly</code></em></strong> <strong>_vs_</strong> <strong><em><code>const</code></em></strong></p><p>最简单判断该用 <code>readonly</code> 还是 <code>const</code> 的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用<code>readonly</code>。</p><hr><h3 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h3><p>我们在第一个例子里使用了接口，<code>TypeScript</code> 让我们传入 <code>{ size: number; label: string;}</code> 到仅期望得到 <code>{ label&quot; string; }</code> 的函数里。我们已经学过了可选属性，并且知道它们在 <code>option bags</code> 模式里很有用。</p><p>然而，天真地将这两者结合的话就会像在 <code>JavaScript</code> 里那样搬起石头砸自己的脚。比如，那 <code>createSquare</code> 例子来说：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> colour<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意传入 <code>createSquare</code> 的参数拼写为 <code>colour</code> 而不是 <code>color</code>。 在 <code>JavaScript</code> 里，这会默默地失败。</p><p>你可能会争辩这个程序已经正确地类型化了，因为 <code>width</code> 属性是兼容的，不存在 <code>color</code> 属性，而且额外的 <code>colour</code> 属性是无意义的。</p><p>然而，<code>TypeScript</code> 会认为这段代码可能存在 <code>bug</code> 。对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。<br>如果一个对象字面量存在任何 <code>目标类型</code> 不包含的属性时，你会得到一个错误。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// error: 'colour' not expected in type 'SquareConfig'</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> colour<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>绕开这些检查非常简单，最简单的方法是使用类型断言:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> opacity<span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span> as SquareConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然而，最佳的方式是能够添加一个 <code>字符串索引签名</code>，前提是你能够确定这个对象可能具有某些作为特殊使用的额外属性。如果 <code>SquareConfig</code> 带有上面定义的类型的 <code>color</code> 和 <code>width</code> 属性，并且还会带有任意数量的其他属性，那么我们可以这样定义它：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>proName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们稍后会讲到索引签名，但这在我们要表示的是 <code>SquareConfig</code> 可以有任意数量的属性，并且只要它们不是 <code>color</code> 和 <code>width</code> ，那么就不所谓它们的类型是什么。</p><p>还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给另一个变量：因为 <code>squareOptions</code> 不会经过额外的属性检查，所以编译器不会报错。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> squareOptions <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>squareOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要留意，在像上面一样的简单代码里，你可能不应该绕开这些检查。对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部分额外属性检查错误是真正的 <code>bug</code>。就是说你遇到了额外属性检查出的错误，比如 <code>option bags</code>，你应该去审查一下你的类型声明。在这里，如果支持传入 <code>color</code> 或 <code>colour</code> 属性到 <code>createSquare</code>，你应该修改 <code>SquareConfig</code> 定义来体现出这一点。</p><hr><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>接口能够描述 <code>JavaScript</code> 中对象拥有的各种各样的外形。除了描述带有属性的普通对象外，接口也可以描述函数类型。</p><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样定义后，我们可以像使用其他接口一样使用这个函数类型的接口。下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。 比如，我们使用下面的代码重写上面的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> sub<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>函数的参数会逐个进行检查，要求对于位置上的参数类型是兼容的。如果你不想指定类型，<code>TypeScript</code> 的类型系统会推断出参数类型，因为函数直接赋给了 <code>SearchFunc</code> 类型变量。函数的返回值类型是通过其返回值类型推断出来的。（此例是 <code>false</code> 和 <code>true</code>）。如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 <code>SearchFunc</code> 接口中的定义不匹配。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><p>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 <code>a[10]</code> 或 <code>ageMap[&quot;daniel&quot;]</code>。 可索引类型具有一个 <strong><em>索引签名</em></strong>。它描述了 <strong><em>对象索引的类型</em></strong>，还有 <strong><em>相应的索引返回值类型</em></strong>。 让我们看一个例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Fred'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>上面例子里，我们定义了 <code>StringArray</code> 接口，它具有<code>索引签名</code>。 这个索引签名表示了当用 <code>number</code> 去索引 <code>StringArray</code> 时会得到 <code>string</code> 类型的返回值。</p><p><code>TypeScript</code> 支持两种索引签名：<code>字符串</code>和<code>数字</code>。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 <code>number</code> 来索引时，<code>JavaScript</code> 会将它转换成 <code>string</code> 然后再去索引对象。 也就是说用 <code>100</code>（一个 <code>number</code> ）去索引等同于使用 <code>&quot;100&quot;</code> （一个 <code>string</code> ）去索引，因此两者需要保持一致。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  breed<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span><span class="token keyword">interface</span> <span class="token class-name">NotOkay</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Animal<span class="token punctuation">;</span>  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>字符串索引签名能够很好的描述 <code>dictionary</code> 模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&quot;property&quot;]</code> 两种形式都可以。 下面的例子里， <code>name</code> 的类型与字符串索引类型不匹配，所以类型检查器给出一个错误提示：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">NUmberDictionary</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以，length 是 number 类型</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误， name 的类型与索引类型返回值的类型不匹配</span><span class="token punctuation">}</span></code></pre><p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ReadonlyStringArray</span> <span class="token punctuation">{</span>  readonly <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> ReadonlyArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Mallory'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>你不能设置 <code>myArray[2]</code>，因为索引签名是只读的。</p><hr><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p>与 <code>C#</code> 或 <code>Java</code> 里接口的基本作用一样，<code>TypeScript</code> 也能够用它来明确的强制一个类去符合某种契约。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你也可以在接口中描述一个方法，在类里实现它，如同下面的 <code>setTime</code> 方法一样：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> Date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</p><h4 id="类静态部分与实例部分的区别"><a href="#类静态部分与实例部分的区别" class="headerlink" title="类静态部分与实例部分的区别"></a>类静态部分与实例部分的区别</h4><p>当你操作类和接口的时候，你要知道类是具有两个类型的：<code>静态部分的类型</code> 和 <code>实例的类型</code>。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockConstructor</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token punctuation">(</span>hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockConstructor</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是因为当一个类实现了一个接口时，只对其实例部分进行类型检查。<code>constructor</code> 存在于类的静态部分，所以不在检查的范围内。</p><p>因此，我们应该直接操作类的静态部分。看下面的例子，我们定义了两个接口，<code>ClockConstructor</code> 为构造函数所用和 <code>ClockInterface</code> 为实例方法所用。为了方便我们定义一个构造函数 <code>createClock</code>，它用传入的类型创建实例。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockConstructor</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token punctuation">(</span>hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClockInterface<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createClock</span><span class="token punctuation">(</span>  ctor<span class="token punctuation">:</span> ClockConstructor<span class="token punctuation">,</span>  hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClockInterface <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>hour<span class="token punctuation">,</span> minute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DigitalClock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beep beep'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnalogClock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'tick tick'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> digital <span class="token operator">=</span> <span class="token function">createClock</span><span class="token punctuation">(</span>DigitalClock<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> analog <span class="token operator">=</span> <span class="token function">createClock</span><span class="token punctuation">(</span>AnalogClock<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为 <code>createClock</code> 的第一个参数是 <code>ClockConstructor</code> 类型，在 <code>createClock(AnalogClock, 7, 32)</code> 里，会检查 <code>AnalogClock</code> 是否符合构造函数签名。</p><hr><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token operator">&lt;</span>Sauare<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>sideLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">PenStroke</span> <span class="token punctuation">{</span>  penWidth<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">,</span> PenStroke <span class="token punctuation">{</span>  sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token operator">&lt;</span>Square<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>penWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>sideLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><hr><h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>先前我们提过，接口能够描述 <code>JavaScript</code> 里丰富的类型。 因为 <code>JavaScript</code> 其动态灵活的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。</p><p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  interval<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Counter <span class="token punctuation">{</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token keyword">function</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  count<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">.</span>reset <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span></code></pre><p>在使用 <code>JavaScript</code> 第三方库的时候，你可能需要像上面那样去完整地定义类型。</p><hr><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的 <code>private</code> 和 <code>protected</code> 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（<code>implement</code>）。</p><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系。 例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> state<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SelectableControl</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误 Image 类型缺少 state 属性</span><span class="token keyword">class</span> <span class="token class-name">Image</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>在上面的例子里，<code>SelectableControl</code> 包含了 <code>Control</code> 的所有成员，包括私有成员 <code>state</code>。 因为 <code>state</code> 是私有成员，所以只能够是<code>Control</code> 的子类们才能实现 <code>SelectableControl</code> 接口。 因为只有 <code>Control</code> 的子类才能够拥有一个声明于 <code>Control</code> 的私有成员 <code>state</code>，这对私有成员的兼容性是必需的。</p><p>在 <code>Control</code> 类内部，是允许通过 <code>SelectableControl</code> 的实例来访问私有成员 <code>state</code> 的。 实际上， <code>SelectableControl</code> 接口和拥有<code>select</code> 方法的 <code>Control</code> 类是一样的。 <code>Button</code> 和 <code>TextBox</code> 类是 <code>SelectableControl</code> 的子类（因为它们都继承自 <code>Control</code> 并有<code>select</code> 方法），但 <code>Image</code> 和 <code>Location</code> 类并不是这样的。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之基础类型</title>
      <link href="/2019/09/30/typescript-ji-chu-lei-xing/"/>
      <url>/2019/09/30/typescript-ji-chu-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>为了让程序更有价值，我们需要能够处理最简单的数据单元：数字、字符串、结构体、布尔值等。<code>TypeScript</code>支持与<code>JavaScript</code>几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><hr><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>最基本的数据类型就是简单的 <code>true</code>/ <code>false</code> 值，在 <code>JavaScript</code> 和 <code>TypeScript</code> 里叫做 <code>boolean</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>和 <code>JavaScript</code> 一样，<code>TypeScript</code> 里的所有数字都是浮点数，这些浮点数的类型是 <code>number</code>。除了支持十进制和十六进制字面量，<code>TypeScript</code> 还支持 <code>ECMAScript2015</code> 中引入的二进制和八进制字面量。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hexLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binaryLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octalLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>Javascript</code> 程序的另一项基本操作是处理网页或服务端的文本数据。像其他语言里一样，我们使用 <code>string</code> 表示文本数据类型。和<code>Javascript</code> 一样，可以使用双引号(<code>&quot;</code>)或单引号(<code>&#39;</code>)表示字符串。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'bob'</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">'smith'</span><span class="token punctuation">;</span></code></pre><p>你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围(<code>`</code>)，并且以<code>${ expr }</code>这种形式嵌入表达式。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`GENE`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello，My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，I will be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month`</span></span><span class="token punctuation">;</span></code></pre><p>这与下面定义 <code>sentence</code> 的方式效果相同。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'Hello，My name is'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'，I will be'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' years old next month'</span><span class="token punctuation">;</span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>TypeScript</code> 像 <code>JavaScript</code> 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>第二种方式是使用数组泛型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h3><p>元组类型允许表示一个已知元素数量和元素类型的数组，各元素的类型不必相同。比如你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Declare a tuple type</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span>  <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize x</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><p>当访问一个已知索引的元素，会得到正确的类型：</p><pre class=" language-typescript"><code class="language-typescript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error, 'number' does not have 'substr'</span></code></pre><p>当访问一个越界的元素，会使用联合类型替代。</p><pre class=" language-typescript"><code class="language-typescript">x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, 字符串可以赋值给(string | number)类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, 'string' 和 'number' 都有 totoString</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error, 布尔不是(string | number) 类型</span></code></pre><p>联合类型是高级主题，我们会在以后的章节里同讨论它。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><code>enum</code> 类型是对 <code>JavaScript</code> 标准数据类型的一个补充。像 <code>C#</code> 等其他语言一样，使用枚举类型可以为一组数值赋予美好的友好的名字。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>或者，全部都采用手动赋值：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为 <code>2</code>，但是不知道它映射到 <code>Color</code> 里的那个名字，我们可以查找相应的名字。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> colorName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 Green 因为上面代码里，它的值是2</span></code></pre><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>有时候，我们想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入的第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 <code>any</code> 类型来标记这些变量：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">'maybe a string instead'</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, definitely a boolean</span></code></pre><p>在对现有代码进行改写的时候，就像它在其他语言中那样，它允许你在编译时可选择的包含或移除类型检查。你可能认为 <code>Object</code> 有相似的作用，就像它在其他语言中那样。但是 <code>Object</code> 类型的变量只是允许你给它赋任意值，但是却不能够在它上面调用任意的方法，即便它真有这样的方法：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> nouSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure<span class="token punctuation">.</span><span class="token function">ifItExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, ifItExists might exist at runtime</span>notSure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, toFixed exists (but the compiler does not check)</span><span class="token keyword">let</span> prettySure<span class="token punctuation">:</span> Object <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>prettySure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: Property 'toFixed' doesn't exist on the type 'Object'.</span></code></pre><p>当你只知道一部分数据的类型时， <code>any</code> 类型也是有用的。比如，你有一个数组，它包含了不同的类型的数据：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>某种程度上来说， <code>void</code> 类型像是与 <code>any</code>  类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is my warning message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能赋予它 <code>undefined</code> 和 <code>null</code> 。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><p> <code>TypeScript</code> 里， <code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code> 。和 <code>void</code> 相似，它们的本身的类型用处不是很大：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token comment" spellcheck="true">// 我们可以为这些变量分配的东西不多！</span> <span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> nill<span class="token punctuation">;</span></code></pre><p> 默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。也就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><p> 然而，当你指定了一个 <code>--strickNullChecks</code> 标记， <code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们自个。这能避免很多常见的问题。也许在某处传入一个 <code>string</code> 或 <code>null</code> 或 <code>undefined</code> ，你可以使用联合类型 <code>string</code> | <code>null</code> | <code>undefined</code> 。再次说明，后面会介绍联合类型。</p><blockquote><p>注意：我们鼓励尽可能的使用 <code>--strickNullChecks</code> ，但在本介绍手册中我们假设这个标记是关闭的。</p></blockquote><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p><code>never</code> 类型表示的是那些永不存在的值的类型。例如，<code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型；变量也可能是 <code>never</code> 类型，当它们被永不为真的类型保护约束时。</p><p><code>never</code> 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型可以赋值给 <code>never</code> 类型（除了 <code>never</code> 本身除外）。即便 <code>any</code> 也不可以赋值给 <code>never</code> 。</p><p>下面是一些返回 <code>never</code> 类型的函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 返回 never 的函数必须存在无法达到的终点。</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 推断的返回值类型为 never</span><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Something failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回 never 的函数必须存在无法达到的终点。</span><span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p> <code>object</code> 表示非原始类型，也就是除了 <code>number</code> ， <code>string</code> ， <code>boolean</code> ， <code>symbol</code>， <code>null</code>  或 <code>undefined</code> 之外的类型。</p><p> 使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code> 。例如：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>prop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p> 有时候你会遇到这样的情况，你会比  <code>TypeScript</code> 更了解某个值的详细信息。通常这会发生在你清楚的知道一个实体具有比它有类型更确切的类型。</p><p> 通常类型断言这种方式可以告诉编译器：<code>&#39;相信我，我知道自己在干什么&#39;</code>。类型断言好比其他语言里的类型转换，但是不进行特殊的类型检查和重构。它没有运行时的影响，只是在编译阶段起作用。 <code>TypeScript</code> 会假设你，程序员，已经进行了必须的检查。</p><p> 类型断言有两种形式。其一是 “尖括号” <code>&lt;&gt;</code> 语法：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">'This is a string'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length</code></pre><p> 另一个为 <code>as</code> 语法：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">'This is a string'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</code></pre><p> 两种形式是等价的。至于使用哪个大多数情况下是凭个人喜好。然而，当你在 <code>TypeScript</code> 里使用 <code>JSX</code> 时，只有 <code>as</code> 语法断言是被允许的。</p><h3 id="关于-let"><a href="#关于-let" class="headerlink" title="关于 let"></a>关于 let</h3><p> 你可能已经注意到了，我们使用 <code>let</code> 关键字来替代大家所熟悉的 <code>JavaScript</code> 关键字 <code>var</code> 。 <code>let</code> 关键字是 <code>JavaScript</code> 的一个新概念， <code>TypeScript</code> 实现了它。很多常见的问题都可以通过使用 <code>let</code> 来解决，所以尽可能的使用 <code>let</code> 来替代 <code>var</code> 吧。</p><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">TypeScript 基础类型</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 基础类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo快速搭建个人网站</title>
      <link href="/2019/09/27/xmind-tu-zhi-ying-yong-hexo-da-jian-ge-ren-wang-zhan/"/>
      <url>/2019/09/27/xmind-tu-zhi-ying-yong-hexo-da-jian-ge-ren-wang-zhan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章。<br>在几秒内，即可利用靓丽的主题生成静态网页。<br>应用 XMind 制作的应用 Hexo 快速搭建个人网站流程图。</p></blockquote><p>流程图如下：</p><p><img src="https://raw.githubusercontent.com/libing-cheer/merge-table/master/src/assets/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.png" alt="Hexo快速搭建个人网站流程图"></p><p>点击预览图片不清楚，但是把下载下来就很清晰了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> XMind </category>
          
          <category> 搭建网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table表格合并</title>
      <link href="/2019/09/26/table-biao-ge-he-bing/"/>
      <url>/2019/09/26/table-biao-ge-he-bing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vue+elementUI 中的 Table 表格的合并功能，可配置，使用方便。</p></blockquote><h3 id="1、合并前后效果图"><a href="#1、合并前后效果图" class="headerlink" title="1、合并前后效果图"></a>1、合并前后效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/merge-table/master/src/assets/beforeMerge.png" alt="合并前"><br><img src="https://raw.githubusercontent.com/libing-cheer/merge-table/master/src/assets/afterMerge.png" alt="合并后"></p><h3 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>        <span class="token attr-name">:span-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arraySpanMethod<span class="token punctuation">"</span></span>        <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">30</span>px auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>550<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in tableTitleData<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>          <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.prop<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:min-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.minWidth<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{scope.row[item.prop]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> tableTitleData<span class="token punctuation">,</span> tableData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./js/options'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'mergeTable'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'表格合并'</span><span class="token punctuation">,</span>        tableData<span class="token punctuation">,</span>        tableTitleData      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ====================================== 合并多列单元格逻辑</span>      <span class="token function">arraySpanMethod</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row<span class="token punctuation">,</span> column<span class="token punctuation">,</span> rowIndex<span class="token punctuation">,</span> columnIndex <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 合并单元格</span>        <span class="token comment" spellcheck="true">/**         * desc 该方法会触发n次，n是表格data的length*表头data的length;         * @param  {String} row         [ 当前遍历到的行数据 (后台接口返回的) ]         * @param  {Object} column      [ 当前遍历到的列数据 (elemen表格对象内置的) ]         * @param  {Number} rowIndex    [ 当前遍历到的行下标 ]         * @param  {Number} columnIndex [ 当前遍历到的列下标 ]         * @return {Object} 包含合并的行和列信息         */</span>        <span class="token comment" spellcheck="true">//  ================================================================ 分割线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个数组是带children的表头data展开children后的数组</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tableTitleData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 展开存在children的titleData</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              val<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 只运行一次，获得要合并的信息数组</span>          <span class="token keyword">const</span> keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'areaName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (这个数组要根据不同表格来配置!!!) 一些prop名的集合，这些porp名代表的字段 在每个做过合并的行数据集合里 它的的值 都是唯一的（比如区域、片区、中心名称之类的）。这个集合用于确保合并信息的唯一性，确保表格不会错乱</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMergeTabelArr</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData<span class="token punctuation">,</span>            keywords<span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// console.log('完整的合并表格的信息集合', this.mergeTabelArr);</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// if (columnIndex > 0) { // 除掉序号那一列(这里用于自定义过滤某列)，都要合并</span>        <span class="token keyword">const</span> _rowArr <span class="token operator">=</span> <span class="token punctuation">(</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">.</span>key <span class="token operator">===</span> column<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>connect<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// connect数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_rowArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> _row <span class="token operator">=</span> _rowArr<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            rowspan<span class="token punctuation">:</span> _row<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 0代表删除这列，1代表展示这列，>1代表合并列</span>            colspan<span class="token punctuation">:</span> _row <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 0代表删除这列，1代表展示这列，>1代表合并列</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// }</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">getMergeTabelArr</span><span class="token punctuation">(</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        titleData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        colIndexs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取合并表格的信息集合</span>        <span class="token comment" spellcheck="true">/**         * desc 该方法为最终组合‘合并表格的信息集合’的方法         * @param  {Array}  data                   [ 表格的data ]         * @param  {Array}  titleData              [ 表格的表头的data ]         * @param  {Array}  keywords  ['1','a'...] [ 一些prop名的集合，这些porp名代表的字段 在每个做过合并的行数据集合里 它的的值 都是唯一的（比如区域、片区、中心名称之类的）。这个集合用于确保合并信息的唯一性，确保表格不会错乱 ]         * @param  {Array}  colIndexs [0,1,-2,...] [ 合并规则数组，这个数组里所有的负数值代表不合并的列的下标，正数代表合并的列的下标 ]         * @return {Array} arr  示例:         * [         *   {         *     key: 'nextSite', // 对应列的prop名         *     connect: [2, 0, 2, 0, 1]  // connect数组         *   },         *   ...         * ];         */</span>        <span class="token comment" spellcheck="true">//  ================================================================ 分割线</span>        <span class="token keyword">const</span> columnArr <span class="token operator">=</span> colIndexs<span class="token punctuation">.</span>length          <span class="token operator">?</span> titleData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> index <span class="token operator">=</span> colIndexs<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>realV <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>realV <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> v <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>realV<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i <span class="token operator">===</span> v<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按传递进来的规则过滤</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oldMergeTabel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给this添加oldMergeTabel属性，防止后面报错</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> columnArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectArr</span><span class="token punctuation">(</span>            data<span class="token punctuation">,</span>            v1<span class="token punctuation">.</span>prop<span class="token punctuation">,</span>            keywords<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>oldMergeTabel          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>oldMergeTabel <span class="token operator">=</span> obj<span class="token punctuation">.</span>connect<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存前一条的connect数组信息</span>          <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">getConnectArr</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> keywords<span class="token punctuation">,</span> oldMergeTabel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取connect数组</span>        <span class="token comment" spellcheck="true">/**         * desc 该方法会触发n次，n是过滤后的，要合并的表头data的length;         * @param  {Array}  data          [ 表格的data数据 ]         * @param  {String} key           [ 要合并的表头的prop名 ]         * @param  {Array}  keywords      [ 一些prop名的集合，这些porp名代表的字段 在每个做过合并的行数据集合里 它的的值 都是唯一的（比如区域、片区、中心名称之类的）。这个集合用于确保合并信息的唯一性，确保表格不会错乱 ]         * @param  {Object} oldMergeTabel [ 前一条组合好的connect数组信息,用于确保表格不会错乱 ]         * @return {Object} 包含合并的行和列信息（其实就是 ‘合并表格的信息数组’ 的一个成员，看上面getMergeTabelArr方法的示例）         */</span>        <span class="token comment" spellcheck="true">//  ================================================================ 分割线</span>        <span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存上一个数组</span>        <span class="token keyword">let</span> oldObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 控制只跟上一个元素做对比,不跟整个数组对比</span>        <span class="token comment" spellcheck="true">// 正确的代码</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> newObj<span class="token punctuation">;</span>          <span class="token keyword">let</span> newKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保证唯一性的key</span>          keywords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            newKey <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          newKey <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> oldIndex <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存的数组里是否存在与当前表头数据一样的元素（注意，findIndex找到的是第一个匹配的元素的下标）</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> oldObj<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newObj <span class="token operator">=</span> <span class="token punctuation">{</span>              key<span class="token punctuation">:</span> newKey<span class="token punctuation">,</span>              value<span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            oldArr<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到重复项的第一项，值加1</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newObj <span class="token operator">=</span> <span class="token punctuation">{</span>              key<span class="token punctuation">:</span> newKey<span class="token punctuation">,</span>              value<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          oldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>          oldObj <span class="token operator">=</span> newObj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存当前数据，用作与下一条数据的对比，看是否相同，相同把下一条数据的占用列置成0，这样表格不会错乱</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> connect <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldMergeTabel<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 控制数组合并。如果有重复项也不能跨越过上一条的合并行</span>          oldMergeTabel<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oldVal<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> newVal <span class="token operator">=</span> connect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新值</span>            <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// connect数组各项值的和,</span>            <span class="token keyword">const</span> rule1 <span class="token operator">=</span> newVal <span class="token operator">></span> oldVal <span class="token operator">&amp;&amp;</span> oldVal <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> rule2 <span class="token operator">=</span> newVal <span class="token operator">&lt;</span> oldVal <span class="token operator">&amp;&amp;</span> newVal <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rule1 <span class="token operator">||</span> rule2<span class="token punctuation">)</span> <span class="token punctuation">{</span>              connect<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> oldVal<span class="token punctuation">;</span>              connect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                count <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值后计算connect数组各项值的和</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// connect数组各项值加起来不能超过表格数据data的length,（可能有bug，以后再解决吧，哈哈哈）</span>                connect<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">-</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>          connect<span class="token punctuation">:</span> connect        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 查询数据</span>      <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在工作中，一般是要调接口去查询数据，在查询之前，需要将mergeTabelArr置为空数组，然后在执行之后的操作。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.tableHeader</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="3、options-js-数据来源文件"><a href="#3、options-js-数据来源文件" class="headerlink" title="3、options.js 数据来源文件"></a>3、<code>options.js</code> 数据来源文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 表头配置 */</span><span class="token keyword">const</span> tableTitleData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    minWidth<span class="token punctuation">:</span> <span class="token string">'100'</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token string">'areaName'</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">'片区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    minWidth<span class="token punctuation">:</span> <span class="token string">'100'</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token string">'managementAreaName'</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">'省区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    minWidth<span class="token punctuation">:</span> <span class="token string">'100'</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token string">'centerName'</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">'市区'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'哈尔滨市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'齐齐哈尔市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'鹤岗市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'牡丹江市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'佳木斯市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'绥化市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'长春市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'磐石市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'舒兰市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'青浦区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'徐汇区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'黄浦区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'浦东新区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'松江区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'嘉定区'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> tableTitleData<span class="token punctuation">,</span> tableData <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="4、完整-Table-合并代码-Demo"><a href="#4、完整-Table-合并代码-Demo" class="headerlink" title="4、完整 Table 合并代码 Demo"></a>4、完整 Table 合并代码 Demo</h3><p><a href="https://github.com/libing-cheer/merge-table" target="_blank" rel="noopener">Github Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 表格合并 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 表格合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript前端分页</title>
      <link href="/2019/09/16/qian-duan-fen-ye/"/>
      <url>/2019/09/16/qian-duan-fen-ye/</url>
      
        <content type="html"><![CDATA[<h3 id="1、适合情形"><a href="#1、适合情形" class="headerlink" title="1、适合情形"></a>1、适合情形</h3><p>前端分页一般用于数据量较小的情况，一次请求把数据全部从后端请求回来。</p><h3 id="2、前端分页例子"><a href="#2、前端分页例子" class="headerlink" title="2、前端分页例子"></a>2、前端分页例子</h3><p><a href="https://github.com/libing-cheer/front-end-paging" target="_blank" rel="noopener">前端分页代码示例</a></p><pre class=" language-javascript"><code class="language-javascript">cd front<span class="token operator">-</span>end<span class="token operator">-</span>page                   进入front<span class="token operator">-</span>end<span class="token operator">-</span>page 文件夹下npm install                         安装依赖npm run dev                         运行</code></pre><h3 id="3、实现关键"><a href="#3、实现关键" class="headerlink" title="3、实现关键"></a>3、实现关键</h3><p>使用计算属性对获取的数据进行处理，即<code>computed</code>中<code>frontEndPageChange</code>方法。<code>el-table</code>中的<code>:data</code>绑定<code>frontEndPageChange</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>table  <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">"frontEndPageChange"</span>  stripe  style<span class="token operator">=</span><span class="token string">"width: 1000px;margin:30px auto;"</span>  height<span class="token operator">=</span><span class="token string">"550"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">></span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 计算属性对数据进行处理</span><span class="token function">frontEndPageChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>  <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4、vue-文件完整代码"><a href="#4、vue-文件完整代码" class="headerlink" title="4、vue 文件完整代码"></a>4、<code>vue</code> 文件完整代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>table        <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">"frontEndPageChange"</span>        stripe        style<span class="token operator">=</span><span class="token string">"width: 1000px;margin:30px auto;"</span>        height<span class="token operator">=</span><span class="token string">"550"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          prop<span class="token operator">=</span><span class="token string">"date"</span>          label<span class="token operator">=</span><span class="token string">"日期"</span>          width<span class="token operator">=</span><span class="token string">"100"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          prop<span class="token operator">=</span><span class="token string">"name"</span>          label<span class="token operator">=</span><span class="token string">"姓名"</span>          width<span class="token operator">=</span><span class="token string">"100"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          prop<span class="token operator">=</span><span class="token string">"address"</span>          label<span class="token operator">=</span><span class="token string">"地址"</span>          width<span class="token operator">=</span><span class="token string">"190"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          label<span class="token operator">=</span><span class="token string">"个人信息"</span>          width<span class="token operator">=</span><span class="token string">"180"</span>          align<span class="token operator">=</span><span class="token string">"center"</span>        <span class="token operator">></span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column            prop<span class="token operator">=</span><span class="token string">"age"</span>            label<span class="token operator">=</span><span class="token string">"年龄"</span>            align<span class="token operator">=</span><span class="token string">"center"</span>          <span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column            prop<span class="token operator">=</span><span class="token string">"height"</span>            label<span class="token operator">=</span><span class="token string">"身高"</span>            align<span class="token operator">=</span><span class="token string">"center"</span>          <span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>pagination            @size<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>            @current<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handlePageChange"</span>            <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"z-pagination"</span>            <span class="token punctuation">:</span>current<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"paginationOptions.currentPage"</span>            <span class="token punctuation">:</span>page<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">"paginationOptions.pageSize"</span>            <span class="token punctuation">:</span>page<span class="token operator">-</span>sizes<span class="token operator">=</span><span class="token string">"paginationOptions.pageSizes"</span>            layout<span class="token operator">=</span><span class="token string">"sizes, prev, pager, next, jumper,total"</span>            <span class="token punctuation">:</span>total<span class="token operator">=</span><span class="token string">"tableData.length"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>pagination<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 数据来源</span><span class="token keyword">import</span> <span class="token punctuation">{</span> tableData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./js/options'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'frontEndPage'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'前端分页'</span><span class="token punctuation">,</span>      paginationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        currentPage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前页</span>        pageSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 展示页数</span>        pageSizes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 可选择展示页数 数组</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      tableData<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性对数据进行处理</span>    <span class="token function">frontEndPageChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>      <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 改变分页数量</span>    <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 改变当前页</span>    <span class="token function">handlePageChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="5、options-js-数据来源文件"><a href="#5、options-js-数据来源文件" class="headerlink" title="5、options.js 数据来源文件"></a>5、<code>options.js</code> 数据来源文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 表头配置 */</span><span class="token keyword">const</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1510 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'李小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1511 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'孙小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1512 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'朱小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1513 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'钱小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1514 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'杜小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1515 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'赵小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1516 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'陈小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1510 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'吴小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1511 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'徐小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1512 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'黄小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1513 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">'秦小虎'</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">'上海市普陀区金沙江路 1514 弄'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">'180cm'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> tableData <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端分页 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端分页 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之 async 函数</title>
      <link href="/2019/09/05/es6-zhi-async-han-shu/"/>
      <url>/2019/09/05/es6-zhi-async-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1、含义"><a href="#1、含义" class="headerlink" title="1、含义"></a>1、含义</h3><hr><p>在<code>ES2017</code>标准中引入了<code>async</code>函数，使得一步操作变得更加方便。<br>那么<code>async</code>函数是什么？一句话，它就是<code>Generator</code>函数的语法糖。<br>有一个<code>Generator</code>函数如下，依次读取两个文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码的函数<code>gen</code>可以写成<code>async</code>函数，就是下面 👇 这样。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncReadFile <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>一比较就会发现，<code>async</code>函数就是将<code>Generator</code>函数的（<code>*</code>）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。<code>async</code>函数对<code>Generator</code>函数的改进，体现在以下四点。</p><ul><li>（1）内置执行器<br><code>Generator</code>函数的执行必须依靠执行器，所以才有了<code>co</code>模块，而<code>async</code>函数自带执行器。也就是说，<code>async</code>函数的执行，与普通函数一模一样，只要一行。</li><li>（2）更好的语义<br><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。</li><li>（3）更广的适应性<br><code>co</code>模块约定，<code>yield</code>命令后面只能是<code>Thunk</code>函数或<code>Promise</code>对象，而<code>async</code>函数的<code>await</code>命令后面，可以是<code>Promise</code>对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即<code>resolved</code>的<code>Promise</code>对象）。</li><li>（4）返回之是<code>Promise</code><br><code>async</code>函数的返回值是<code>Promise</code>对象，这比<code>Generator</code>函数的返回值<code>Iterator</code>对象方便多了。你可以用<code>then</code>方法指定下一步的操作。<br>进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个<code>Promise</code>对象，而<code>async</code>命令就是内部<code>then</code>命令的语法糖。</li></ul><hr><h3 id="2、基本用法"><a href="#2、基本用法" class="headerlink" title="2、基本用法"></a>2、基本用法</h3><hr><p>使用<code>async</code>的函数会返回一个<code>Promise</code>对象，可以使用<code>then</code>方法添加回掉函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体后面的语句。<br>下面 👇 是一个例子 🌰。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStockPriceByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStockSymbol</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> stockPrice <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStockPrice</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getStockPriceByName</span><span class="token punctuation">(</span><span class="token string">'good'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码是一个获取股票报价的函数，函数前面的<code>async</code>关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个<code>Promise</code>对象。</p><p>下面 👇 是另一个例子 🌰。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPrint</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncPrint</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码指定<code>50</code>毫秒后，输出<code>hello world</code>。</p><p>由于<code>async</code>函数返回的是<code>Promise</code>对象，可以作为<code>await</code>命令的参数。所以，上面 👆 的例子也可以写成下面的形式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPrint</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncPrint</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用<code>async</code>函数的多种形式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 函数声明</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数表达式</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对象的方法</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Class 的方法</span><span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>catchPromise <span class="token operator">=</span> caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'avatars'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">async</span> <span class="token function">getAvatar</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catchProise<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'/avatars/${name}.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storage<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3、语法"><a href="#3、语法" class="headerlink" title="3、语法"></a>3、语法</h3><p>关于语法，<code>async</code>函数的语法规则总体上比较简单，难点是错误处理机制。</p><hr><h4 id="3-1、返回-Promise-对象"><a href="#3-1、返回-Promise-对象" class="headerlink" title="3.1、返回 Promise 对象"></a>3.1、返回 <code>Promise</code> 对象</h4><p>我们知道，<code>async</code>函数返回一个<code>Promise</code>对象。<br>而且<code>async</code>函数内部<code>return</code>语句返回的值，会成为<code>then</code>方法回调函数的参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello world</span></code></pre><p>上面 👆 代码中，函数<code>f</code>内部<code>return</code>命令返回的值，会被<code>then</code>方法回调函数接收到。<br>命令<code>async</code>函数内部抛出错误，会导致返回的<code>Promise</code>对象变为<code>reject</code>状态。抛出的错误对象会被<code>catch</code>方法回调函数接收到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: 出错了</span></code></pre><hr><h4 id="3-2、Promise-对象的状态变化"><a href="#3-2、Promise-对象的状态变化" class="headerlink" title="3.2、Promise 对象的状态变化"></a>3.2、<code>Promise</code> 对象的状态变化</h4><p>命令<code>async</code>函数返回的<code>Promise</code>对象，必须等到内部所有<code>await</code>命令后面的<code>Promise</code>对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p><p>下面 👇 是一个例子。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTitle</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/&lt;title>([\s\S]+)&lt;\/title>/i</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token string">'http://es6.ruanyifeng.com/#docs/async#%E8%AF%AD%E6%B3%95'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ECMAScript 6入门</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行<code>then</code>方法里面的<code>console.log</code></p><hr><h4 id="3-3、await-命令"><a href="#3-3、await-命令" class="headerlink" title="3.3、await 命令"></a>3.3、<code>await</code> 命令</h4><p>正常情况下，<code>await</code>命令后面是一个<code>Promise</code>对象，返回该对象的结果。如果不是<code>Promise</code>对象，就直接返回对应的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 等同于</span>  <span class="token comment" spellcheck="true">// return 123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，<code>await</code>命令的参数是数值<code>123</code>，这时等同于<code>return 123</code>。<br>另一种情况是，<code>await</code>命令后面是一个<code>thenable</code>对象（即定义<code>then</code>方法的对象），那么<code>await</code>会将其等同于<code>Promise</code>对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Sleep</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> sleepTime <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1000</span></code></pre><p>上面 👆 代码中，<code>await</code>命令后面是一个<code>Sleep</code>对象的实例。这个实例不是<code>Promise</code>对象，因为定义了<code>then</code>方法，<code>await</code>会将其视为<code>Promise</code>对象处理。<br>这个例子还演示了如何实现休眠效果。<code>Javascript</code>一直没有休眠的语法，但是借助<code>await</code>命令就可以让程序停顿指定的时间。下面给出了一个简化的<code>sleep</code>实现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 2 3 4 5</span></code></pre><p><code>await</code>命令后的<code>Promise</code>对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 出错了</span></code></pre><p>注意，上面 👆 代码中，<code>await</code>语句前面没有<code>return</code>，但是<code>reject</code>方法的参数依然传入了<code>catch</code>方法的回调函数。这里如果在<code>await</code>命令前面加上<code>return</code>，效果是一样的。</p><p>任何一个<code>await</code>语句后面的<code>Promise</code>对象变为<code>reject</code>状态，那么整个<code>async</code>函数都会中断执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会执行</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码中，第二个<code>await</code>语句是不会执行的，因为第一个<code>await</code>语句状态变成了<code>reject</code>。<br>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个<code>await</code>放在<code>try...catch</code>结构里面，这样不管这个异步操作是否成功，第二个异步操作都会执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hello world</span></code></pre><p>另一种方法是<code>await</code>后面的<code>Promise</code>对象再跟一个<code>catch</code>方法，处理前面可能出现的错误。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 出错了</span><span class="token comment" spellcheck="true">// hello world</span></code></pre><hr><h4 id="3-4、错误处理"><a href="#3-4、错误处理" class="headerlink" title="3.4、错误处理"></a>3.4、错误处理</h4><p>如果<code>await</code>后面的异步操作出错，那么等同于<code>async</code>函数返回的<code>Promise</code>对象被<code>reject</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: 出错了</span></code></pre><p>上面 👆 代码中，<code>async</code>函数<code>f</code>执行后，<code>await</code>后面的<code>Promise</code>对象会抛出一个错误对象，导致<code>catch</code>方法的回调函数被调用，它的参数就是抛出的错误对象。具体的执行机制，可以参考后文的<code>async 函数的实现原理</code>。</p><p>防止出错的方法，也是将其放在<code>try...catch</code>代码块之中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果有多个<code>await</code>命令，可以统一放在<code>try...catch</code>结构中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> val2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">secondStep</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> val3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">thirdStep</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Final：'</span> <span class="token operator">+</span> val3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面 👇 的例子 🌰 使用<code>try...catch</code>结构，实现多次重复尝试。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> superagent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'superagent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> NUM_RETRIES <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_RETRIES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> superagent<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://google.com/this-throws-an-error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，如果<code>await</code>操作成功，就会使用<code>break</code>语句跳出循环 ♻️；如果失败，会被<code>catch</code>语句捕捉，然后进入下一轮循环 ♻️。</p><hr><h4 id="3-5、使用注意点"><a href="#3-5、使用注意点" class="headerlink" title="3.5、使用注意点"></a>3.5、使用注意点</h4><p>第一点，前面已经说过，<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>rejected</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">somethingThatReturnsAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 另一种写法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">somethingThatReturnsAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二点，多个<code>await</code>命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，<code>getFoo</code>和<code>getBar</code>是两个独立的异步操作（相互不依赖），被写成继发关系。这样比较耗时，因为只有<code>getFoo</code>完成之后，才会执行<code>getBar</code>，完全可以让它们同时触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">let</span> fooPromise <span class="token operator">=</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> barPromise <span class="token operator">=</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> fooPromise<span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> barPromise<span class="token punctuation">;</span></code></pre><p>上面 👆 两种写法，<code>getFoo</code>和<code>getBar</code>都是同时触发，这样就会缩短程序的执行时间。</p><p>第三点，<code>await</code>命令只能用在<code>async</code>函数之中，如果用在普通函数，就会报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  docs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Uncaught SyntaxError: await is only valid in async function</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码会报错，因为<code>await</code>语句用在普通函数之中了。但是，如果将<code>forEach</code>方法的参数改成<code>async</code>函数，也有问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里不需要 async</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 可能得到错误结果</span>  docs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码可能不会正常工作，原因是这时三个<code>db.post</code>操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用<code>for</code>循环。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFunc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> doc <span class="token keyword">of</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果确实希望多个请求并发执行，可以使用<code>Promise.all</code>方法。当三个请求都会<code>resolved</code>时，下面两种写法效果相同。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> docs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者使用下面的写法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> peomises <span class="token operator">=</span> docs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-6、async-函数可以保留堆栈"><a href="#3-6、async-函数可以保留堆栈" class="headerlink" title="3.6、async 函数可以保留堆栈"></a>3.6、<code>async</code> 函数可以保留堆栈</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，函数<code>a</code>内部运行了一个异步任务<code>b()</code>。当<code>b()</code>运行的时候，函数<code>a</code>不会中断，而是继续执行。等到<code>b()</code>运行结束，可能<code>a()</code>早就运行结束了，<code>b</code>所在的上下文环境已经消失了。如果<code>b()</code>或<code>c()</code>报错，错误堆栈将不包括<code>a()</code>。</p><p>现在将这个例子 🌰 改成<code>await</code>函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面 👆 的代码中，<code>b()</code>运行的时候，<code>a()</code>是暂停执行，上下文环境都保存着。一旦<code>b()</code>或<code>c()</code>报错，错误堆栈将包括<code>a()</code>。</p><h3 id="4、async-函数的实现原理"><a href="#4、async-函数的实现原理" class="headerlink" title="4、async 函数的实现原理"></a>4、<code>async</code> 函数的实现原理</h3><p><code>async</code>函数的实现原理，就是将<code>Generator</code>函数和自动执行器，包装在一个函数里。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所有的<code>async</code>函数都可以写成上面的第二种形式，其中的<code>spawn</code>函数就是自动执行器。<br>下面给出<code>spawn</code>函数的实现，基本就是前文自动执行器的翻版。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">spawn</span><span class="token punctuation">(</span>genF<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">genF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span>nextF<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> next<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> <span class="token function">nextF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="5、与其他异步处理方法的比较"><a href="#5、与其他异步处理方法的比较" class="headerlink" title="5、与其他异步处理方法的比较"></a>5、与其他异步处理方法的比较</h3><p>我们通过一个例子，来看<code>async</code>函数与<code>Generator</code>与<code>Promise</code>函数的比较。<br>假定某个<code>DOM</code>元素上面，部署了一系列的动画，前一个动画结束，才能开始下一个。如果当中有一个动画出错，返回上一个成功执行的动画的返回值。</p><p>首先是<code>Promise</code>的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chainAnimationsPromise</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 变量 ret 用来保存上一个动画的返回值</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 新建一个空的 Promise</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 then 方法添加所有动画</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ret <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回一个部署了错误机制的 Promise</span>  <span class="token keyword">return</span> p    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*忽略错误，继续执行*/</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然<code>Promise</code>的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是<code>Promise</code>的<code>API</code>（<code>then</code>、<code>catch</code>等等），操作本身的语义反而不容易看出来。</p><p>接着是<code>Generator</code>函数的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chainAnimationsGenerator</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*忽略错误，继续执行*/</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码使用<code>Generator</code>函数遍历了每个动画，语义比<code>Promise</code>写法更清晰，用户定义的操作全部都出现在<code>spawn</code>函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行<code>Generator</code>函数，上面的代码<code>spawn</code>就是自动执行器，它返回一个<code>Promise</code>对象，而且必须保证<code>yield</code>语句后面的表达式，必须返回一个<code>Promise</code>。</p><p>最后是<code>async</code>函数的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">chainAnimationsAsync</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*忽略错误，继续执行*/</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，<code>async</code></p><hr><p>本文参考来源 <a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">阮一峰博客 async</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之 let 和 const 命令</title>
      <link href="/2019/08/30/es6-zhi-let-he-const/"/>
      <url>/2019/08/30/es6-zhi-let-he-const/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-之-let-和-const-命令"><a href="#ES6-之-let-和-const-命令" class="headerlink" title="ES6 之 let 和 const 命令"></a>ES6 之 let 和 const 命令</h2><hr><h3 id="1、let-命令"><a href="#1、let-命令" class="headerlink" title="1、let 命令"></a>1、let 命令</h3><hr><h4 id="1-1、基本用法"><a href="#1-1、基本用法" class="headerlink" title="1.1、基本用法"></a>1.1、基本用法</h4><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: a is not defined</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块内生效。</p><p>用<code>for</code>循环的计数器，就很适合使用<code></code>let`命令。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span></code></pre><p>上面 👆 代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><p>下面 👇 的代码如果使用<code>var</code>，最后输出的是<code>10</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p>上面 👆 代码中，变量<code>i</code>是<code>var</code>声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的里面成员的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是<code>10</code>。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是<code>6</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><p>上面 👆 代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环内有效，所以每一次循环的<code>i</code>其实都是一个新的变量所以左后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为<code>Javascript</code>引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p><p>另外，<code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// abc</span></code></pre><p>上面 👆 代码正确运行，输出了<code>3</code>次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><hr><h4 id="1-2、不存在变量提升"><a href="#1-2、不存在变量提升" class="headerlink" title="1.2、不存在变量提升"></a>1.2、不存在变量提升</h4><p>使用<code>var</code>命令会发生<code>变量提升</code>现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇葩的，按照一般的逻辑，变量应该在语句声明之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变的了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使用 var 的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 let 的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: bar is not defined</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，变量<code>foo</code>用<code>var</code>声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>声明，不会发生变量提升。这表明在声明它之前变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><hr><h4 id="1-3、暂时性死区"><a href="#1-3、暂时性死区" class="headerlink" title="1.3、暂时性死区"></a>1.3、暂时性死区</h4><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就绑定（binding）这个区域，不再受外部的影响。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  temp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: Cannot access 'tmp' before initialization</span>  <span class="token keyword">let</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码中，存在全局变量<code>temp</code>，但是块级作用域内<code>let</code>又声明了一个变量<code>temp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>temp</code>赋值会报错。</p><p><code>ES6</code>明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。总之，在代码块内，使用<code>let</code>命令声明变量之前，改变量都是不可用的。这在语法上，成为”暂时性死区”（temporal dead zone，简称 TDZ）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TDZ 开始</span>  temp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TDZ 结束</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  temp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码中，在<code>let</code>命令声明变量<code>temp</code>之前，都属于变量<code>temp</code>的”死区”。<br>“暂时性死区”意味着<code>typeof</code>不再是一个百分之百安全的操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span class="token keyword">let</span> x<span class="token punctuation">;</span></code></pre><p>声明代码中，变量<code>x</code>使用<code>let</code>命令声明，所以在声明之前，都属于<code>x</code>的死区，只要用到改变量就会报错。因此<code>typeof</code>就会抛出一个<code>ReferenceError</code>。</p><p>作为比较，如果一个变量根本没有被声明，使用<code>typeof</code>反而不会报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> undeclared_variable<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面 👆 代码中，<code>undeclared_variable</code>是一个不存在的变量名，结果返回”<code>undefined</code>“。所以，在没有<code>let</code>之前，<code>typeof</code>运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p><p>有些”死区”比较隐蔽，不太容易发现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: Cannot access 'y' before initialization</span></code></pre><p>另外，下面 👇 的代码也会报错，与<code>var</code>的行为不同。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">var</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错 ReferenceError：x is not defined</span><span class="token keyword">let</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span></code></pre><p>上面 👆 代码报错，是因为存在暂时性死区。使用<code>let</code>声明变量时，只要变量还没有在声明完成前使用，就会报错。上面这行就属于这个情况，在变量<code>x</code>的声明语句还没有执行完成之前，就去取<code>x</code>的值，导致报错”<code>x 未定义</code>“。</p><p>在<code>ES6</code>中，规定暂时性死区和<code>let</code>、<code>const</code>语句不出现变量提升，主要是为了减少运行时错误，防止变量在声明前就使用这个变量，从而导致意料之外的行为。这样的错误在<code>ES5</code>是很常见的，现在有了这种规定，避免此类错误就很容易了。</p><p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用改变量。</p><hr><h4 id="1-4、不允许重复声明"><a href="#1-4、不允许重复声明" class="headerlink" title="1.4、不允许重复声明"></a>1.4、不允许重复声明</h4><p>命令<code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError: Identifier 'a' has already been declared</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError: Identifier 'a' has already been declared</span><span class="token punctuation">}</span></code></pre><p>因此，不能再函数内部重新声明参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError：Identifier 'arg' has already been declared</span><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token keyword">let</span> arg<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="2、块级作用域"><a href="#2、块级作用域" class="headerlink" title="2、块级作用域"></a>2、块级作用域</h3><hr><h4 id="2-1、为什么需要块级作用域"><a href="#2-1、为什么需要块级作用域" class="headerlink" title="2.1、为什么需要块级作用域"></a>2.1、为什么需要块级作用域</h4><p>在<code>ES5</code>中，只有全局作用域和函数作用域，没有块级作用域，这会带来很多不合理的场景。<br>第一种场景，内层变量可能会覆盖外部变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面 👆 代码的原意是，<code>if</code>代码块的外部使用的是外层<code>temp</code>变量，内部使用的是内层的<code>temp</code>变量。但是，函数<code>f()</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>temp</code>变量覆盖了外层的<code>temp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// h e l l o</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><p>上面 👆 代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄漏成了全局变量。</p><hr><h4 id="2-2、ES6-的块级作用域"><a href="#2-2、ES6-的块级作用域" class="headerlink" title="2.2、ES6 的块级作用域"></a>2.2、ES6 的块级作用域</h4><p>命令<code>let</code>实际上为 JavaScript 新增了块级作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token punctuation">}</span></code></pre><p>上面 👆 的的函数有两个代码块，都声明了变量<code>n</code>，运行后输出<code>5</code>。这表示外层代码块不受内层代码块的影响。如果两次都使用<code>var</code>定义变量<code>n</code>，最后输出的值才是<code>10</code>。</p><p>在<code>ES6</code>中，允许块级作用域的任意嵌套。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token punctuation">{</span>          <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>insane<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: insane is not defined</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面 👆 的代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</p><p>内层作用域可以定义外层作用域的同名变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>          <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>块级作用域的出现，实际上使得广泛使用的匿名立即执行函数表达式（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">匿名 IIFE</a>）不再必要了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// IIFE 写法</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Barry'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: name2 is not defined</span><span class="token comment" spellcheck="true">// 块级作用域写法</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Barry'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: name2 is not defined</span></code></pre><hr><h4 id="2-3、块级作用域与函数声明"><a href="#2-3、块级作用域与函数声明" class="headerlink" title="2.3、块级作用域与函数声明"></a>2.3、块级作用域与函数声明</h4><p>函数能不能在函数作用域之中声明？这是一个相当令人混淆的问题。<br>在<code>ES5</code>中规定，函数只能在顶层作用域好函数作用域中声明，不能在块级作用域中声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 情况一</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 情况二</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 两种情况声明，根据<code>ES5</code>的规定都是非法的。</p><p>但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域中声明函数，因此上面两种情况实际都能运行，不会报错。</p><p>在<code>ES6</code>中引入块级作用域，明确允许在块级作用域中声明函数。<code>ES6</code>规定，块级作用域之中，函数声明语句的行为类似于<code>let</code>，在块级作用域之外不可引用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数 f()</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码在<code>ES5</code>中运行，会得到”I am inside”，因为在<code>if</code>内声明函数<code>f</code>会被提升到函数头部，实际运行的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5 环境</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数 f()</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但在<code>ES6</code>中就完全不一样了，理论上会得到”I am outside”。因为块级作用域内声明的函数类似于<code>let</code>，对作用域之外没有影响。但是，如果你真的在<code>ES6</code>浏览器中运行一下上面 👆 的代码，是会报错的这是为什么呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 浏览器的 ES6 环境</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数 f()</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught TypeError: f is not a function</span></code></pre><p>上面 👆 的代码在浏览器中，都会报错。</p><p>原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大的影响。为了减轻因此产生的不兼容问题，<code>ES6</code>在<a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics" target="_blank" rel="noopener">附录 B</a>里面规定，浏览器的实现可以不遵守上面的规定，有自己的<a href="https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6" target="_blank" rel="noopener">行为方式</a>。</p><ul><li>允许在块级作用域内声明函数。</li><li>函数声明类似于<code>var</code>，即会提升到全局作用域或函数作用域的头部。</li><li>同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><p>注意 ⚠️：上面三条规则只对<code>ES6</code>的浏览器实现有效，其他环境的实现不遵守，还是将块级作用域的函数声明当作<code>let</code>处理。</p><p>根据这三条规则，浏览器的<code>ES6</code>环境中，块级作用域内声明的函数，行为类似于<code>var</code>声明的变量。上面的例子实际允许的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 浏览器的 ES6 环境</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> f <span class="token operator">=</span> undefined<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught TypeError: f is not a function</span></code></pre><p>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 块级作用域内部的函数声明语句，建议不要使用。</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 块级作用域内部，优先使用函数表达式。</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">;</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>另外，还有一个需要注意的地方。<code>ES6</code>的块级作用域必须有大括号，如果没有大括号，<code>JavaScript</code>引擎就认为不存在块级作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一种写法 报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught SyntaxError: Lexical declaration cannot appear in a single-statement context</span><span class="token comment" spellcheck="true">// 第二种写法 不报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>上面 👆 代码中，第一种写法没有大括号，所以不存在块级作用域，而<code>let</code>只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。</p><p>函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不报错</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: In strict mode code, functions can only be declared at top level or inside a block</span></code></pre><hr><h3 id="3、const-命令"><a href="#3、const-命令" class="headerlink" title="3、const 命令"></a>3、const 命令</h3><hr><h4 id="3-1、基本用法"><a href="#3-1、基本用法" class="headerlink" title="3.1、基本用法"></a>3.1、基本用法</h4><p>命令<code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415</span>PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Assignment to constant variable</span></code></pre><p>上面 👆 的代码表明，改变常量的值会报错。</p><p>命令<code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SyntaxError: Missing initializer in const declaration</span></code></pre><p>上面 👆 代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p>命令<code>const</code>的作用域与<code>let</code>相同：只在声明所在的块级作用域内有效。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MAX<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: MAX is not defined</span></code></pre><p>命令<code>const</code>声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Uncaught ReferenceError: Cannot access 'MAX' before initialization</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码在常量<code>MAX</code>声明之前就调用，结果报错。</p><p>命令<code>const</code>声明的变量，也与<code>let</code>一样不可重复声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下两行都会报错</span><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'Goodbye'</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SyntaxError: Identifier 'message' has already been declared</span><span class="token comment" spellcheck="true">// SyntaxError: Identifier 'age' has already been declared</span></code></pre><hr><h4 id="3-2、本质"><a href="#3-2、本质" class="headerlink" title="3.2、本质"></a>3.2、本质</h4><p>命令<code>const</code>实际上保证的，并不是变量的只不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单的数据类型（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向一个固定的地址），至于它指向的数据机构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为 foo 添加一个属性，可以成功</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 foo 指向另一个对象，就会报错</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Assignment to constant variable</span></code></pre><p>上面 👆 代码中，常量<code>foo</code>储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把<code>foo</code>指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><p>下面 👇 是另一个例子 🌰。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错 TypeError</span></code></pre><p>如果真的想将对象冻结，应该使用<code>Object.freeze</code>方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 常规模式时，下面一行不起作用</span><span class="token comment" spellcheck="true">// 严格模式时，改行会报错</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，常量<code>foo</code>指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错<code>TypeError</code>。</p><p>除了将对象本身冻结，对象的属性也应该冻结。下面 👇 是一个将对象彻底冻结的函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> constantize <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">constanize</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="3-3、声明变量的六种方法"><a href="#3-3、声明变量的六种方法" class="headerlink" title="3.3、声明变量的六种方法"></a>3.3、声明变量的六种方法</h4><p>在<code>ES5</code>中只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。在<code>ES6</code>中，除了添加<code>let</code>命令和<code>const</code>命令外，还有<code>import</code>命令和<code>class</code>命令。所以<code>ES6</code>中一共有 6 中声明变量的方法。</p><hr><h3 id="4、顶层对象的属性"><a href="#4、顶层对象的属性" class="headerlink" title="4、顶层对象的属性"></a>4、顶层对象的属性</h3><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在<code>Node</code>指的是<code>global</code>对象。<code>ES5</code>之中，顶层对象的属性与全局变量是等价的。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>上面 👆 代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p><p>顶层对象的属性与全局属性挂钩，被认为是<code>JavaScript</code>语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在未编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能时顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉的就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，<code>window</code>对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</p><p>命令<code>ES6</code>为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从<code>ES6</code>开始，全局变量将逐渐与顶层对象脱钩。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果在 Node 的 REPL 环境，可以写成 global.a</span><span class="token comment" spellcheck="true">// 或者写成通用方法，写成 this.a</span>window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面 👆 代码中，全部变量<code>a</code>由<code>var</code>命令声明，所以它是顶层对象的属性。全局变量<code>b</code>由<code>let</code>命令声明，所以它不是顶层对象的属性，所以返回<code>undefined</code>。</p><hr><h3 id="5、globalThis-对象"><a href="#5、globalThis-对象" class="headerlink" title="5、globalThis 对象"></a>5、globalThis 对象</h3><hr><p>我们知道，<code>JavaScript</code>语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</p><ul><li>浏览器里面，顶层对象是<code>window</code>，但<code>Node</code>与<code>Web Worker</code>没有<code>window</code>。</li><li>浏览器和<code>Web Worker</code>里面，<code>self</code>也指向顶层对象，但是<code>Node</code>没有<code>self</code>。</li><li>在<code>Node</code>里面，顶层对象是<code>global</code>，但其他环境都不支持。</li></ul><p>同一段代码为了为了能够在各种环境都能取到顶层对象，一般都是使用<code>this</code>变量，但是有局限性。</p><ul><li>全局环境中，<code>this</code>会返回顶层对象。但是<code>Node</code>模块和<code>ES6</code>模块中，<code>this</code>返回的是当前模块。</li><li>函数里面的<code>this</code>，如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code>this</code>会指向顶层对象。但是，严格模式下，这时<code>this</code>会返回<code>undefined</code>。</li><li>不管是严格模式，还是普通模式，<code>new Function(&#39;return this&#39;)()</code>总是会返回全局对象。但是，如果浏览器用了<code>CSP</code>（<code>Content Security Policy</code>，内容安全策略），那么，<code>eval</code>、<code>new Function</code>这些方法都可能无法使用。</li></ul><p>综上所述，很难找到一周可以在所有情况下，都取到顶层对象。下面 👇 是两种勉强可以使用的方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span>  <span class="token operator">?</span> window  <span class="token punctuation">:</span> <span class="token keyword">typeof</span> process <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> global <span class="token operator">===</span> <span class="token string">'object'</span>  <span class="token operator">?</span> global  <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">var</span> getGlobal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> self<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> window<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> global<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unable locate global object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现有一个<a href="https://github.com/tc39/proposal-global" target="_blank" rel="noopener">提案</a>，在语言标准的层面，引入<code>globalThis</code>作为顶层对象。也就是说，任何环境下，<code>globalThis</code>都是存在的，都可以从它拿到顶层对象，指向全局环境下的<code>this</code>。</p><p>垫片库<code>global-this</code>模拟了这个提案，可以在所有环境拿到<code>globalThis</code>。</p><hr><p>本文参考来源 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">阮一峰博客 let&amp;&amp;const</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue国际化   vue-i18n</title>
      <link href="/2019/07/11/vue-guo-ji-hua-vue-i18n-de-shi-yong/"/>
      <url>/2019/07/11/vue-guo-ji-hua-vue-i18n-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h3><p><a href="https://github.com/libing-cheer/vue-international-i18n" target="_blank" rel="noopener">demo 代码示例</a></p><p>代码下载后运行以下命令，即可跑起来看到效果。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run serve</code></pre><h3 id="二、目录结构"><a href="#二、目录结构" class="headerlink" title="二、目录结构"></a>二、目录结构</h3><ul><li>📁src @根<ul><li>📁assets 静态资源目录<ul><li>📁common 字体库</li><li>📄cn.js 中文字体库</li><li>📄en.js 英文字体库</li><li>📄fa.js 法语字体库</li><li>📄ft.js 中文繁体字体库</li><li>img</li><li>cn.png 中文预览效果图</li><li>en.png 英文预览效果图</li><li>fa.png 法语预览效果图</li><li>ft.png 中文繁体预览效果图</li></ul></li><li>📁components 组件<ul><li>📄vue-international-i18n.vue 展示切换语言组件</li></ul></li><li>📄App.vue 入口模版</li><li>📄main.js 入口主函数</li></ul></li></ul><h3 id="三、vue-i18n-的使用"><a href="#三、vue-i18n-的使用" class="headerlink" title="三、vue-i18n 的使用"></a>三、vue-i18n 的使用</h3><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-i18n</code></pre><p>也可以这样</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue-i18n/dist/vue-i18n.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="2、入口文件-main-js-配置"><a href="#2、入口文件-main-js-配置" class="headerlink" title="2、入口文件 main.js 配置"></a>2、入口文件 main.js 配置</h4><p>在 入口文件 <code>main.js</code> 中引用, <code>demo</code> 用了 <code>elementUI</code> 的组件，所以在这里全局引用了 <code>element-ui</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueI18n <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*---------挂载全局使用-----------*/</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueI18n<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*---------基本使用-----------*/</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">/*---------使用语言包-----------*/</span><span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  locale<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 语言标识</span>  messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'zh-CN'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/cn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 中文语言包</span>    <span class="token string">'zh-EN'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/en'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 英文语言包</span>    <span class="token string">'zh-FA'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/fa'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 法语语言包</span>    <span class="token string">'zh-FT'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/ft'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 繁体字语言包</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  i18n<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里不要忘记哦！</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3、语言包示例"><a href="#3、语言包示例" class="headerlink" title="3、语言包示例"></a>3、语言包示例</h4><p>语言包是自己定义的 <code>js</code> 文件，以中文 <code>cn.js</code> 和 英文 <code>en.js</code> 为例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  cn.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">{</span>    music<span class="token punctuation">:</span> <span class="token string">'网易云音乐'</span><span class="token punctuation">,</span>    findMusic<span class="token punctuation">:</span> <span class="token string">'发现音乐'</span><span class="token punctuation">,</span>    myMusic<span class="token punctuation">:</span> <span class="token string">'我的音乐'</span><span class="token punctuation">,</span>    friend<span class="token punctuation">:</span> <span class="token string">'朋友'</span><span class="token punctuation">,</span>    musician<span class="token punctuation">:</span> <span class="token string">'音乐人'</span><span class="token punctuation">,</span>    download<span class="token punctuation">:</span> <span class="token string">'下载客户端'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  en.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">{</span>    music<span class="token punctuation">:</span> <span class="token string">'Music'</span><span class="token punctuation">,</span>    findMusic<span class="token punctuation">:</span> <span class="token string">'FIND MUSIC'</span><span class="token punctuation">,</span>    myMusic<span class="token punctuation">:</span> <span class="token string">'MY MUSIC'</span><span class="token punctuation">,</span>    friend<span class="token punctuation">:</span> <span class="token string">'FRIEND'</span><span class="token punctuation">,</span>    musician<span class="token punctuation">:</span> <span class="token string">'MUSICIAN'</span><span class="token punctuation">,</span>    download<span class="token punctuation">:</span> <span class="token string">'DOWNLOAD'</span><span class="token punctuation">}</span></code></pre><h4 id="4、vue-international-i18n-vue-文件"><a href="#4、vue-international-i18n-vue-文件" class="headerlink" title="4、vue-international-i18n.vue 文件"></a>4、vue-international-i18n.vue 文件</h4><p><code>changeLangEvent</code> 事件实现语言切换；重点在于”关键语句”：<code>this.\$i18n.locale</code>：<br>当赋值为”<code>zh-CN</code>“时，导航栏就变成中文；<br>当赋值为 “<code>zh-EN</code>“时，导航栏就变成英文；<br>当赋值为”<code>zh-FA</code>“时，导航栏就变成法语；<br>当赋值为”<code>zh-FT</code>“时，导航栏就变成中文繁体。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>international<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 切换语言 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择<span class="token punctuation">"</span></span>        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeLangEvent(value)<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in options<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- tabs标签页 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tabs</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activeName<span class="token punctuation">"</span></span> <span class="token attr-name">@tab-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.music<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.music')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.findMusic<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.findMusic')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.myMusic<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.myMusic')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.friend<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fourth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.friend')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.musician<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fivth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.musician')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.download<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sixth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.download')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tabs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'vueInternationalI18n'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>        lang<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>        activeName<span class="token punctuation">:</span> <span class="token string">'first'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'中文'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-EN'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'英文'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-FA'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'法语'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-FT'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'繁体'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 切换语言</span>      <span class="token function">changeLangEvent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'zh-CN'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'zh-EN'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'zh-FA'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'zh-FT'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.international</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">75</span>vw<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.language</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">12.5</span>vw<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">20000000</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.tabs</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="四、vue-i18n-数据渲染的模板语法"><a href="#四、vue-i18n-数据渲染的模板语法" class="headerlink" title="四、vue-i18n 数据渲染的模板语法"></a>四、vue-i18n 数据渲染的模板语法</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- v-text 形式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>m.music<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- {{}} 形式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{$t('m.music')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="五、效果预览"><a href="#五、效果预览" class="headerlink" title="五、效果预览"></a>五、效果预览</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/cn.png" alt="中文"><br><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/en.png" alt="英文"><br><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/fa.png" alt="法语"><br><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/ft.png" alt="中文繁体"></p><h3 id="6、vue-i18n-了解更多"><a href="#6、vue-i18n-了解更多" class="headerlink" title="6、vue-i18n 了解更多"></a>6、vue-i18n 了解更多</h3><p>若想了解更多关于 <code>vue-i18n</code> 的使用，请前往 <a href="https://kazupon.github.io/vue-i18n/zh/introduction.html" target="_blank" rel="noopener">vue-i18n 官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国际化 </tag>
            
            <tag> Vue </tag>
            
            <tag> vue-i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI中table表格自定义表头Tooltip文字提示</title>
      <link href="/2019/07/03/elementui-zhong-table-biao-ge-zi-ding-yi-biao-tou-tooltip-wen-zi-ti-shi/"/>
      <url>/2019/07/03/elementui-zhong-table-biao-ge-zi-ding-yi-biao-tou-tooltip-wen-zi-ti-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="table-header-tips"><a href="#table-header-tips" class="headerlink" title="table-header-tips"></a>table-header-tips</h2><p>应用 <code>element</code> 中的 <code>table</code> 组件，自定义表头 <code>Tooltip</code> 文字提示。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/table-header-tips/master/src/assets/tooltip.png" alt="效果图"></p><h3 id="示例-demo-代码"><a href="#示例-demo-代码" class="headerlink" title="示例 demo 代码"></a>示例 demo 代码</h3><p><a href="https://github.com/libing-cheer/table-header-tips" target="_blank" rel="noopener">请点这里</a></p><h3 id="引用-element-ui"><a href="#引用-element-ui" class="headerlink" title="引用 element-ui"></a>引用 element-ui</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> element-ui</code></pre><p>在 <code>main.js</code> 中引入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="增加全局组件-promptMessages-并在全局引用"><a href="#增加全局组件-promptMessages-并在全局引用" class="headerlink" title="增加全局组件 promptMessages 并在全局引用"></a>增加全局组件 promptMessages 并在全局引用</h3><p>在 <code>src -&gt; modules -&gt; components -&gt; messages</code> 中增加 <code>promptMessages</code> 组件及 <code>index.js</code> 文件</p><p><code>promptMessages</code> 组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span> <span class="token attr-name">effect</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dark<span class="token punctuation">"</span></span> <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 插槽，可提供多行的提示信息 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 全局组件，这里是配置图标icon和提示信息的地方 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 在其他组件中引用方式详见 table-header-tips.vue 组件中的 renderHeaderMethods 方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in messages<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-info<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#409eff</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'promptMessages'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><code>index.js</code> 文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> promptMessages <span class="token keyword">from</span> <span class="token string">'./promptMessages.vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* istanbul ignore next */</span>promptMessages<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>promptMessages<span class="token punctuation">.</span>name<span class="token punctuation">,</span> promptMessages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> promptMessages<span class="token punctuation">;</span></code></pre><p>在 <code>utils</code> 文件夹 📁 下，新增 <code>components.js</code> 用于 引入全局组件<br><code>components.js</code> 文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Created by Administrator on 2019/07/03 0030. * 所有自定义全局组件在此引入 */</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> promptMessages <span class="token keyword">from</span> <span class="token string">'@/modules/components/messages'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>promptMessages<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表头提示自定义提示信息组件</span></code></pre><p>最后在 <code>main.js</code> 中引入 <code>components.js</code> 文件即可全局使用 <code>promptMessages</code> 组件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'@/utils/components.js'</span><span class="token punctuation">;</span> // 自定义组件 js</code></pre><h3 id="table-header-tips-组件-自定义表头方法-renderHeaderMethods"><a href="#table-header-tips-组件-自定义表头方法-renderHeaderMethods" class="headerlink" title="table-header-tips 组件 自定义表头方法 renderHeaderMethods"></a>table-header-tips 组件 自定义表头方法 renderHeaderMethods</h3><p>应用了 <code>element table</code> 组件的 <code>render-header</code>（列标题 <code>Label</code> 区域渲染使用的 <code>Function</code>）。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table-header-tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">stripe</span> <span class="token attr-name">border</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">:render-header</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderHeaderMethods<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'tableHeaderTips'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'SlideShare Inc., 490 2nd St, Suite 300, San Francisco, CA 94107'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'李小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'Room 201,No.34,Lane 125,XiKang Road(South),HongKou District'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'赵小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'Room 702, 7th Building, Hengda Garden, East District, Zhongshan'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'黑小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'Room 403,No.37,ShiFan Residential Quarter,BaoShan District'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 自定义表格</span>      <span class="token comment" spellcheck="true">// 例如：给表头 地址 加一个 icon，鼠标移入icon展示提示信息</span>      <span class="token function">renderHeaderMethods</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">{</span> column <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>          <span class="token string">'div'</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            style<span class="token punctuation">:</span> <span class="token string">'display:flex;margin:auto;'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> column<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'promptMessages'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 引用 promptMessages 全局组件</span>              props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// messages 里面配置的信息即为 Tooltip 提示信息</span>                messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'地址提示信息，以下地址有中国🇨🇳和澳洲🇦🇺请仔细查看。'</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.table-header-tips</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
            <tag> 自定义表头 </tag>
            
            <tag> Tooltip文字提示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue视频播放器</title>
      <link href="/2019/06/12/vue-shi-pin-bo-fang-qi/"/>
      <url>/2019/06/12/vue-shi-pin-bo-fang-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-Video-Player"><a href="#Vue-Video-Player" class="headerlink" title="Vue-Video-Player"></a>Vue-Video-Player</h3><p>适用于 <code>Vue</code> 的 <code>video.js</code> 播放器组件。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://github.com/libing-cheer/video-player" target="_blank" rel="noopener">demo 代码示例</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/video.js/dist/video-js.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/video.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/dist/vue-video-player.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>VueVideoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-video-player --save</code></pre><h3 id="全局引用样式文件"><a href="#全局引用样式文件" class="headerlink" title="全局引用样式文件"></a>全局引用样式文件</h3><p>在 main.js 中引用 vue-video-player 样式文件以及自定义的样式文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'video.js/dist/video-js.css'</span><span class="token function">import</span> <span class="token string">'vue-video-player/src/custom-theme.css'</span><span class="token function">import</span> <span class="token string">'@/../static/theme.css'</span>                // 自定义样式文件 播放button按钮</code></pre><h3 id="组件中使用"><a href="#组件中使用" class="headerlink" title="组件中使用"></a>组件中使用</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video-player</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video-player vjs-custom-skin<span class="token punctuation">"</span></span>        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoPlayer<span class="token punctuation">"</span></span>        <span class="token attr-name">:playsinline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>playerOptions<span class="token punctuation">"</span></span>        <span class="token attr-name">@play</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerPlay($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@pause</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerPause($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@ended</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerEnded($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@waiting</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerWaiting($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@playing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerPlaying($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@loadeddata</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerLoadeddata($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@timeupdate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerTimeupdate($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@canplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerCanplay($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@canplaythrough</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerCanplaythrough($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@statechanged</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>playerStateChanged($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@ready</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>playerReadied<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video-player</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> videoPlayer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-video-player'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'VideoPlayer'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        playerOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>          playbackRates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//播放速度</span>          autoplay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//如果true,浏览器准备好时开始回放。</span>          muted<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认情况下将会消除任何音频。</span>          loop<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 导致视频一结束就重新开始。</span>          preload<span class="token punctuation">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 建议浏览器在&lt;video>加载元素后是否应该开始下载视频数据。</span>          <span class="token comment" spellcheck="true">// auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）</span>          language<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>          aspectRatio<span class="token punctuation">:</span> <span class="token string">'16:9'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。</span>          <span class="token comment" spellcheck="true">// 值应该代表一个比例 - 用冒号分隔的两个数字（例如"16:9"或"4:3"）</span>          fluid<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 当fluid为true时，Video.js player将拥有流体大小。</span>          <span class="token comment" spellcheck="true">// 换句话说，它将按比例缩放以适应其容器。</span>          sources<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              type<span class="token punctuation">:</span> <span class="token string">'video/mp4'</span><span class="token punctuation">,</span>              src<span class="token punctuation">:</span> <span class="token string">'http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4'</span>              <span class="token comment" spellcheck="true">//你的视频地址（必填）</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          poster<span class="token punctuation">:</span> <span class="token string">'poster.jpg'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//你的封面地址</span>          width<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>          notSupportedMessage<span class="token punctuation">:</span> <span class="token string">'此视频暂无法播放，请稍后再试'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//允许覆盖Video.js无法播放媒体源时显示的默认信息。</span>          controlBar<span class="token punctuation">:</span> <span class="token punctuation">{</span>            timeDivider<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            durationDisplay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            remainingTimeDisplay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            fullscreenToggle<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//全屏按钮</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      videoPlayer    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 播放事件</span>      <span class="token function">onPlayerPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 暂停事件</span>      <span class="token function">onPlayerPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 播放结束事件</span>      <span class="token function">onPlayerEnded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerPlaying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerLoadeddata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerTimeupdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerTimeupdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerCanplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerCanplaythrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">playerStateChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">playerReadied</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the player is readied'</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// you can use it to do something...</span>        <span class="token comment" spellcheck="true">// player.[methods]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><p>了解更多点击<a href="https://www.npmjs.com/package/vue-video-player" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue视频播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue导出Excel表格</title>
      <link href="/2019/05/29/vue-dao-chu-excel-biao-ge/"/>
      <url>/2019/05/29/vue-dao-chu-excel-biao-ge/</url>
      
        <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://github.com/libing-cheer/excel-export" target="_blank" rel="noopener">demo 代码示例</a></p><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><pre class=" language-bash"><code class="language-bash">vue init webpack excel-export       建立excel-export项目<span class="token function">cd</span> excel-export                     进入excel-export文件夹下<span class="token function">npm</span> <span class="token function">install</span>                         安装依赖<span class="token function">npm</span> run dev                         运行</code></pre><h3 id="导出-Excel-关键"><a href="#导出-Excel-关键" class="headerlink" title="导出 Excel 关键"></a>导出 Excel 关键</h3><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -S file-saver           用来生成文件的web应用程序</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -S xlsx                 电子表格格式的解析器</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D script-loader        将js挂载在全局下</code></pre><h4 id="2、添加-Blob-js-及-Export2Excel-js-文件"><a href="#2、添加-Blob-js-及-Export2Excel-js-文件" class="headerlink" title="2、添加 Blob.js 及 Export2Excel.js 文件"></a>2、添加 Blob.js 及 Export2Excel.js 文件</h4><p>在 <code>src</code> 目录下创建一个文件(<code>vendor</code>) 并添加<a href="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/vendor/Blob.js" target="_blank" rel="noopener">Blob.js</a>和<a href="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/vendor/Export2Excel.js" target="_blank" rel="noopener">Export2Excel.js</a>，对 <code>Export2Excel.js</code> 添加了一段代码，可以使导出的表格列宽自适应。所改动代码为 147 - 155 行，具体如下：</p><pre class=" language-bash"><code class="language-bash">/*设置worksheet每列的最大宽度*/  const colWidth <span class="token operator">=</span> data.map<span class="token punctuation">(</span>row <span class="token operator">=</span><span class="token operator">></span> row.map<span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    /*先判断是否为null/undefined*/    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'wch'</span><span class="token keyword">:</span> 10 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /*再判断是否为中文*/    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.charCodeAt<span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token operator">></span> 255<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'wch'</span><span class="token keyword">:</span> val.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.length * 2 + 5 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'wch'</span><span class="token keyword">:</span> val.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.length + 5 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">))</span>/*以第一行为初始值*/   <span class="token keyword">let</span> result <span class="token operator">=</span> colWidth<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colWidth.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>let j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> colWidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.length<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> colWidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> colWidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ws<span class="token punctuation">[</span><span class="token string">'!cols'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span></code></pre><h4 id="3、配置加载时的路径"><a href="#3、配置加载时的路径" class="headerlink" title="3、配置加载时的路径"></a>3、配置加载时的路径</h4><p>在 <code>build</code> 文件夹下的 <code>webpack.base.conf.js</code> 文件下修改，配置要加载时的路径</p><pre class=" language-bash"><code class="language-bash">alias: <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token keyword">:</span> <span class="token string">'vue/dist/vue.esm.js'</span>,      <span class="token string">'@'</span><span class="token keyword">:</span> resolve<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>,      <span class="token string">'vendor'</span><span class="token keyword">:</span> resolve<span class="token punctuation">(</span><span class="token string">'src/vendor'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h4 id="4、Export2Excel-js-引用依赖"><a href="#4、Export2Excel-js-引用依赖" class="headerlink" title="4、Export2Excel.js 引用依赖"></a>4、Export2Excel.js 引用依赖</h4><p>在 <code>Export2Excel.js</code> 引用依赖如下：</p><pre class=" language-bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token string">'./Blob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require<span class="token punctuation">(</span><span class="token string">'script-loader!file-saver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require<span class="token punctuation">(</span><span class="token string">'script-loader!xlsx/dist/xlsx.core.min'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="element-ui-使用"><a href="#element-ui-使用" class="headerlink" title="element-ui 使用"></a>element-ui 使用</h3><p>用了 <code>element-ui</code> 中的 <code>table</code> 和 <code>button</code> 组件，安装依赖：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -S element-ui</code></pre><p>在 main.js 中引用 element 及其样式：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Element from <span class="token string">'element-ui'</span>                    // 引入element ui<span class="token function">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>       // 引入 element ui 样式Vue.use<span class="token punctuation">(</span>Element, <span class="token punctuation">{</span>  size: <span class="token string">'mini'</span>                                      // <span class="token keyword">set</span> element-ui default size<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Vue-文件使用"><a href="#Vue-文件使用" class="headerlink" title="Vue 文件使用"></a>Vue 文件使用</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>el-button        type<span class="token operator">=</span><span class="token string">"primary"</span>        size<span class="token operator">=</span><span class="token string">"mini"</span>        style<span class="token operator">=</span><span class="token string">"margin:30px auto;"</span>        @click<span class="token operator">=</span><span class="token string">"handleDownloadData"</span>      <span class="token operator">></span>导出<span class="token operator">&lt;</span>/el-button<span class="token operator">></span>      <span class="token operator">&lt;</span>el-table        :data<span class="token operator">=</span><span class="token string">"tableData"</span>        stripe        style<span class="token operator">=</span><span class="token string">"width: 600px;margin:30px auto;"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          prop<span class="token operator">=</span><span class="token string">"date"</span>          label<span class="token operator">=</span><span class="token string">"日期"</span>          width<span class="token operator">=</span><span class="token string">"180"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          prop<span class="token operator">=</span><span class="token string">"name"</span>          label<span class="token operator">=</span><span class="token string">"姓名"</span>          width<span class="token operator">=</span><span class="token string">"180"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          prop<span class="token operator">=</span><span class="token string">"address"</span>          label<span class="token operator">=</span><span class="token string">"地址"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>      <span class="token operator">&lt;</span>/el-table<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>  name: <span class="token string">'excelExport'</span>,  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg: <span class="token string">'Welcome to Your Excel Export'</span>,      tableData: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-02'</span>,          name: <span class="token string">'王小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1510 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-04'</span>,          name: <span class="token string">'李小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1511 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-01'</span>,          name: <span class="token string">'孙小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1512 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-02'</span>,          name: <span class="token string">'朱小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1513 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-04'</span>,          name: <span class="token string">'钱小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1514 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-01'</span>,          name: <span class="token string">'杜小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1515 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-03'</span>,          name: <span class="token string">'赵小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1516 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>,      tableTitleData: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          label: <span class="token string">'日期'</span>,          prop: <span class="token string">'date'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          label: <span class="token string">'姓名'</span>,          prop: <span class="token string">'name'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          label: <span class="token string">'地址'</span>,          prop: <span class="token string">'address'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  methods: <span class="token punctuation">{</span>    // 导出的方法    handleDownloadData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // 导出表格的表头设置      <span class="token keyword">let</span> allColumns <span class="token operator">=</span> this.tableTitleData      var columnNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      var columnValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> allColumns.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>        columnNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> allColumns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.label        columnValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> allColumns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.prop      <span class="token punctuation">}</span>      require.ensure<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        const <span class="token punctuation">{</span> export_json_to_excel <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'vendor/Export2Excel'</span><span class="token punctuation">)</span>        const tHeader <span class="token operator">=</span> columnNames        const filterVal <span class="token operator">=</span> columnValues        const list <span class="token operator">=</span> this.tableData        const data <span class="token operator">=</span> this.formatJson<span class="token punctuation">(</span>filterVal, list<span class="token punctuation">)</span>        export_json_to_excel<span class="token punctuation">(</span>tHeader, data, <span class="token string">'导出excel列表demo'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>,    formatJson<span class="token punctuation">(</span>filterVal, jsonData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> jsonData.map<span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> filterVal.map<span class="token punctuation">(</span>j <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">))</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图"></a>运行效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/assets/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="运行效果图"></p><h3 id="导出效果图"><a href="#导出效果图" class="headerlink" title="导出效果图"></a>导出效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/assets/%E5%AF%BC%E5%87%BA%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="导出效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 导出表格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 导出Excel表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue拖拽排序</title>
      <link href="/2019/05/28/vue-tuo-zhuai-pai-xu/"/>
      <url>/2019/05/28/vue-tuo-zhuai-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="Awe-dnd"><a href="#Awe-dnd" class="headerlink" title="Awe-dnd"></a>Awe-dnd</h3><p><code>Awe-dnd</code>：一个轻量的 <code>Vue</code> 拖动排序插件，可使您的元素在 <code>Vue</code> 中可拖动。</p><h5 id="demo-示例图"><a href="#demo-示例图" class="headerlink" title="demo 示例图"></a><a href="https://github.com/hilongjw/vue-dragging/blob/master/preview.gif" target="_blank" rel="noopener">demo 示例图</a></h5><h3 id="Awe-dnd-特点"><a href="#Awe-dnd-特点" class="headerlink" title="Awe-dnd 特点"></a>Awe-dnd 特点</h3><ul><li>支持桌面和移动设备</li><li><code>Vue</code> 数据驱动理念</li><li>支持 <code>multi drag</code></li><li>支持 <code>Vue 1.0</code> and <code>Vue 2.0</code></li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li><code>Vue: ^1.0.0 or ^2.0.0</code></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> awe-dnd --save</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class=" language-bash"><code class="language-bash">// main.js<span class="token function">import</span> VueDND from <span class="token string">'awe-dnd'</span>Vue.use<span class="token punctuation">(</span>VueDND<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--your.vue--<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        colors: <span class="token punctuation">[</span><span class="token punctuation">{</span>            text: <span class="token string">"Aquamarine"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Hotpink"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Gold"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Crimson"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Blueviolet"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Lightblue"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Cornflowerblue"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Skyblue"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Burlywood"</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  /* <span class="token keyword">if</span> your need multi drag  mounted: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      this.colors.forEach<span class="token punctuation">((</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          Vue.set<span class="token punctuation">(</span>item, <span class="token string">'isComb'</span>, false<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> */<span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div          class<span class="token operator">=</span><span class="token string">"color-item"</span>          v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color' }"</span>          :key<span class="token operator">=</span><span class="token string">"color.text"</span>      <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span></code></pre><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><pre class=" language-bash"><code class="language-bash">v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color' }"</span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><code>{item} Object</code></li><li><code>{list} Array</code></li><li><code>{group} String</code></li><li><p><code>{comb} String</code></p><p>group is unique key of dragable list.</p><p>comb use for multi drag</p></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- Vue2.0 --<span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div        class<span class="token operator">=</span><span class="token string">"color-item"</span>        v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color' }"</span>        :key<span class="token operator">=</span><span class="token string">"color.text"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Vue1.0 --<span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div        class<span class="token operator">=</span><span class="token string">"color-item"</span>        v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color', key: color.text }"</span>        track-by<span class="token operator">=</span><span class="token string">"text"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div        class<span class="token operator">=</span><span class="token string">"color-item"</span>        v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color', otherData: otherData, comb: 'isComb' }"</span>        :key<span class="token operator">=</span><span class="token string">"color.text"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> default <span class="token punctuation">{</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$dragging</span><span class="token keyword">.</span><span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'dragged'</span>, <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>value.item<span class="token punctuation">)</span>      console.log<span class="token punctuation">(</span>value.list<span class="token punctuation">)</span>      console.log<span class="token punctuation">(</span>value.otherData<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    this.<span class="token variable">$dragging</span><span class="token keyword">.</span><span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'dragend'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><p><a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT 许可证</a></p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p><a href="https://www.npmjs.com/search?q=keywords:vue-dragging" target="_blank" rel="noopener">vue-dragging</a><br><a href="https://www.npmjs.com/search?q=keywords:vue-drag" target="_blank" rel="noopener">vue-drag</a><br><a href="https://www.npmjs.com/search?q=keywords:vue-dnd" target="_blank" rel="noopener">vue-dnd</a><br><a href="https://www.npmjs.com/search?q=keywords:vue" target="_blank" rel="noopener">vue</a><br><a href="https://www.npmjs.com/search?q=keywords:draggable" target="_blank" rel="noopener">draggable</a><br><a href="https://www.npmjs.com/search?q=keywords:drag" target="_blank" rel="noopener">drag</a><br><a href="https://www.npmjs.com/search?q=keywords:drop" target="_blank" rel="noopener">drop</a><br><a href="https://www.npmjs.com/search?q=keywords:html5" target="_blank" rel="noopener">html5</a><br><a href="https://www.npmjs.com/search?q=keywords:draggable" target="_blank" rel="noopener">draggable</a><br><a href="https://www.npmjs.com/search?q=keywords:droppable" target="_blank" rel="noopener">droppable</a><br><a href="https://www.npmjs.com/search?q=keywords:dnd" target="_blank" rel="noopener">drag-and-drop</a><br><a href="https://www.npmjs.com/search?q=keywords:dnd" target="_blank" rel="noopener">dnd</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 拖拽排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 拖拽排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm command not found</title>
      <link href="/2019/05/19/mac-xia-node-an-zhuang-cheng-gong-dan-ti-shi-npm-command-not-found/"/>
      <url>/2019/05/19/mac-xia-node-an-zhuang-cheng-gong-dan-ti-shi-npm-command-not-found/</url>
      
        <content type="html"><![CDATA[<h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>从官网下载了 <code>node</code> 的 <code>.pkg</code> 文件安装 <code>node</code>，安装好后，在 <code>mac</code> 终端下输入 <code>npm -v</code> 和 <code>node -v</code> 均提示 <code>command not found</code>。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>1、第一步：创建 <code>.bash_profile</code> 文件，～表示在～目录下，.表示隐藏文件，打开终端，输入命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> ~/.bash_profile</code></pre><p>2、第二步：打开 <code>.bash_profile</code> 文件，输入命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">open</span> -e .bash_profile</code></pre><p>3、第三步：这时候会弹出 <code>.bash_profile</code> 文本编辑框，在文本编辑框里面编辑：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></pre><p>4、第四步：<code>command+s</code> 保存 <code>.bash_profile</code> 文件，为使 <code>.bash_profile</code> 文件生效，输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> .bash_profile</code></pre><p>5、第五步：再输入 <code>npm -v</code> 或者 <code>node -v</code> 就能看到版本号啦~。</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> -v</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue文件预览</title>
      <link href="/2019/05/10/vue-wen-jian-yu-lan/"/>
      <url>/2019/05/10/vue-wen-jian-yu-lan/</url>
      
        <content type="html"><![CDATA[<h3 id="pdf文件预览"><a href="#pdf文件预览" class="headerlink" title="pdf文件预览"></a>pdf文件预览</h3><h4 id="1、embed-标签"><a href="#1、embed-标签" class="headerlink" title="1、embed 标签"></a>1、embed 标签</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"height:100vh"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>embed src<span class="token operator">=</span><span class="token string">"https://fscdn.xxx.com/pdf文件地址.pdf"</span>         width<span class="token operator">=</span><span class="token string">"100%"</span>         height<span class="token operator">=</span><span class="token string">"100%"</span>                  type<span class="token operator">=</span><span class="token string">"application/pdf"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span></code></pre><h4 id="2、iframe-标签"><a href="#2、iframe-标签" class="headerlink" title="2、iframe 标签"></a>2、iframe 标签</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"height:100vh"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"https://fscdn.xxx.com/pdf文件地址.pdf"</span>         width<span class="token operator">=</span><span class="token string">"100%"</span>         height<span class="token operator">=</span><span class="token string">"100%"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span></code></pre><h4 id="3、-pdf-js"><a href="#3、-pdf-js" class="headerlink" title="3、 pdf.js"></a>3、 pdf.js</h4><p>请前往<br><a href="https://www.jb51.net/article/117166.htm" target="_blank" rel="noopener">vue2.0全局组件之pdf详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 文件预览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue图片预览</title>
      <link href="/2019/05/04/vue-tu-pian-yu-lan/"/>
      <url>/2019/05/04/vue-tu-pian-yu-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="v-viewer"><a href="#v-viewer" class="headerlink" title="v-viewer"></a>v-viewer</h2><p>用于图片浏览的 <code>Vue</code> 组件，支持旋转、缩放、翻转等操作，基于 <code>viewer.js</code>。</p><h5 id="演示示例"><a href="#演示示例" class="headerlink" title="演示示例"></a><a href="https://mirari.cc/v-viewer/" target="_blank" rel="noopener">演示示例</a></h5><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> v-viewer</code></pre><h3 id="手动引入样式文件"><a href="#手动引入样式文件" class="headerlink" title="手动引入样式文件"></a>手动引入样式文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入 <code>v-viewer</code> 及必需的 <code>css</code> 样式，并使用 <code>Vue.use()</code> 注册插件，之后即可使用。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- directive --<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-viewer<span class="token operator">></span>      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"1.jpg"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"2.jpg"</span><span class="token operator">></span>      <span class="token punctuation">..</span>.    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- component --<span class="token operator">></span>    <span class="token operator">&lt;</span>viewer :images<span class="token operator">=</span><span class="token string">"images"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/viewer<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span>  <span class="token function">import</span> Vue from <span class="token string">'vue'</span>  Vue.use<span class="token punctuation">(</span>Viewer<span class="token punctuation">)</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="以指令形式使用"><a href="#以指令形式使用" class="headerlink" title="以指令形式使用"></a>以指令形式使用</h3><p>只需要将 <code>v-viewer</code> 指令添加到任意元素即可，该元素下的所有 <code>img</code> 元素都会被 <code>viewer</code> 自动处理。</p><p>你可以像这样传入配置项： <code>v-viewer=&quot;{inline: true}&quot;</code></p><p>如果有必要，可以先用选择器查找到目标元素，然后可以用 <code>el.\$viewer</code> 来获取 <code>viewer</code> 实例。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-viewer<span class="token operator">=</span><span class="token string">"{movable: false}"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Show<span class="token operator">&lt;</span>/button<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span>  <span class="token function">import</span> Vue from <span class="token string">'vue'</span>  Vue.use<span class="token punctuation">(</span>Viewer<span class="token punctuation">)</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>      show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        const viewer <span class="token operator">=</span> this.<span class="token variable">$el</span>.querySelector<span class="token punctuation">(</span><span class="token string">'.images'</span><span class="token punctuation">)</span>.<span class="token variable">$viewer</span>        viewer.show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="指令修饰器"><a href="#指令修饰器" class="headerlink" title="指令修饰器"></a>指令修饰器</h3><p>添加修饰器后，<code>viewer</code> 的创建只会在元素绑定指令时执行一次。<br>如果你确定元素内的图片不会再发生变化，使用它可以避免不必要的重建动作。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-viewer.static<span class="token operator">=</span><span class="token string">"{inline: true}"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="以组件形式使用"><a href="#以组件形式使用" class="headerlink" title="以组件形式使用"></a>以组件形式使用</h3><p>你也可以单独引入全屏组件并局部注册它。</p><p>使用作用域插槽来定制你的图片展示方式。</p><p>监听 <code>inited</code> 事件来获取 <code>viewer</code> 实例，或者也可以用 <code>this.refs.xxx.\$viewer</code> 这种方法。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>viewer :options<span class="token operator">=</span><span class="token string">"options"</span> :images<span class="token operator">=</span><span class="token string">"images"</span>            @inited<span class="token operator">=</span><span class="token string">"inited"</span>            class<span class="token operator">=</span><span class="token string">"viewer"</span> ref<span class="token operator">=</span><span class="token string">"viewer"</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in scope.images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>scope.options<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>/viewer<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Show<span class="token operator">&lt;</span>/button<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Viewer from <span class="token string">"v-viewer/src/component.vue"</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    components: <span class="token punctuation">{</span>      Viewer    <span class="token punctuation">}</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>      inited <span class="token punctuation">(</span>viewer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.<span class="token variable">$viewer</span> <span class="token operator">=</span> viewer      <span class="token punctuation">}</span>,      show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.<span class="token variable">$viewer</span>.show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="配置项-amp-方法"><a href="#配置项-amp-方法" class="headerlink" title="配置项 &amp; 方法"></a>配置项 &amp; 方法</h3><p>请参考<a href="https://github.com/fengyuanchen/viewerjs" target="_blank" rel="noopener">viewer.js.</a></p><h3 id="插件配置项"><a href="#插件配置项" class="headerlink" title="插件配置项"></a>插件配置项</h3><p><strong> name</strong></p><ul><li><code>Type: String</code></li><li><code>Default: viewer</code></li></ul><p>如果你需要避免重名冲突，可以像这样引入:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-vuer<span class="token operator">=</span><span class="token string">"{movable: false}"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Show<span class="token operator">&lt;</span>/button<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Vuer from <span class="token string">'v-viewer'</span>  <span class="token function">import</span> Vue from <span class="token string">'vue'</span>  Vue.use<span class="token punctuation">(</span>Vuer, <span class="token punctuation">{</span>name: <span class="token string">'vuer'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>      show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        const vuer <span class="token operator">=</span> this.<span class="token variable">$el</span>.querySelector<span class="token punctuation">(</span><span class="token string">'.images'</span><span class="token punctuation">)</span>.<span class="token variable">$vuer</span>        vuer.show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="默认配置项"><a href="#默认配置项" class="headerlink" title="默认配置项"></a>默认配置项</h3><ul><li><code>Type: Object</code></li><li><code>Default: undefined</code><br>如果你需要修改 <code>viewer.js</code> 的全局默认配置项，可以像这样引入：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span><span class="token function">import</span> Vue from <span class="token string">'vue'</span>Vue.use<span class="token punctuation">(</span>Viewer, <span class="token punctuation">{</span>  defaultOptions: <span class="token punctuation">{</span>    zIndex: 9999  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>你还可以在任何时候像这样修改全局默认配置项：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span><span class="token function">import</span> Vue from <span class="token string">'vue'</span>Vue.use<span class="token punctuation">(</span>Viewer<span class="token punctuation">)</span>Viewer.setDefaults<span class="token punctuation">(</span><span class="token punctuation">{</span>  zIndexInline: 2017<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 图片预览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue图片预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/04/hello-world/"/>
      <url>/2019/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
