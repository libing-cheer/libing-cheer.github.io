<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3和React版本-仿移动端点单App</title>
      <link href="/2023/03/31/vue3-he-react-ban-ben-fang-yi-dong-duan-dian-dan-app/"/>
      <url>/2023/03/31/vue3-he-react-ban-ben-fang-yi-dong-duan-dian-dan-app/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近学习了慕课上 Vue3 移动端类似点单 App 的编码，想着用 ReactV6 版本也可以实现，模拟接口使用的是<a href="https://www.fastmock.site/#/" target="_blank" rel="noopener">FastMock</a>，于是开始了踩坑填坑之旅。首先粘一下两个版本库地址，有兴趣的小伙伴可以在 github 上 star✨ 哦。</p><ul><li><a href="https://github.com/libing-cheer/vue3-shopping" target="_blank" rel="noopener">Vue3 移动端点单 App</a></li><li><a href="https://github.com/libing-cheer/react-shopping" target="_blank" rel="noopener">ReactV6 移动端点单 App</a></li></ul><h2 id="原型效果"><a href="#原型效果" class="headerlink" title="原型效果"></a>原型效果</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/916be7c5bf9b486a81c0930d89c4a2ea~tplv-k3u1fbpfcp-watermark.image?" alt="shopping.png" width="70%"></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7fd195e088c6482b92b23f9bb1ef6e0e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="70%"></p><h2 id="踩坑问题点及解决记录"><a href="#踩坑问题点及解决记录" class="headerlink" title="踩坑问题点及解决记录"></a>踩坑问题点及解决记录</h2><h3 id="1、样式穿透"><a href="#1、样式穿透" class="headerlink" title="1、样式穿透"></a>1、样式穿透</h3><p>在开发的过程中发现，React 如果定义了相同的类名，样式会相互影响。所以要么定义不同的类名，要么采用其他的方式。我是使用了<code>styled-components</code>这个 npm 库，使用方式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">"styled-components"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Wrapper <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token string">`  overflow-y: scroll;  position: absolute;  top: 0;  bottom: 0.5rem;  left: 0;  right: 0;  background: rgb(248, 248, 248);`</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ComponentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Wrapper<span class="token operator">></span>我是具有样式的div标签<span class="token operator">&lt;</span><span class="token operator">/</span>Wrapper<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ComponentDemo<span class="token punctuation">;</span></code></pre><h3 id="2、路由跳转"><a href="#2、路由跳转" class="headerlink" title="2、路由跳转"></a>2、路由跳转</h3><p>因为使用的 React 版本是 V6，所以与老版本的一些方法还是有一些区别的。可以随意跳转到其他页面，使用了<code>react-router-dom</code>库里面的 useNavigate 方法，使用方式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useNavigate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ComponentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> navigate <span class="token operator">=</span> <span class="token function">useNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleRouterClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">navigate</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleRouterClick<span class="token punctuation">}</span><span class="token operator">></span>点我跳转到首页<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ComponentDemo<span class="token punctuation">;</span></code></pre><h3 id="3、动态样式"><a href="#3、动态样式" class="headerlink" title="3、动态样式"></a>3、动态样式</h3><p>动态样式使用了<code>classnames</code>库，使用方式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> classnames <span class="token keyword">from</span> <span class="token string">"classnames"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ComponentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isDynamicClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">classnames</span><span class="token punctuation">(</span><span class="token string">"class__a"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> class__b<span class="token punctuation">:</span> isDynamicClass <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>      我有动态样式 class__b    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ComponentDemo<span class="token punctuation">;</span></code></pre><h3 id="4、登录重定向"><a href="#4、登录重定向" class="headerlink" title="4、登录重定向"></a>4、登录重定向</h3><p>因为登录状态是使用的 <code>localStorage</code>，所以可以根据设置的状态值进行判断，例如在登录页面里面线获取<code>localStorage.isLogin</code>，如果 isLogin 为 true，则代表已经登陆，那么访问 login 就需要跳转到首页（/home）,使用方式如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Navigate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ComponentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLogin <span class="token operator">=</span> localStorage<span class="token punctuation">.</span>isLogin<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token punctuation">{</span>isLogin <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Navigate to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"/home"</span><span class="token punctuation">}</span> replace <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*我要跳转到首页*/</span><span class="token punctuation">}</span>      <span class="token punctuation">{</span><span class="token operator">!</span>isLogin <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>我是登录页<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ComponentDemo<span class="token punctuation">;</span></code></pre><h3 id="5、整体路由配置"><a href="#5、整体路由配置" class="headerlink" title="5、整体路由配置"></a>5、整体路由配置</h3><p>router 下的 index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"../views/home/Home"</span><span class="token punctuation">;</span><span class="token keyword">import</span> CartList <span class="token keyword">from</span> <span class="token string">"../views/cartList/CartList"</span><span class="token punctuation">;</span><span class="token keyword">import</span> OrderList <span class="token keyword">from</span> <span class="token string">"../views/orderList/OrderList"</span><span class="token punctuation">;</span><span class="token keyword">import</span> OwnPage <span class="token keyword">from</span> <span class="token string">"../views/ownPage/OwnPage"</span><span class="token punctuation">;</span><span class="token keyword">import</span> OrderConfirmation <span class="token keyword">from</span> <span class="token string">"../views/orderConfirmation/OrderConfirmation"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Shop <span class="token keyword">from</span> <span class="token string">"../views/shop/Shop"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/login/Login"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Register <span class="token keyword">from</span> <span class="token string">"../views/register/Register"</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/cartList"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>CartList <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/orderList"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>OrderList <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/ownPage"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>OwnPage <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/orderConfirmation/:id"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>OrderConfirmation <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/shop/:id"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Shop <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Login <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> <span class="token string">"/register"</span><span class="token punctuation">,</span>    element<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Register <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>    exact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span class="token punctuation">;</span></code></pre><p>主入口 index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token punctuation">;</span><span class="token keyword">import</span> reportWebVitals <span class="token keyword">from</span> <span class="token string">"./reportWebVitals"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> useRoutes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router/index"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./style/index.scss"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store/index"</span><span class="token punctuation">;</span><span class="token keyword">const</span> GetRoutes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">useRoutes</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> SetRoutes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>      <span class="token operator">&lt;</span>GetRoutes <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// 根组件配置：Provider声明式开发，提供给子组件数据管理功能</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>SetRoutes <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 如果你想开始测量你的应用程序的性能，传递一个函数 * 记录结果（例如：reportWebVitals(console.log)） * 或发送到分析端点。 了解更多：https://bit.ly/CRA-vitals */</span><span class="token function">reportWebVitals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6、数据管理-Redux-配置"><a href="#6、数据管理-Redux-配置" class="headerlink" title="6、数据管理 Redux 配置"></a>6、数据管理 Redux 配置</h3><p>store 文件夹下配置：</p><p>index.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 主仓库配置 */</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> compose<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">"redux-thunk"</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">"./reducer"</span><span class="token punctuation">;</span><span class="token keyword">const</span> composeEnhancers <span class="token operator">=</span> window<span class="token punctuation">.</span>__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ <span class="token operator">||</span> compose<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // 引入Redux可视化插件</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>  reducer<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 仓库数据</span>  <span class="token function">composeEnhancers</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 组合中间件</span>    <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 异步用中间件</span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p>reducer.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> reducer <span class="token keyword">as</span> CartListReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../views/shop/store/index"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  cartList<span class="token punctuation">:</span> CartListReducer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为功能并不复杂，全局只配置了一个购物车数据，并对他进行操作。在相对应的文件夹下建立 store，并配置对应的方法，以下是实现的方式：在 shop 文件夹下新建</p><ul><li>actionCreator.js：负责统一管理数据状态改变的函数执行，给 reducer 分配相应的 action</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionTypes <span class="token keyword">from</span> <span class="token string">"./constants"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> changeCartItemInfo <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> actionTypes<span class="token punctuation">.</span>CHANGE_CART_ITEM_INFO<span class="token punctuation">,</span>  data<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> changeCartItemCheckInfo <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> actionTypes<span class="token punctuation">.</span>CHANGE_CART_ITEM_CHECK_INFO<span class="token punctuation">,</span>  data<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> setCartItemCheckedInfo <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> actionTypes<span class="token punctuation">.</span>SET_CART_ITEM_CHECKED<span class="token punctuation">,</span>  data<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> cleanCartProductInfo <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> actionTypes<span class="token punctuation">.</span>CLEAN_CART_PRODUCT<span class="token punctuation">,</span>  data<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> clearCartDataInfo <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> actionTypes<span class="token punctuation">.</span>CLEAR_CART_DATA_INFO<span class="token punctuation">,</span>  data<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> changeShopNameInfo <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  type<span class="token punctuation">:</span> actionTypes<span class="token punctuation">.</span>CHANGE_SHOP_NAME<span class="token punctuation">,</span>  data<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>constants.js：定义的常量</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_CART_ITEM_INFO <span class="token operator">=</span> <span class="token string">"CHANGE_CART_ITEM_INFO"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_CART_ITEM_CHECK_INFO <span class="token operator">=</span> <span class="token string">"CHANGE_CART_ITEM_CHECK_INFO"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> CLEAN_CART_PRODUCT <span class="token operator">=</span> <span class="token string">"CLEAN_CART_PRODUCT"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> SET_CART_ITEM_CHECKED <span class="token operator">=</span> <span class="token string">"SET_CART_ITEM_CHECKED"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> CHANGE_SHOP_NAME <span class="token operator">=</span> <span class="token string">"CHANGE_SHOP_NAME"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> CLEAR_CART_DATA_INFO <span class="token operator">=</span> <span class="token string">"CLEAR_CART_DATA_INFO"</span><span class="token punctuation">;</span></code></pre><ul><li>reducers.js：负责根据 action 值，做相应操作，以实现数据流管理</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionTypes <span class="token keyword">from</span> <span class="token string">"./constants"</span><span class="token punctuation">;</span><span class="token keyword">const</span> setLocalCartList <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> cartList <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span>  <span class="token keyword">const</span> cartListString <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>cartList<span class="token punctuation">)</span><span class="token punctuation">;</span>  localStorage<span class="token punctuation">.</span>cartList <span class="token operator">=</span> cartListString<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> getLocalCartList <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span>cartList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>  cartList<span class="token punctuation">:</span> <span class="token function">getLocalCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> actionTypes<span class="token punctuation">.</span>CHANGE_CART_ITEM_INFO<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">// 执行一些操作</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>state<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> actionTypes<span class="token punctuation">.</span>CHANGE_CART_ITEM_CHECK_INFO<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">// 执行一些操作</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> actionTypes<span class="token punctuation">.</span>CHANGE_SHOP_NAME<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">// 执行一些操作</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> actionTypes<span class="token punctuation">.</span>CLEAR_CART_DATA_INFO<span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">// 执行一些操作</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducers<span class="token punctuation">;</span></code></pre><ul><li>index.js：负责整理仓库功能，并统一向外输出</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">"./reducers"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionCreators <span class="token keyword">from</span> <span class="token string">"./actionCreator"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> constants <span class="token keyword">from</span> <span class="token string">"./constants"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> reducer<span class="token punctuation">,</span> actionCreators<span class="token punctuation">,</span> constants <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在组件里面使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> changeCartItemInfo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./store/actionCreator"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ComponentDemo</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> changeCartItemInfoDispatch <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">const</span> changeCartItem <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">changeCartItemInfoDispatch</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">changeCartItem</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>我是具有样式的div标签<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> mapDispatchToProps <span class="token operator">=</span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token function">changeCartItemInfoDispatch</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">changeCartItemInfo</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>  mapStateToProps<span class="token punctuation">,</span>  mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">memo</span><span class="token punctuation">(</span>ComponentDemo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7、React-内置方法使用"><a href="#7、React-内置方法使用" class="headerlink" title="7、React 内置方法使用"></a>7、React 内置方法使用</h3><h4 id="7-1-useEffect"><a href="#7-1-useEffect" class="headerlink" title="7.1 useEffect"></a>7.1 useEffect</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../utils/request"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ComponentDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">,</span> setData<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    currentTab<span class="token punctuation">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> shopId<span class="token punctuation">:</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> getContentData <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/api/shop/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>shopId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/products`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        tab<span class="token punctuation">:</span> data<span class="token punctuation">.</span>currentTab<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">?</span><span class="token punctuation">.</span>errno <span class="token operator">&amp;&amp;</span> res<span class="token operator">?</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          list<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>tab <span class="token operator">===</span> data<span class="token punctuation">.</span>currentTab<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">getContentData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">.</span>currentTab<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>data<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ComponentDemo<span class="token punctuation">;</span></code></pre><h4 id="7-2-useState"><a href="#7-2-useState" class="headerlink" title="7.2 useState"></a>7.2 useState</h4><p>在使用过程中发现，useState 里面可能会定义多个变量，如果只想更新其中的一个或者两个变量，使用 useState 会变得不够方便，所以 utils 文件夹下添加了 useMergeState.js 文件，可以修改其中一个变量但是不影响其余变量的使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> useMergeState <span class="token operator">=</span> <span class="token punctuation">(</span>initialState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> setMergeState <span class="token operator">=</span> <span class="token punctuation">(</span>newState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> <span class="token operator">...</span>newState <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setMergeState<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> useMergeState<span class="token punctuation">;</span></code></pre><p>使用 setMergeState 和使用 useState 类似。</p><p>最后，以上是在使用过程中会出现卡壳的情况，分享一下，希望有点帮助。有问题可以评论哦。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西安旅游出行小攻略</title>
      <link href="/2021/12/04/xi-an-lu-you-gong-lue/"/>
      <url>/2021/12/04/xi-an-lu-you-gong-lue/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备建议"><a href="#一、准备建议" class="headerlink" title="一、准备建议"></a>一、准备建议</h3><p>❤️ 必备物品：<code>身份证·学生证·士兵证·充电宝·洗漱用品·雨伞·防晒·适季衣服</code><br>❤️ 西安地铁乘车方式: 在支付宝首页搜索<code>西安地铁乘车码</code>,根据提示一步步开通,便可以使用<br>❤️ 疫情期间,根据西安防控规定,需要持有 <code>48</code> 小时内的核算检测呦<br>❤️ 口罩·健康码·行程码</p><h3 id="二、酒店预定及推荐"><a href="#二、酒店预定及推荐" class="headerlink" title="二、酒店预定及推荐"></a>二、酒店预定及推荐</h3><p>酒店预定：一定提前预定，最好是提前一周左右预定，如遇到节假日，还需要更久前预定，这样酒店的选择性会更多一些。</p><p>酒店推荐<br>🏨 <a href="http://www.dianping.com/shop/k6mngu6Yo0HBwJAq" target="_blank" rel="noopener">悦·半岛酒店(西安大雁塔店)</a></p><p>🏨 <a href="http://www.dianping.com/shop/ijPv59rvmDsk8orH" target="_blank" rel="noopener">喆·啡酒店(西安大雁塔不夜城芙蓉园店)</a></p><p>🏨 <a href="http://www.dianping.com/shop/l1CYhzedWHYyMHJa" target="_blank" rel="noopener">西安高新 CitiCO 欢阁酒店</a></p><p>🏨 <a href="http://www.dianping.com/shop/H8OFgwuXy8zcLORw" target="_blank" rel="noopener">漫鹿 Ins 设计酒店(西安明城墙原地铁站)</a></p><h3 id="三、出行建议"><a href="#三、出行建议" class="headerlink" title="三、出行建议"></a>三、出行建议</h3><p>🚇 出门滴滴、地铁、公交车都可，地铁、公交都支持微信和支付宝扫码支付，只需要提前开通<code>乘车码</code>就好。</p><p>✈️ 坐<code>飞机</code>到西安，您可以直接乘坐<code>机场大巴</code>到<code>西安钟楼站</code>下车（大巴末班车凌晨 2 点），因为机场是在咸阳的，用时稍长，大概 1 个小时。</p><p>🚄 坐<code>高铁</code>到站后直接乘坐<code>地铁 2 号线</code>到<code>北大街站</code>，用时 20 分钟左右。</p><p>🚄 坐<code>火车</code>直接乘坐 <code>9 路</code>到<code>北门里</code>，用时大概 15 分钟。</p><h3 id="四、必游景点推荐"><a href="#四、必游景点推荐" class="headerlink" title="四、必游景点推荐"></a>四、必游景点推荐</h3><h4 id="西安城墙"><a href="#西安城墙" class="headerlink" title="西安城墙"></a>西安城墙</h4><p>【西安城墙】：又称西安明城墙，是中国现存最完整的古代城垣，长度列全国第二。与平遥城墙、荆州城墙、兴城城墙等并列为中国现存最完好的四座古城墙。城周围有护城河环绕，著名的西安钟鼓楼就位于城墙中心。游客可以选择闲庭信步，也可以选择骑自行车环绕城门一圈，城门上的道路并不平整，骑车要注意安全。</p><p>门票：54 元/位</p><p>开放时间 8:00-19:00 或者晚上 22:00，晚上过了 18:00 以后，所有的游客只可以下城墙而不可以上城墙了。</p><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.4e2ad26afc90b2446be9a7b48111cee3?rik=OXscKgqFZPI4dA&amp;riu=http%3a%2f%2f5b0988e595225.cdn.sohucs.com%2fimages%2f20181221%2fa93b0f0c689b44d5b4d1c2a60d0360f6.jpeg&amp;ehk=LoZzADopekPixmNNIk6IPDX7PWWvEGu1SXY4uNXlgPQ%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="西安城墙"></p><h4 id="陕西历史博物馆"><a href="#陕西历史博物馆" class="headerlink" title="陕西历史博物馆"></a>陕西历史博物馆</h4><p>【陕西历史博物馆】：位于西安大雁塔的西北侧，是中国第一座大型现代化国家级博物馆，它的建成标志着中国博物馆事业迈入了新的发展里程。馆藏文物多达 37 万余件，从远古人类的简单石器，到 1840 年前社会生活中的各类器物，时间跨度长达一百多万年。其中的商周青铜器精美绝伦，历代陶俑千姿百态，汉唐金银器独步全国，唐墓壁画举世无双。博物馆浓缩了中华民族的历史精华，被誉为“华夏珍宝库”，是展示中国古代文明和陕西历史文化的艺术殿堂。</p><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.e1311f21ef123409f6c6c4eb88e9d794?rik=ml4CLNopOVgnzw&amp;riu=http%3a%2f%2fwww.oct-cts.com%2fimages%2fup_scenery%2fUploadImage%2f37947%2flargeImg%2f20190324023474ef-526.jpg&amp;ehk=7nip%2bFjwgUHaZX4QRjiAr3RUf8D0KHOarRoNJ30i7f4%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="陕西历史博物馆"><br>门票：<code>可以预约免费门票（需要提前官网·微信公众号预定(陕西历史博物馆票务系统)）</code><br>1、<a href="https://ticket.sxhm.com/ww/index" target="_blank" rel="noopener">陕西历史博物馆门票预约</a><br>2、微信公众号预定(陕西历史博物馆票务系统)</p><p>tips:<br>1、<a href="https://ticket.sxhm.com/ww/visitnotice?navIndex=2" target="_blank" rel="noopener">参观须知</a><br>2、<a href="https://ticket.sxhm.com/ww/introduce?navIndex=3" target="_blank" rel="noopener">展馆介绍</a><br>3、<a href="https://ticket.sxhm.com/ww/geographictraffic?navIndex=4" target="_blank" rel="noopener">地理交通</a></p><p>开放时间:09:00-17：30(淡季) 08：30-18：00（旺季）</p><h4 id="大雁塔"><a href="#大雁塔" class="headerlink" title="大雁塔"></a>大雁塔</h4><p>【大雁塔】：建于唐长安城晋昌坊(今陕西省西安市南)的大慈恩寺内，又名“慈恩寺塔”，今存。塔高 64 米，塔身枋、斗拱、栏额均为青砖仿木结构。玄奘法师为供奉从印度带回的佛像、舍利和梵文经典而建造的一座五层砖塔。</p><p>大雁塔有南北广场，北广场的音乐喷泉非常壮观，每次表演时间 25 分钟，在夜晚尤其漂亮，南广场宽旷，是当地居民闲逛的不二之选。</p><p>门票：免费 登塔 30 元/位</p><p>开放时间：全天</p><p><img src="https://pic35.photophoto.cn/20150410/0033033998720857_b.jpg" alt="大雁塔"></p><h4 id="大唐不夜城"><a href="#大唐不夜城" class="headerlink" title="大唐不夜城"></a>大唐不夜城</h4><p>【大唐不夜城】：大唐不夜城的中轴景观大道是一条约一千五百米横贯南北的中央雕塑景观步街，其上分布着盛世帝王、历史人物、英雄故事等九组主题群雕，立体展现大唐帝国在宗教、文学、艺术、科技等领域的地位并彰显大国气象。大唐不夜城以大雁塔为依托，北起玄奘广场、南至唐城墙遗址公园、东起慈恩东路、西至慈恩西路，贯穿玄奘广场、贞观文化广场、开元庆典广场三个主题广场，拥有六个仿唐街区和西安音乐厅、西安大剧院、曲江电影城、陕西艺术家展廊四大文化建筑。<br>大唐不夜城晚上灯火璀璨，光影中的仿古建筑流光溢彩，气势恢宏，宛如大唐盛世再现。这里聚集不少网红，不倒翁小姐姐便是在这里。刘嘉玲也不例外，现身大唐不夜城的她第一反应也是各种拍照。不愧是大明星，璀璨的灯光成为她的背景板，身穿一袭中长款黑色大衣，简约的穿搭风格让她在灯光展中更加瞩目。这个猫眼面具也非常灵动，虽然遮挡住了刘嘉玲的五官，但眼睛却更加妩媚动人。</p><p>门票：免费</p><p>开放时间：全天</p><p><img src="https://youimg1.c-ctrip.com/target/100v10000000qg06nF1D4_D_800_600.jpg" alt="大唐不夜城"></p><h4 id="钟楼"><a href="#钟楼" class="headerlink" title="钟楼"></a>钟楼</h4><p>【钟楼】：西安钟楼位于西安市中心，明城墙内东西南北四条大街的交汇处，是中国现存钟楼中形制最大、保存最完整的一座。既名”钟楼”，其上的”钟”就不可不提。钟楼的西北角悬挂的大钟，已不再有报时的功用，但是逢年过节依然会被敲响，祈福平安。钟楼一开始悬挂的并不是这口大钟，而是铸造于唐代的一口名为”景云钟”的大钟。</p><p>门票：35 元/位</p><p>开放时间：8：00-18：00</p><p><img src="https://tse1-mm.cn.bing.net/th/id/R-C.76c3af38130d0dcfa03dc6f12f668d8e?rik=OZWYT4MxDSnIZw&amp;riu=http%3a%2f%2fimg95.699pic.com%2fphoto%2f50083%2f8813.jpg_wh860.jpg&amp;ehk=3ob80XC%2fJES%2fiGovO41iAbBxwtnzNey6DMR0jkIgHz8%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0" alt="钟楼"></p><h3 id="五、美食推荐"><a href="#五、美食推荐" class="headerlink" title="五、美食推荐"></a>五、美食推荐</h3><p>🔹 肉夹馍:西安肉夹馍有三种一是回民街肉夹馍，二是腊汁肉夹馍;三是老潼关肉夹馍</p><p>🔹 羊肉泡馍:羊肉泡馍最有趣的就是要自己掰馍，越小块越好吃!</p><p>🔹 陕菜:三根电杆陕菜馆，就在钟楼附近，七八十年代怀旧风，正宗的陕菜。葫芦鸡、沙拉脆皮茄子都非常不错!</p><p>🔹 胡辣汤:本地人喜欢吃的早餐，和馍搭配一绝!</p><p>🔹 面食:西安面食种类非常多，油泼面、岐山臊子面、御面、裤带面等等都非常不错。</p><p>🔹 酿皮:西安酿皮非常有名，来的朋友一定要尝尝。</p><p>🔹 葫芦鸡:西安的名菜，被誉为“长安第一味”，肉很嫩吃起来香</p><p>🔹 其他:香酥牛肉饼、冰峰、甑糕花奶梅汤、油茶麻花等等</p><h3 id="六、西安旅游景点手绘地图"><a href="#六、西安旅游景点手绘地图" class="headerlink" title="六、西安旅游景点手绘地图"></a>六、西安旅游景点手绘地图</h3><p><img src="https://github.com/libing-cheer/merge-table/blob/master/src/assets/xian.jpeg?raw=true" alt="西安旅游景点手绘地图"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table表格自定义显示列设置展示</title>
      <link href="/2021/11/04/table-biao-ge-xian-shi-lie-she-zhi/"/>
      <url>/2021/11/04/table-biao-ge-xian-shi-lie-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Table-表格自定义显示列设置"><a href="#Table-表格自定义显示列设置" class="headerlink" title="Table 表格自定义显示列设置"></a>Table 表格自定义显示列设置</h1><p>应用 element 中的 table 组件，自定义设置显示列。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://github.com/libing-cheer/column-options/blob/main/src/assets/columnOptions.png?raw=true" alt="效果图"></p><h3 id="自定义显示列设置示例"><a href="#自定义显示列设置示例" class="headerlink" title="自定义显示列设置示例"></a>自定义显示列设置示例</h3><p><a href="https://github.com/libing-cheer/column-options" target="_blank" rel="noopener">自定义显示列设置示例</a></p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre class=" language-bash"><code class="language-bash">yarn <span class="token function">install</span></code></pre><h2 id="运行命令-✅"><a href="#运行命令-✅" class="headerlink" title="运行命令 ✅"></a>运行命令 ✅</h2><pre class=" language-bash"><code class="language-bash">yarn run serve</code></pre><h2 id="编译打包命令-📦"><a href="#编译打包命令-📦" class="headerlink" title="编译打包命令 📦"></a>编译打包命令 📦</h2><pre class=" language-bash"><code class="language-bash">yarn run build</code></pre><h3 id="引用-element-ui"><a href="#引用-element-ui" class="headerlink" title="引用 element-ui"></a>引用 element-ui</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> element-ui</code></pre><p>在 main.js 中引入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"element-ui/lib/theme-chalk/index.css"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="column-options-组件-自定义设置列-checkedTableColumns"><a href="#column-options-组件-自定义设置列-checkedTableColumns" class="headerlink" title="column-options 组件 自定义设置列 checkedTableColumns"></a>column-options 组件 自定义设置列 checkedTableColumns</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column-options<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>operate-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-popover</span> <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reference<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          显示列设置        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column-display<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-checkbox-group</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkedTableColumns<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-checkbox</span>              <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column in columns<span class="token punctuation">"</span></span>              <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column.label<span class="token punctuation">"</span></span>              <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>column.prop<span class="token punctuation">"</span></span>            <span class="token punctuation">></span></span>              {{ column.label }}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-checkbox</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-checkbox-group</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-popover</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">stripe</span> <span class="token attr-name">border</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selection<span class="token punctuation">"</span></span>        <span class="token attr-name">min-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>序号<span class="token punctuation">"</span></span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span>        <span class="token attr-name">fixed</span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in bindTableColumns<span class="token punctuation">"</span></span>        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>        <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.prop<span class="token punctuation">"</span></span>        <span class="token attr-name">:min-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.width || 100<span class="token punctuation">"</span></span>        <span class="token attr-name">show-overflow-tooltip</span>      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"coulmnOptions"</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        columns<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"name"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"性别"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"年龄"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"age"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"身高"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"height"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"体重"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"发色"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"color"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"国籍"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"nation"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token string">"故乡"</span><span class="token punctuation">,</span> prop<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> show<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"王小虎"</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">175</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">"黑色"</span><span class="token punctuation">,</span>            nation<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token string">"北京"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"李小虎"</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">189</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">"绿色"</span><span class="token punctuation">,</span>            nation<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token string">"南京"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"赵小虎"</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">178</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">"红色"</span><span class="token punctuation">,</span>            nation<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token string">"重庆"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"上官小虎"</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">34</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">170</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span> <span class="token number">120</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">"紫色"</span><span class="token punctuation">,</span>            nation<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token string">"成都"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"公孙小虎"</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span> <span class="token number">190</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">"蓝色"</span><span class="token punctuation">,</span>            nation<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token string">"安徽"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            name<span class="token punctuation">:</span> <span class="token string">"百里小虎"</span><span class="token punctuation">,</span>            sex<span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>            age<span class="token punctuation">:</span> <span class="token number">56</span><span class="token punctuation">,</span>            height<span class="token punctuation">:</span> <span class="token number">210</span><span class="token punctuation">,</span>            weight<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>            color<span class="token punctuation">:</span> <span class="token string">"灰色"</span><span class="token punctuation">,</span>            nation<span class="token punctuation">:</span> <span class="token string">"中国"</span><span class="token punctuation">,</span>            home<span class="token punctuation">:</span> <span class="token string">"天津"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">bindTableColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> column<span class="token punctuation">.</span>show<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      checkedTableColumns<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bindTableColumns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> column<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 设置表格列的显示与隐藏</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果选中，则设置列显示</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>checked<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              column<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 如果未选中，则设置列隐藏</span>              column<span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在数据加载完，重新渲染表格</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>table<span class="token punctuation">.</span><span class="token function">doLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.column-options</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1500</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.column-display</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.operate-btn</span> </span><span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">15</span>px <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 显示列设置 </tag>
            
            <tag> Table表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 与 HTTPS 的介绍及区别</title>
      <link href="/2021/06/08/http-yu-https-de-qu-bie/"/>
      <url>/2021/06/08/http-yu-https-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://www.runoob.com/wp-content/uploads/2018/09/HTTP-vs-HTTPS.png" alt="HTTP-vs-HTTPS"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>HTTP（HyperText Transfer Protocol：超文本传输协议）是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。</p><p>HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 HTTP 服务。</p><p>HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了 Web 浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。</p><p>HTTPS（Hypertext Transfer Protocol Secure：超文本传输安全协议）是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p><p>1、TCP 三次同步握手<br>2、客户端验证服务器数字证书<br>3、DH 算法协商对称加密算法的密钥、hash 算法的密钥<br>4、SSL 安全加密隧道协商完成<br>5、网页以加密的方式传输，用协商的对称加密算法和密钥加密，保证数据机密性；用协商的 hash 算法进行数据完整性保护，保证数据不被篡改。</p><blockquote><p>截至 2018 年 6 月，Alexa 排名前 100 万的网站中有 34.6% 使用 HTTPS 作为默认值，互联网 141387 个最受欢迎网站的 43.1% 具有安全实施的 HTTPS，以及 45% 的页面加载（透过 Firefox 纪录）使用 HTTPS。2017 年 3 月，中国注册域名总数的 0.11％使用 HTTPS。根据 Mozilla 统计，自 2017 年 1 月以来，超过一半的网站流量被加密。</p></blockquote><h3 id="HTTP-与-HTTPS-区别"><a href="#HTTP-与-HTTPS-区别" class="headerlink" title="HTTP 与 HTTPS 区别"></a>HTTP 与 HTTPS 区别</h3><ul><li>HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。</li><li>使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。</li><li>HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS 除了 TCP 的三个包，还- 要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。</li><li>http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</li><li>HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。</li></ul><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><p>在 TCP/IP 协议中，TCP 协议通过三次握手建立一个可靠的连接</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/05234233-eed6ddcba93c42be8847e98d6da62802.jpg" alt="TCP 三次握手"></p><ul><li>第一次握手：客户端尝试连接服务器，向服务器发送 syn 包（同步序列编号 Synchronize Sequence Numbers），syn=j，客户端进入 SYN_SEND 状态等待服务器确认</li><li>第二次握手：服务器接收客户端 syn 包并确认（ack=j+1），同时向客户端发送一个 SYN 包（syn=k），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态</li><li>第三次握手：第三次握手：客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK(ack=k+1），此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手</li></ul><p>简化：</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/dffdff.png" alt="简化-TCP三次握手"></p><h3 id="HTTPS-的工作原理"><a href="#HTTPS-的工作原理" class="headerlink" title="HTTPS 的工作原理"></a>HTTPS 的工作原理</h3><p>我们都知道 HTTPS 能够加密信息，以免敏感信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用 HTTPS 协议。</p><p><img src="https://www.runoob.com/wp-content/uploads/2018/09/https-intro.png" alt="HTTPS 的工作原理"></p><h4 id="1、客户端发起-HTTPS-请求"><a href="#1、客户端发起-HTTPS-请求" class="headerlink" title="1、客户端发起 HTTPS 请求"></a>1、客户端发起 HTTPS 请求</h4><p>这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。</p><h4 id="2、服务端的配置"><a href="#2、服务端的配置" class="headerlink" title="2、服务端的配置"></a>2、服务端的配置</h4><p>采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。</p><p>这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。</p><h4 id="3、传送证书"><a href="#3、传送证书" class="headerlink" title="3、传送证书"></a>3、传送证书</h4><p>这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。</p><h4 id="4、客户端解析证书"><a href="#4、客户端解析证书" class="headerlink" title="4、客户端解析证书"></a>4、客户端解析证书</h4><p>这部分工作是有客户端的 TLS 来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。</p><p>如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。</p><h4 id="5、传送加密信息"><a href="#5、传送加密信息" class="headerlink" title="5、传送加密信息"></a>5、传送加密信息</h4><p>这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。</p><h4 id="6、服务端解密信息"><a href="#6、服务端解密信息" class="headerlink" title="6、服务端解密信息"></a>6、服务端解密信息</h4><p>服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。</p><h4 id="7、传输加密后的信息"><a href="#7、传输加密后的信息" class="headerlink" title="7、传输加密后的信息"></a>7、传输加密后的信息</h4><p>这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。</p><h4 id="8、客户端解密信息"><a href="#8、客户端解密信息" class="headerlink" title="8、客户端解密信息"></a>8、客户端解密信息</h4><p>客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> HTTP 与 HTTPS 的区别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动实现AJAX</title>
      <link href="/2021/05/18/shou-dong-shi-xian-ajax/"/>
      <url>/2021/05/18/shou-dong-shi-xian-ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p><code>Ajax</code>在浏览器是通过<code>XMLHttpRequest</code>对象来实现数据传输的。</p><p><code>XMLHttpRequest</code>对象进行 HTTP 请求前必须通过 open 初始化，open 接受五个参数，分别为请求方法、请求链接、异步标识、账号和密码用以服务端验证。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">open</span><span class="token punctuation">(</span>Method<span class="token punctuation">,</span> URL<span class="token punctuation">,</span> Asynchronous<span class="token punctuation">,</span> UserName<span class="token punctuation">,</span> Password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在成功初始化请求之后，<code>XMLHttpRequest</code>对象的<code>setRequestHeader</code>方法可以用来设置请求头。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>调用<code>open()</code>方法后，就可以通过调用<code>send()</code>方法按照 open 方法设定的参数将请求进行发送。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">send</span><span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当<code>open</code>方法设定发送的方式为异步请求时，<code>onreadystatechange</code>事件监听器将自动在<code>XMLHttpRequest</code>对象的<code>readyState</code>属性改变时被触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当open方法被成功调用,readyState为1</span>  <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当send方法被调用，readyState属性被置为2</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTTP响应内容开始加载，readyState属性被置为3</span>  <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//HTTP响应内容结束加载，readyState属性被置为4</span><span class="token punctuation">}</span></code></pre><p>如果 XMLHttpRequest 对象的 readyState 属性还没有变成 4，<code>abort</code>可以终止请求。这个方法可以确保异步请求中的回调不被执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="ajax-的简单实现"><a href="#ajax-的简单实现" class="headerlink" title="ajax 的简单实现"></a>ajax 的简单实现</h5><p>由于浏览器的同源策略(协议 url 端口号 任一不同都算为跨域请求)，于是此代码需要打开百度的首页，在开发者工具的<code>Console</code>直接执行，在<code>Network</code>查看效果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明XMLHttpRequest //在IE5和IE6中需要使用ActiveX对象</span>  <span class="token keyword">var</span> XHR <span class="token operator">=</span> XMLHttpRequest<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建XMLHttqRequest</span>  XHR <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置请求状态改变时执行的函数</span>  XHR<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>XHR<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`响应状态:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>XHR<span class="token punctuation">.</span>status<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token string">"FINISH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//XHR.responseText为响应体</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 初始化请求参数</span>  XHR<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">async</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 发起请求</span>  XHR<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"A=1&amp;B=2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 手动实现AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async await</title>
      <link href="/2021/05/13/async-await/"/>
      <url>/2021/05/13/async-await/</url>
      
        <content type="html"><![CDATA[<h1 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h1><p><code>async</code>是<code>ES7</code>的与异步操作有关的关键字，其返回一个<code>Promise</code>对象，<code>await</code>操作符用于等待一个<code>Promise</code>对象,它只能在异步函数<code>async function</code>内部使用。<code>async/await</code>的目的是简化使用多个<code>promise</code>时的同步行为，并对一组<code>Promises</code>执行某些操作。正如<code>Promises</code>类似于结构化回调，<code>async/await</code>更像结合了<code>generators</code>和<code>promises</code>。</p><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">[</span>param<span class="token punctuation">[</span><span class="token punctuation">,</span> param<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span> param<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> statements <span class="token punctuation">}</span></code></pre><ul><li><code>name</code>: 函数名称。</li><li><code>param</code>: 要传递给函数的参数的名称。</li><li><code>statements</code>: 函数体语句。</li></ul><p><code>async</code>函数返回一个<code>Promise</code>对象，可以使用<code>then</code>方法添加回调函数，返回的<code>Promise</code>对象会运行执行<code>resolve</code>异步函数的返回结果，如果抛出异常则运行拒绝<code>reject</code>。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPromise</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncPromise</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p><code>async</code>一般是配合<code>await</code>指令使用的，该指令会暂停异步函数的执行，并等待<code>Promise</code>执行，然后继续执行异步函数，并返回结果。若<code>Promise</code>处理异常<code>rejected</code>，<code>await</code>表达式会把<code>Promise</code>的异常原因抛出。另外，如果<code>await</code>操作符后的表达式的值不是一个<code>Promise</code>，则返回该值本身。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> rand <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`solve </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 捕捉异常</span><span class="token keyword">function</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`reject`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 非promise对象直接返回该值本身</span><span class="token keyword">function</span> <span class="token function">notPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">notPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async/await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript  异步机制</title>
      <link href="/2021/05/12/javascript-yi-bu-ji-zhi/"/>
      <url>/2021/05/12/javascript-yi-bu-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="Js-异步机制"><a href="#Js-异步机制" class="headerlink" title="Js 异步机制"></a>Js 异步机制</h1><p><code>JavaScript</code>是一门单线程语言，所谓单线程，就是指一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。这种模式的好处是实现起来比较简单，执行环境相对单纯，坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应也就是假死状态，往往就是因为某一段<code>Javascript</code>代码长时间运行比如死循环，导致整个页面卡在这个地方，其他任务无法执行。</p><h2 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h2><p>为了解决上述问题，<code>Javascript</code>将任务的执行模式分为两种：同步<code>Synchronous</code>与异步<code>Asynchronous</code>，同步或非同步，表明着是否需要将整个流程按顺序地完成，阻塞或非阻塞，意味着你调用的函数会不会立刻告诉你结果。</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>同步模式就是同步阻塞，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"while 执行完毕我才能执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><p>异步执行就是非阻塞模式执行，每一个任务有一个或多个回调函数<code>callback</code>，前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。浏览器对于每个<code>Tab</code>只分配了一个<code>Js</code>线程，主要任务是与用户交互以及操作<code>DOM</code>等，而这也就决定它只能为单线程，否则会带来很复杂的同步问题，例如假定<code>JavaScript</code>同时有两个线程，一个线程在某个<code>DOM</code>节点上添加内容，另一个线程删除了这个节点，这时浏览器无法确定以哪个线程的操作为准。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我后执行"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意：W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms，此外这与浏览器设定、主线程以及任务队列也有关系，执行时间可能大于4ms，例如老版本的浏览器都将最短间隔设为10毫秒。另外，对于那些DOM的变动尤其是涉及页面重新渲染的部分，通常不会立即执行，而是每16毫秒执行一次。这时使用requestAnimationFrame()的效果要好于setTimeout()。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我先执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="异步机制"><a href="#异步机制" class="headerlink" title="异步机制"></a>异步机制</h2><p>首先来看一个例子，与上文一样来测试一个异步执行的操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我在很长时间之后才执行"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">3000000000</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"循环执行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本地测试，设置的<code>setTimeout</code>回调函数大约在<code>30s</code>之后才执行，远远大于<code>4ms</code>，我在主线程设置了一个非常大的循环来阻塞<code>Js</code>主线程，注意我并没有设置一个死循环，假如我在此处设置死循环来阻塞主线程，那么设置的<code>setTimeout</code>回调函数将永远不会执行，此外由于渲染线程与<code>JS</code>引擎线程是互斥的,<code>Js</code>线程在处理任务时渲染线程会被挂起，整个页面都将被阻塞，无法刷新甚至无法关闭，只能通过使用任务管理器结束<code>Tab</code>进程的方式关闭页面。<br><code>Js</code>实现异步是通过一个执行栈与一个任务队列来完成异步操作的，所有同步任务都是在主线程上执行的，形成执行栈，任务队列中存放各种事件回调（也可以称作消息），当执行栈中的任务处理完成后，主线程就开始读取任务队列中的任务并执行，不断往复循环。<br>例如上例中的<code>setTimeout</code>完成后的事件回调就存在任务队列中，这里需要说明的是浏览器定时计数器并不是由<code>JavaScript</code>引擎计数的，因为<code>JavaScript</code>引擎是单线程的，如果线程处于阻塞状态就会影响记计时的准确，计数是由浏览器线程进行计数的，当计数完毕，就将事件回调加入任务队列，同样<code>HTTP</code>请求在浏览器中也存在单独的线程，也是执行完毕后将事件回调置入任务队列。通过这个流程，就能够解释为什么上例中<code>setTimeout</code>的回调一直无法执行，是由于主线程也就是执行栈中的代码没有完成，不会去读取任务队列中的事件回调来执行，即使这个事件回调早已在任务队列中。</p><h3 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h3><p>主线程从任务队列中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为<code>Event Loop</code>，<code>Event Loop</code>是一个执行模型，在不同的地方有不同的实现，浏览器和<code>NodeJS</code>基于不同的技术实现了各自的<code>Event Loop</code>。浏览器的<code>Event Loop</code>是在<code>HTML5</code>的规范中明确定义，<code>NodeJS</code>的<code>Event Loop</code>是基于<code>libuv</code>实现的。<br>在浏览器中的<code>Event Loop</code>由执行栈<code>Execution Stack</code>、后台线程<code>Background Threads</code>、宏队列<code>Macrotask Queue</code>、微队列<code>Microtask Queue</code>组成。</p><ul><li>执行栈就是在主线程执行同步任务的数据结构，函数调用形成了一个由若干帧组成的栈。</li><li>后台线程就是浏览器实现对于<code>setTimeout</code>、<code>setInterval</code>、<code>XMLHttpRequest</code>等等的执行线程。</li><li>宏队列，一些异步任务的回调会依次进入宏队列，等待后续被调用，包括<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate(Node)</code>、<code>requestAnimationFrame</code>、<code>UI rendering</code>、<code>I/O</code>等操作</li><li>微队列，另一些异步任务的回调会依次进入微队列，等待后续调用，包括<code>Promise</code>、<code>process.nextTick(Node)</code>、<code>Object.observe</code>、<code>MutationObserver</code>等操作</li></ul><p>当<code>Js</code>执行时，进行如下流程</p><ol><li>首先将执行栈中代码同步执行，将这些代码中异步任务加入后台线程中</li><li>执行栈中的同步代码执行完毕后，执行栈清空，并开始扫描微队列</li><li>取出微队列队首任务，放入执行栈中执行，此时微队列是进行了出队操作</li><li>当执行栈执行完成后，继续出队微队列任务并执行，直到微队列任务全部执行完毕</li><li>最后一个微队列任务出队并进入执行栈后微队列中任务为空，当执行栈任务完成后，开始扫面微队列为空，继续扫描宏队列任务，宏队列出队，放入执行栈中执行，执行完毕后继续扫描微队列为空则扫描宏队列，出队执行</li><li>不断往复…</li></ol><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Step 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Step 2</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Step 3</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Step 4</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Step 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Step N</span><span class="token comment" spellcheck="true">// ...</span><span class="token comment" spellcheck="true">// Result</span><span class="token comment" spellcheck="true">/*  1  4  7  5  2  3  6*/</span></code></pre><h5 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 console</span><span class="token comment" spellcheck="true">// 微队列 []</span><span class="token comment" spellcheck="true">// 宏队列 []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><h5 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 setTimeout</span><span class="token comment" spellcheck="true">// 微队列 []</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout1]</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 Promise</span><span class="token comment" spellcheck="true">// 微队列 [then1]</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout1]</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 // Promise是个函数对象，此处是同步执行的 // 执行栈 Promise console</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 setTimeout</span><span class="token comment" spellcheck="true">// 微队列 [then1]</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout1 setTimeout2]</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 console</span><span class="token comment" spellcheck="true">// 微队列 [then1]</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout1 setTimeout2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span></code></pre><h5 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a>Step 6</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 then1</span><span class="token comment" spellcheck="true">// 微队列 []</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout1 setTimeout2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><h5 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 setTimeout1</span><span class="token comment" spellcheck="true">// 微队列 [then2]</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Step-8"><a href="#Step-8" class="headerlink" title="Step 8"></a>Step 8</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 then2</span><span class="token comment" spellcheck="true">// 微队列 []</span><span class="token comment" spellcheck="true">// 宏队列 [setTimeout2]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><h5 id="Step-9"><a href="#Step-9" class="headerlink" title="Step 9"></a>Step 9</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 执行栈 setTimeout2</span><span class="token comment" spellcheck="true">// 微队列 []</span><span class="token comment" spellcheck="true">// 宏队列 []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>答案在评论区哟</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/1a35857c78e5" target="_blank" rel="noopener">https://www.jianshu.com/p/1a35857c78e5</a></li><li><a href="https://segmentfault.com/a/1190000016278115" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016278115</a></li><li><a href="https://segmentfault.com/a/1190000012925872" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012925872</a></li><li><a href="https://www.cnblogs.com/sunidol/p/11301808.html" target="_blank" rel="noopener">https://www.cnblogs.com/sunidol/p/11301808.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/10/event-loop.html</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript异步机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖与节流</title>
      <link href="/2021/05/11/fang-dou-yu-jie-liu/"/>
      <url>/2021/05/11/fang-dou-yu-jie-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖与节流"><a href="#防抖与节流" class="headerlink" title="防抖与节流"></a>防抖与节流</h1><p>防抖<code>debounce</code>与节流<code>throttle</code>都是控制事件处理函数执行频率的方法，当函数会进行<code>DOM</code>操作或者具有请求服务器等行为并且作为高频事件例如<code>onscroll</code>触发的事件处理函数时，就需要进行事件处理函数执行频率的控制，否则会造成大量的资源浪费致使性能下降，当然无论是防抖与节流实质上并没有减少事件触发次数，而是通过减少事件处理函数的执行次数从而提高性能。</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><h3 id="非立即防抖"><a href="#非立即防抖" class="headerlink" title="非立即防抖"></a>非立即防抖</h3><p>当持续触发事件的时候，事件处理函数是完全不执行的，等最后一次触发结束的一段时间之后，再去执行。最常见的例子就是搜索建议功能，当用户进行持续输入时，并不会请求服务器进行搜索建议的计算，直至用户输入完成后的<code>N</code>毫秒后才会将数据传输至后端并返回搜索建议。<br>实现思路：每次触发事件时都取消之前的延时调用方法并重设定时器。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>wait<span class="token punctuation">,</span> funct<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">funct</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="立即防抖"><a href="#立即防抖" class="headerlink" title="立即防抖"></a>立即防抖</h3><p>当持续触发事件的时候，事件处理函数会立即执行，然后不再执行事件处理函数，直至最后一次事件触发之后的一段时间后才允许再次执行事件处理函数。<br>实现思路：判断是否存在定时器，没有则执行事件处理函数，然后无论是否已经存在定时器都需要重设定时器。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>wait<span class="token punctuation">,</span> funct<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token function">funct</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>当事件持续触发时，节流操作可以稀释事件处理函数执行频率，假设在<code>1s</code>内<code>onmousemove</code>事件触发了<code>100</code>次，通过节流就可以使得<code>onmousemove</code>事件的事件处理函数每<code>100ms</code>触发一次，也就是在<code>1s</code>内<code>onmousemove</code>事件的事件处理函数只执行<code>10</code>次。</p><h3 id="时间戳实现"><a href="#时间戳实现" class="headerlink" title="时间戳实现"></a>时间戳实现</h3><p>实现思路：通过时间戳记录上次事件处理函数执行时间，事件触发时若时间差大于执行周期则执行事件处理函数并赋值执行时间为当前时间戳。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>wait<span class="token punctuation">,</span> funct<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">></span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">funct</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      previous <span class="token operator">=</span> now<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="定时器实现"><a href="#定时器实现" class="headerlink" title="定时器实现"></a>定时器实现</h3><p>实现思路：判断是否存在定时器，没有则执行事件处理函数并重设定时器。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>wait<span class="token punctuation">,</span> funct<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">funct</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span>onscroll <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/566c66aafa22" target="_blank" rel="noopener">简书-节流防抖</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">github-防抖</a><br><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">github-节流</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防抖与节流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>总结</title>
      <link href="/2020/12/04/zongjie/"/>
      <url>/2020/12/04/zongjie/</url>
      
        <content type="html"><![CDATA[<h4 id="1、diff-算法和虚拟-DOM"><a href="#1、diff-算法和虚拟-DOM" class="headerlink" title="1、diff 算法和虚拟 DOM"></a>1、diff 算法和虚拟 DOM</h4><p>diff 算法特点:</p><ul><li>1、同级比较,不会跨级别比较时间复杂度为 O(n)</li><li>2、在 diff 比较的过程中,循环从两边向中间靠拢</li></ul><h5 id="第一步-vue-的虚拟-DOM-首先会对新老-VNode-的开始位置和结束位置进行标记"><a href="#第一步-vue-的虚拟-DOM-首先会对新老-VNode-的开始位置和结束位置进行标记" class="headerlink" title="第一步: vue 的虚拟 DOM 首先会对新老 VNode 的开始位置和结束位置进行标记"></a>第一步: vue 的虚拟 DOM 首先会对新老 VNode 的开始位置和结束位置进行标记</h5><h5 id="第二步-对新老节点的比较并对应移动-VNode-节点"><a href="#第二步-对新老节点的比较并对应移动-VNode-节点" class="headerlink" title="第二步: 对新老节点的比较并对应移动 VNode 节点"></a>第二步: 对新老节点的比较并对应移动 VNode 节点</h5><ul><li>情形一: 当新老 VNode 节点的 start 等于 sameVNode 时,直接使用 patchVnode 即可,同时新老 VNode 节点对的索引都加 1</li><li>情形二: 当新老 VNode 节点的 end 等于 sameVNode 时,同样直接使用 patchNode 即可,同时新老 VNode 节点的索引值都减 1</li><li>情形三: 当老 VNode 节点的 start 和新 VNode 的 end 满足 sameVnode 时候,数据更新后,oldStartVNode 跑到 oldEndVNode 后面去了,patchVnode 还要将当前真实 dom 节点移动到 oldEndVNode 后面,老 Vnode 节点索引加 1,新 Vnode 节点索引减 1</li><li>情形四: 当老 VNode 的 end 节点和新 VNode 节点的 start 满足 sameVNode 时,说明数据更新后 oldEndVnode 跑到 oldStartVnode 后面去了,patchVNode 后还要将当前真实 dom 移动到 oldStartVnode 后面,老 Vnode 节点索引减 1,新 Vnode 节点所以加 1</li></ul><p>如果都不满足以上四种情形，那说明没有相同的节点可以复用。</p><h5 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h5><p>当 while 循环结束后,根据新老节点的数目不同,分别进行相应的节点添加和删除.如果新节点的数目大于老节点,则需要把多出来的节点创建出来添加到真实 dom 中,如果老节点数目大于新节点数目,则需要把多出来的老节点从真实 dom 中删除</p><h4 id="2、导航路由钩子"><a href="#2、导航路由钩子" class="headerlink" title="2、导航路由钩子"></a>2、导航路由钩子</h4><p>1、全局路由钩子: beforeEach、afterEach、beforeResolve</p><p>2、单个路由钩子: beforeEnter</p><p>3、组件路由钩子: beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</p><h4 id="3、filter、watch-和-computed-的区别"><a href="#3、filter、watch-和-computed-的区别" class="headerlink" title="3、filter、watch 和 computed 的区别"></a>3、filter、watch 和 computed 的区别</h4><p>watch:监听值,只能是 data 里面的属性,可以使用异步函数<br>computed:定义一个函数,这个函数会返回一个值,然后返回处理的数据,可以包含大量逻辑计算,不支持异步函数<br>filter:过滤器<br>全局过滤器: vue.filter(‘toFixed’, (模型变量, 其他参数))<br>局部过滤器: vm 控制器里面</p><h4 id="4、指令及使用指令的钩子"><a href="#4、指令及使用指令的钩子" class="headerlink" title="4、指令及使用指令的钩子"></a>4、指令及使用指令的钩子</h4><p>全局指令</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 全局指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 局部指令</span>directive<span class="token punctuation">:</span> <span class="token punctuation">{</span>  focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用指令的钩子函数</span>bind 只调用一次<span class="token punctuation">,</span>第一次绑定元素时使用inserted 插入节点时使用update 节点更新时使用componentUpdated 指令所在的节点和其子节点更新时使用unbind 只调用一次<span class="token punctuation">,</span>指令与组件解绑时使用</code></pre><h4 id="5、上传组件包的方法"><a href="#5、上传组件包的方法" class="headerlink" title="5、上传组件包的方法"></a>5、上传组件包的方法</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> login 登录<span class="token function">npm</span> publish 发布</code></pre><h4 id="6、nginx-有哪些配置"><a href="#6、nginx-有哪些配置" class="headerlink" title="6、nginx 有哪些配置"></a>6、nginx 有哪些配置</h4><pre class=" language-javascript"><code class="language-javascript"> http <span class="token punctuation">{</span>    include mime<span class="token punctuation">.</span>types    default_type application<span class="token operator">/</span>octet<span class="token operator">-</span>stream    server <span class="token punctuation">{</span>        listen <span class="token number">80</span><span class="token punctuation">;</span>        server_name<span class="token punctuation">:</span> localhost<span class="token punctuation">;</span>        location <span class="token punctuation">{</span>          root html<span class="token punctuation">;</span>          index index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        error_page <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>        location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>          root html        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="7、-async-await-与-Promise-的关联"><a href="#7、-async-await-与-Promise-的关联" class="headerlink" title="7、@async @await 与 @Promise 的关联"></a>7、@async @await 与 @Promise 的关联</h4><ul><li>Promise 对象是一个代理对象 被代理的值在 Promise 对象创建时可能是未知的</li><li>async await 是 promise 的语法糖,只是为了书写代码时更流畅,增强代码可读性,定义了一个异步函数</li><li>await 必须出现在 async 函数内部 不能单独使用</li><li>await 返回的是一个 promise 对象</li><li>async await Reject 捕捉是用 try {} catch {}</li></ul><h4 id="8、-GET-POST-的区别"><a href="#8、-GET-POST-的区别" class="headerlink" title="8、@GET @POST 的区别"></a>8、@GET @POST 的区别</h4><ul><li>GET 请求有长度限制,而 POST 请求没有</li><li>GET 浏览器退回无害,POST 则会重新发起请求</li><li>GET 请求参数通过 URL 传递,POST 放在请求体中</li><li>GET 请求更不安全,因为参数暴露在 URL 上面</li><li>GET 产生一个 TCP 数据包 POST 产生 2 个 TCP 数据包</li><li>GET 请求 浏览器会把 http hdeader 和 data 一并发送出去，服务器响应 200, POST 请求 浏览器先发送 header，服务器响应 100 continue 浏览器在发送 data 服务器响应 200</li></ul><h4 id="9、nextTick-的原理"><a href="#9、nextTick-的原理" class="headerlink" title="9、nextTick 的原理"></a>9、nextTick 的原理</h4><p>在下次循环 DOM 更新后执行延迟回调,在修改数据后立即执行这个方法,获取更新后的 DOM</p><pre class=" language-javascript"><code class="language-javascript">callbacks<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 异步操作队列</span>pending<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 标识同一个时间只能执行一次</span>timerFunc<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行异步延迟函数</span><span class="token comment" spellcheck="true">// 把回调函数放入 callbacks中等待执行</span><span class="token comment" spellcheck="true">// 将执行函数放到宏任务或者微任务中</span><span class="token comment" spellcheck="true">// 事件循环到了宏任务或者微任务,执行函数依次执行callbacks中的函数</span></code></pre><h4 id="10、https-缓存策略"><a href="#10、https-缓存策略" class="headerlink" title="10、https 缓存策略"></a>10、https 缓存策略</h4><ul><li><p>强制缓存(cache-control) 放在请求头中<br>max-age<br>no-cache (不用本地缓存)<br>no-store (不用本地和服务器缓存)</p></li><li><p>协商缓存 (对比缓存) 依据服务端和客户端的资源标识符是否一样<br>Last Modified<br>Etag</p></li></ul><h4 id="11、事件循环"><a href="#11、事件循环" class="headerlink" title="11、事件循环"></a>11、事件循环</h4><h4 id="12、ProxyTable-原理"><a href="#12、ProxyTable-原理" class="headerlink" title="12、ProxyTable 原理"></a>12、ProxyTable 原理</h4><p>浏览器禁止跨域,但是服务器可以.npm run dev 运行了一个服务器,ProxyTable 实际上是将请求发送给自身服务器,然后在由服务器转发给后台服务器,做了一层代理,所以不会出现跨域问题</p><h4 id="13、webpack-热重载"><a href="#13、webpack-热重载" class="headerlink" title="13、webpack 热重载"></a>13、webpack 热重载</h4><p>webpack 的 Watch Mode 观察模式 自动编译 需要手动刷新浏览器</p><p>webpack-dev-server web 服务器相当于启用了一个 express+http 服务器+webpack-dev-middleware 自动编译+实时重新加载浏览器</p><p>webpack-dev-middleware</p><h4 id="14、scoped-原理"><a href="#14、scoped-原理" class="headerlink" title="14、scoped 原理"></a>14、scoped 原理</h4><p>vue 通过在 DOM 结构及 css 样式上添加唯一的标记,保证唯一,达到样式私有化,不会污染全局,主要是通过 Postcss 进行转换,Postcss 给左右 dom 元素添加了一个独一无二的动态属性,组件内部 dom</p><h4 id="15、常用的-es6-语法"><a href="#15、常用的-es6-语法" class="headerlink" title="15、常用的 es6 语法"></a>15、常用的 es6 语法</h4><p>Object.assign()<br>Object.entries()<br>Object.keys()<br>Object.values()</p><p>Array.from()<br>Array.of()</p><p>Symbol</p><p>Set()<br>Map()</p><h4 id="16、输入一个-url-请求到页面展示经历了哪些过程"><a href="#16、输入一个-url-请求到页面展示经历了哪些过程" class="headerlink" title="16、输入一个 url 请求到页面展示经历了哪些过程"></a>16、输入一个 url 请求到页面展示经历了哪些过程</h4><p>1、DNS 解析<br>2、TCP 连接<br>3、发送 HTTP 请求<br>4、服务器处理请求并返回 HTTP 报文<br>5、浏览器解析并渲染页面<br>6、连接结束</p><h4 id="17、for-和-forEach-的区别"><a href="#17、for-和-forEach-的区别" class="headerlink" title="17、for 和 forEach 的区别"></a>17、for 和 forEach 的区别</h4><p>for 循环可以中断循环 forEach 不可以中断</p><p>for 循环是一种循环机制,只是能通过它遍历数组</p><p>forEach 是负责遍历可迭代对象</p><p>性能比较 for &gt; forEach</p><h4 id="18-防抖和节流"><a href="#18-防抖和节流" class="headerlink" title="18 防抖和节流"></a>18 防抖和节流</h4><p>节流: n秒后只运行一次,n秒内重复触发,只有一次生效<br>防抖: n秒后执行该事件,n秒内重复触发,则重新计时</p>]]></content>
      
      
      <categories>
          
          <category> 未来 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue常见面试问题及解析(持续更新中····)</title>
      <link href="/2020/05/26/vue-xiang-guan-wen-ti-zong-jie/"/>
      <url>/2020/05/26/vue-xiang-guan-wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="1、如何理解-MVVM-原理"><a href="#1、如何理解-MVVM-原理" class="headerlink" title="1、如何理解 MVVM 原理"></a>1、如何理解 <code>MVVM</code> 原理</h3><p><img src="https://pic4.zhimg.com/50/v2-674094672da91f0db9ce80c113a2245b_hd.jpg" alt="MVVM"></p><ul><li><code>M</code>：<code>Model</code>，数据层对数据的处理；</li><li><code>V</code>：<code>View</code>，视图层，是 HMTL 显示页面；</li><li><code>VM</code>：<code>ViewModel</code>：业务逻辑层（一切 <code>JS</code> 可视为业务逻辑，比如表单按钮提交，自定义事件的注册和处理逻辑都在<code>ViewModel</code> 里面负责监听两边的数据）。</li></ul><h3 id="2、响应式数据的原理是什么"><a href="#2、响应式数据的原理是什么" class="headerlink" title="2、响应式数据的原理是什么"></a>2、响应式数据的原理是什么</h3><p>响应式的基本机制：</p><ul><li>通过 <code>Object.defineProperty()</code> 替换配置对象属性的 <code>set</code>、<code>get</code> 方法。</li><li><code>watcher</code> 在执行 <code>getter</code> 函数是触发 <code>get</code> 方法，从而建立依赖关系。</li><li>写入数据时触发 <code>set</code> 方法，从而借助 <code>dep</code> 发布通知，进而 <code>getter</code> 进行更新。</li></ul><p><img src="https://pic1.zhimg.com/80/v2-c2f361d5e2c79e8aa98126d3f1c65d28_720w.jpg" alt="Vue响应式"></p><h3 id="3、Vue中是如何检测数组和对象变化"><a href="#3、Vue中是如何检测数组和对象变化" class="headerlink" title="3、Vue中是如何检测数组和对象变化"></a>3、<code>Vue</code>中是如何检测数组和对象变化</h3><p>由于 <code>JavaScript</code> 的限制，<code>Vue</code> 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p><h4 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h4><ul><li>使用 <code>Vue.set(object, propertyName, value)</code> 方法向嵌套对象添加响应式 <code>property</code>。</li></ul><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>someObject<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>使用 <code>Vue.$set(this.someObject, propeytyName, value)</code> 实例方法，这也是全局 <code>Vue.set()</code> 的别名。</li></ul><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>someObject<span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>为已有对象赋值多个新的 <code>property</code>：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>someObject <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="对于数组"><a href="#对于数组" class="headerlink" title="对于数组"></a>对于数组</h4><p><code>Vue</code> 不能检测以下数组的变动：</p><ul><li>当你利用索引值直接设置一个数组项时： <code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组的长度时：<code>vm.item.length = newLength</code></li></ul><p>解决第一类问题：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>items<span class="token punctuation">,</span> indexOfItems<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>indexOfItems<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>解决第二类问题：</p><pre class=" language-javascript"><code class="language-javascript">vm<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、为何Vue采用异步渲染"><a href="#4、为何Vue采用异步渲染" class="headerlink" title="4、为何Vue采用异步渲染"></a>4、为何<code>Vue</code>采用异步渲染</h3><p>如果不采用异步渲染，那么每次数据更新都会对当前组件进行重写渲染，所以为了性能考虑，会在本轮数据更新后，再去异步更新视图。</p><p><img src="https://pic1.zhimg.com/80/v2-d5a37288b198bc49387f5c11a523b178_720w.jpg" alt="Vue异步更新"></p><h3 id="5、nextTick实现原理"><a href="#5、nextTick实现原理" class="headerlink" title="5、nextTick实现原理"></a>5、<code>nextTick</code>实现原理</h3><p><a href="https://juejin.im/post/5ea4ffcdf265da48062c9b61#heading-4" target="_blank" rel="noopener">源码解析</a><br><code>nextTick</code> 方法主要是使用了宏任务和微任务,定义了一个异步方法.多次调用 <code>nextTick</code> 会将方法存入队列中，通过这个异步方法清空当前队列。所以这个 <code>nextTick</code> 方法是异步方法。</p><p><img src="https://pic4.zhimg.com/80/v2-3c58bebe0a959bbf7f6abe3f0ad53dff_720w.jpg" alt="nextTick的实现"></p><h3 id="6、Vue组件的生命周期"><a href="#6、Vue组件的生命周期" class="headerlink" title="6、Vue组件的生命周期"></a>6、<code>Vue</code>组件的生命周期</h3><p><img src="https://pic2.zhimg.com/80/v2-a0f8836c35d149bb3a044a9fca1cda4d_720w.jpg" alt="Vue生命周期"></p><h3 id="7、Ajax-请求放在那个生命周期中"><a href="#7、Ajax-请求放在那个生命周期中" class="headerlink" title="7、Ajax 请求放在那个生命周期中"></a>7、<code>Ajax</code> 请求放在那个生命周期中</h3><p>在 <code>mounted</code> 生命周期中请求 <code>Ajax</code>，此时 <code>html</code> 已经渲染出来了，可以直接操作 <code>dom</code> 节点。</p><h3 id="8、何时需要使用beforeDestroy"><a href="#8、何时需要使用beforeDestroy" class="headerlink" title="8、何时需要使用beforeDestroy"></a>8、何时需要使用<code>beforeDestroy</code></h3><p>实例销毁之前调用。在这一步，实例仍然完全可用。<strong>该钩子在啊服务器渲染期间不被调用</strong>。</p><h3 id="9、Vue父子组件生命周期调用顺序"><a href="#9、Vue父子组件生命周期调用顺序" class="headerlink" title="9、Vue父子组件生命周期调用顺序"></a>9、<code>Vue</code>父子组件生命周期调用顺序</h3><ul><li>加载渲染过程</li></ul><pre class=" language-javascript"><code class="language-javascript">父beforeCreate <span class="token operator">-</span><span class="token operator">></span> 父create <span class="token operator">-</span><span class="token operator">></span> 父beforeMounted <span class="token operator">-</span><span class="token operator">></span> 子beforeCreate <span class="token operator">-</span><span class="token operator">></span> 子create <span class="token operator">-</span><span class="token operator">></span> 子mounted <span class="token operator">-</span><span class="token operator">></span> 父mounted</code></pre><ul><li>子组件更新过程</li></ul><pre class=" language-javascript"><code class="language-javascript">父beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 子beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 子updated <span class="token operator">-</span><span class="token operator">></span> 父updated</code></pre><ul><li>父组件更新过程</li></ul><pre class=" language-javascript"><code class="language-javascript">父beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 父updated</code></pre><p>销毁过程</p><pre class=" language-javascript"><code class="language-javascript">父beforeDestory <span class="token operator">-</span><span class="token operator">></span> 子beforeDestory <span class="token operator">-</span><span class="token operator">></span> 子destoryed <span class="token operator">-</span><span class="token operator">></span> 父destoryed</code></pre><h3 id="10、Vue中computed中的特点"><a href="#10、Vue中computed中的特点" class="headerlink" title="10、Vue中computed中的特点"></a>10、<code>Vue</code>中<code>computed</code>中的特点</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">-</span> 监控自己定义的变量，不用再 <span class="token template-string"><span class="token string">`data`</span></span> 里面声明，函数名就是变量名。<span class="token operator">-</span> 适合多个变量会对象处理后返回一个值。若这个多个变量只要有一个发生变化，结果都回变化。<span class="token operator">-</span> 计算的结果具有缓存、依赖响应式属性变化，响应式属性没有变化，直接从缓存中读取结果。<span class="token operator">-</span> 在函数内部调用的时候不用加 <span class="token template-string"><span class="token string">`()`</span></span>。<span class="token operator">-</span> 必须用 <span class="token template-string"><span class="token string">`return`</span></span> 返回。<span class="token operator">-</span> 不要在 <span class="token template-string"><span class="token string">`computed`</span></span> 中对 <span class="token template-string"><span class="token string">`data`</span></span> 中的数据进行赋值操作，这回形成一个死循环。</code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">-</span> 一个需要的结果受多个数据影响的时候，比如购物车结算的金额。<span class="token operator">-</span> 操作某个属性，执行一些复杂的逻辑，并在多处使用这个结果。<span class="token operator">-</span> 内部函数中多处要使用到这个结果的。</code></pre><h3 id="11、watch的用法及deep-true是如何实现的"><a href="#11、watch的用法及deep-true是如何实现的" class="headerlink" title="11、watch的用法及deep: true是如何实现的"></a>11、<code>watch</code>的用法及<code>deep: true</code>是如何实现的</h3><p><code>watch</code> 是一个侦听的动作，用来观察和响应 <code>Vue</code> 实例上的数据变动。</p><h4 id="handler-方法和-immediate-属性"><a href="#handler-方法和-immediate-属性" class="headerlink" title="handler 方法和 immediate 属性"></a><code>handler</code> 方法和 <code>immediate</code> 属性</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ fullName }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#demo"</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span>    fullName<span class="token punctuation">:</span> <span class="token string">"Foo Bar"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一次没有执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>初始化的时候，<code>watch</code> 是不会执行的。只要当 <code>firstName</code> 的值改变的时候才会执行监听计算。如果想再第一次被绑定的时候就执行，则需要这样修改：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#demo"</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    lastName<span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">,</span>    fullName<span class="token punctuation">:</span> <span class="token string">"Foo Bar"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一次执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> val <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 代表在 watch 里声明了 firstName 这个方法后，先去立即执行 handler 方法</span>    immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="deep-属性"><a href="#deep-属性" class="headerlink" title="deep 属性"></a>deep 属性</h4><p><code>deep</code> 属性的意思是深度监听，会在对象一层层往下遍历，在每一层上都加上监听器。默认为 <code>false</code>。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>obj.a: {{ obj.a }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>obj.a<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handler</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj,a changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>当我们在 <code>input</code> 输入框中输入数据改变 <code>obj.a</code> 的值时，我们发现在控制台没有打印出 <code>obj.a changed</code>。受现代 <code>Javascript</code> 的限制（以及废弃 <code>Object.observe</code> ）， <code>Vue</code> 不能检测到对象属性的添加或删除。 由于 <code>Vue</code> 会在初始化实例时对属性执行 <code>getter/setter</code> 转化过程，所以属性必须在 <code>data</code> 对象上存在才能让 Vue 转换它，才能让它是响应式的。<br>默认情况下， 在 <code>handler</code> 方法中 只监听 <code>obj</code> 这个属性它的引用的变化，我们只有给 <code>obj</code> 赋值的时候它才会监听到，比如我们在 mounted 事件钩子函数中对 <code>obj</code> 进行重新赋值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> '<span class="token number">123</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样 <code>handler</code> 就会执行了，且打印出了 <code>obj.a changed</code>。</p><p>但是如果需要监听 <code>obj</code> 里的属性的值呢？这时候， <code>deep</code> 属性就派上用场了。我们只需要加上 <code>deep: true</code>，就能深度监听 <code>obj</code> 里属性的值。</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj.a changded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    deep<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用 <code>deep</code> 属性会给每一层都加上监听器，性能开销可能就会非常大了。可以使用字符串的形式来优化：</p><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'obj.a'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"obj.a changde"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    immediate<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// deep: true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>直到遇到 <code>obj.a</code> 属性，才会给该属性设置监听 d 函数，提高性能。</p><h3 id="12、Vue中事件绑定的原理"><a href="#12、Vue中事件绑定的原理" class="headerlink" title="12、Vue中事件绑定的原理"></a>12、<code>Vue</code>中事件绑定的原理</h3><h3 id="13、Vue中v-html回导致哪些问题"><a href="#13、Vue中v-html回导致哪些问题" class="headerlink" title="13、Vue中v-html回导致哪些问题"></a>13、<code>Vue</code>中<code>v-html</code>回导致哪些问题</h3><ul><li><code>v-html</code> 更新的元素是 <code>innerHTML</code>，内容按普通<code>HTML</code>插入，不会作为<code>Vue</code>模版进行编译。在网站上动态渲染 <code>HTML</code> 是非常危险的，因为容易导致<code>XSS</code>攻击。只在可信的内容上使用<code>v-html</code>，不用在用户提交的的内容上。</li></ul><ul><li>在单文件组件里，<code>scoped</code> 的样式不会应用在 <code>v-html</code> 内部，因为那部分 <code>HTML</code> 没有被 <code>Vue</code> 的模板编译器处理。如果你希望针对 <code>v-html</code> 的内容设置带作用域的 <code>CSS</code>，你可以替换为 <code>CSS Modules</code> 或用一个额外的全局。</li></ul><p>第二个问题的解决方案：<br>第一种解决方案，照样使用 <code>scoped</code>，但是我们可以使用深度选择器 (<code>&gt;&gt;&gt;</code>)，示例如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.a</span> >>> <span class="token class">.b</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*  ...  */</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>以上代码最终会被编译为：</p><pre class=" language-html"><code class="language-html">.a[data-v-f3f3eg9] .b { /* ... */ }</code></pre><p>如果你的 <code>vue</code> 项目使用 <code>less</code> 或 <code>sass</code> 的时候，<code>&gt;&gt;&gt;</code> 可能会失效，我们可以用 <code>/deep/</code> 来代替，代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>a <span class="token punctuation">{</span>  <span class="token regex">/deep/</span> <span class="token punctuation">.</span>b <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*    ...    */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二种解决方案，单文件组件 <code>style</code> 标签可以使用多次，可以一个 <code>style</code> 标签带 <code>scoped</code> 属性针对当前组件，另外一个 <code>style</code> 标签针对全局生效，但是内部我们采用特殊的命名规则即可，例如 <code>BEM</code> 规则。</p><h3 id="14、Vue中v-if和v-show的区别"><a href="#14、Vue中v-if和v-show的区别" class="headerlink" title="14、Vue中v-if和v-show的区别"></a>14、<code>Vue</code>中<code>v-if</code>和<code>v-show</code>的区别</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token string">`v-if`</span></span> 是真正的条件渲染，因为它会确保在切换的过程中，条件块中的事件监听器和子组件适当的被销毁和重建。<span class="token template-string"><span class="token string">`v-if`</span></span> 也是惰性的：如果在初始渲染条件为假，则直到第一次变为真时，才会开始渲染条件块。<span class="token template-string"><span class="token string">`v-show`</span></span> 不管初始条件是什么，元素总是回被渲染，并且只是简单基于 <span class="token template-string"><span class="token string">`CSS`</span></span> 进行切换。如果需要非常频繁的切换，用<span class="token template-string"><span class="token string">`v-show`</span></span> 较好；如果在运行时条件不太可能改变，则使用<span class="token template-string"><span class="token string">`v-if`</span></span>较好。</code></pre><h3 id="15、为什么v-for和v-if不能连用"><a href="#15、为什么v-for和v-if不能连用" class="headerlink" title="15、为什么v-for和v-if不能连用"></a>15、为什么<code>v-for</code>和<code>v-if</code>不能连用</h3><p><code>v-for</code> 和 <code>v-if</code> 不应该一起使用，必要情况下应该替换成 <code>computed</code> 属性。<br>原因：<code>v-for</code> 比 <code>v-if</code> 优先，如果每一次都要遍历整个数组，将会影响速度。尤其是当之需要渲染一小部分的时候。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user in users<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.isActive<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ user.name }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>如上情况，即使 100 个<code>user</code>中只需要使用一个数据，也会循环整个数组。</p><p>正确的做法：</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  activeUsers<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> user<span class="token punctuation">.</span>isActive<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user in activeUsers<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user.id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ user.name }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h3 id="16、v-model中的实现原理及如何自定义v-model"><a href="#16、v-model中的实现原理及如何自定义v-model" class="headerlink" title="16、v-model中的实现原理及如何自定义v-model"></a>16、<code>v-model</code>中的实现原理及如何自定义<code>v-model</code></h3><h3 id="17、组件中的data为什么是一个函数"><a href="#17、组件中的data为什么是一个函数" class="headerlink" title="17、组件中的data为什么是一个函数"></a>17、组件中的<code>data</code>为什么是一个函数</h3><p>当一个组件被定义，<code>data</code> 必须声明返回为一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 <code>data</code> 是一个纯粹的对象，则所引用的实例将共享引用同一个数据对象。通过提供 <code>data</code> 函数，每次创建一个新实例后，我们能够调用 <code>data</code> 函数，从而返回初始数据的一个全新副本数据对象。</p><p>我们假设 <code>data</code> 是一个对象，因为组件是可以被复用的，注册了一个组件本质上就是创建了一个组件构造器的引用，而真正当我们使用组件的时候才会去将组件实例化。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Component<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用组件</span><span class="token keyword">const</span> componentA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> componentB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>componentA<span class="token punctuation">.</span>data<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>conponentB<span class="token punctuation">.</span>data<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>当修改一个属性的时候， <code>data</code> 也会发生改变，这明显不是我们想要的结果。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Component<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> componentA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> componentB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>componentA<span class="token punctuation">.</span>data<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>componentB<span class="token punctuation">.</span>data<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>当 <code>data</code> 是一个函数的时候，每一个实例的 <code>data</code> 属性都是独立的，不会相互影响。 <code>JavaScript</code> 本身的面向对象编程也是基于原型链和构造函数，应该会注意到原型链上添加一般都是一个函数方法而不是一个对象了。</p><h3 id="18、Vue组件如何让通信-常见"><a href="#18、Vue组件如何让通信-常见" class="headerlink" title="18、Vue组件如何让通信(常见)"></a>18、<code>Vue</code>组件如何让通信(常见)</h3><h4 id="方法一、-props-emit"><a href="#方法一、-props-emit" class="headerlink" title="方法一、 props / $emit"></a>方法一、 <code>props</code> / <code>$emit</code></h4><h5 id="1、父组件向子组件传值"><a href="#1、父组件向子组件传值" class="headerlink" title="1、父组件向子组件传值"></a>1、父组件向子组件传值</h5><p>我们提供一个例子，来说明父组件如何向子组件传值：在子组件 <code>User.vue</code> 中如何获取父组件 <code>App.vue</code> 中的数据：<code>users: [&quot;Henry&quot;, &quot;Bucky&quot;, &quot;Emily&quot;]</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// App.vue 父组件</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>users <span class="token punctuation">:</span>users<span class="token operator">=</span><span class="token string">"users"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>users<span class="token operator">></span> <span class="token comment" spellcheck="true">// 前者自定义名称便于子组件调用，后者要传递数据名</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Users <span class="token keyword">from</span> <span class="token string">"./components/Users"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      users<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Henry"</span><span class="token punctuation">,</span> <span class="token string">"Bucky"</span><span class="token punctuation">,</span> <span class="token string">"Emily"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"users"</span><span class="token punctuation">:</span> Users  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 子组件 Users.vue</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"users"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"user in users"</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> user <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span> <span class="token comment" spellcheck="true">// 遍历传递过来的值，然后呈现到页面</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Users"</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    users<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>      required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      dafault<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>父组件通过 <code>props</code> 向下传递数据给子组件。注：组件中的数据共有三种数据形式： <code>data</code>、 <code>props</code>、 <code>computed</code>。</p><h5 id="2、子组件向父组件传值"><a href="#2、子组件向父组件传值" class="headerlink" title="2、子组件向父组件传值"></a>2、子组件向父组件传值</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 子组件</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeTitle"</span> <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  nanne<span class="token punctuation">:</span> <span class="token string">"app-header"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">"Vue.js Demo"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">changeTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"titleChanged"</span><span class="token punctuation">,</span> <span class="token string">"子向父组件传值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 自定义事件 传递值：子向父组件传值</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 父组件</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>app<span class="token operator">-</span>header @titleChanged<span class="token operator">=</span><span class="token string">"updateTitle"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>app<span class="token operator">-</span>header<span class="token operator">></span> <span class="token comment" spellcheck="true">// 与子组件 titleChanged 自定义事件保持一致</span>    <span class="token comment" spellcheck="true">// updateTitle($event) 接受传递过来的文字</span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Header <span class="token keyword">from</span> <span class="token string">'./components/header'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'传递的是一个值'</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"app-header"</span><span class="token punctuation">:</span> Header  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateTitle</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>总之，子组件通过 <code>event</code> 给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。</p><h4 id="方法二、-emit-on"><a href="#方法二、-emit-on" class="headerlink" title="方法二、 $emit / $on"></a>方法二、 <code>$emit</code> / <code>$on</code></h4><p>通过一个空的 <code>Vue</code> 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，巧妙而轻量的实现了任何组件间的通信。包括父子、兄弟、跨级。当我们的项目比较大时，可以选择更好的状态管理解决方案 <code>vuex</code>。</p><h5 id="1、具体实现方式"><a href="#1、具体实现方式" class="headerlink" title="1、具体实现方式"></a>1、具体实现方式</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> GlobalBusEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>GlobalBusEvent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>事件名<span class="token punctuation">,</span> 数据<span class="token punctuation">)</span><span class="token punctuation">;</span>GlobalBusEvent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>事件名<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2、具体例子"><a href="#2、具体例子" class="headerlink" title="2、具体例子"></a>2、具体例子</h5><p>假设兄弟组件有三个，分别是 <code>A</code>, <code>B</code>, <code>C</code> 组件， <code>C</code> 组件如何获取 <code>A</code> 或者 <code>B</code> 组件的数据。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"itany"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>my<span class="token operator">-</span>b<span class="token operator">></span><span class="token operator">&lt;</span>my<span class="token operator">-</span>a<span class="token operator">></span>  <span class="token operator">&lt;</span>my<span class="token operator">-</span>b<span class="token operator">></span><span class="token operator">&lt;</span>my<span class="token operator">-</span>b<span class="token operator">></span>  <span class="token operator">&lt;</span>my<span class="token operator">-</span>c<span class="token operator">></span><span class="token operator">&lt;</span>my<span class="token operator">-</span>c<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>template id <span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>A组件： <span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"send"</span> <span class="token operator">></span>A组件 将数据发送给C组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>template id <span class="token operator">=</span><span class="token string">"b"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>A组件： <span class="token punctuation">{</span><span class="token punctuation">{</span> age <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"send"</span> <span class="token operator">></span>B组件 将数据发送给C组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"c"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h3<span class="token operator">></span>C组件：<span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> age <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义一个空的 Vue 实例</span><span class="token keyword">const</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"#a"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"tom"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Event<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"data-a"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> B <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"#b"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      age<span class="token punctuation">:</span> <span class="token number">20</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Event<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"data-b"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> C <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"#c"</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在模版编译完成后执行</span>    Event<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"data-a"</span><span class="token punctuation">,</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 箭头函数内部不会产生l新的 this，这边如果不用 =>，this 指代 Event</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Event<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"data-b"</span><span class="token punctuation">,</span> age <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#itany"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"my-a"</span><span class="token punctuation">:</span> A<span class="token punctuation">,</span>    <span class="token string">"my-b"</span><span class="token punctuation">:</span> B<span class="token punctuation">,</span>    <span class="token string">"my-c"</span><span class="token punctuation">:</span> C  <span class="token punctuation">}</span>ßß<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><code>$on</code> 监听了自定义事件 <code>data-a</code>、<code>data-b</code>，因为有时不确定何时会触发事件，一般会在 <code>mounted</code> 或 <code>created</code> 钩子中来监听。</p><h4 id="方法三、vuex"><a href="#方法三、vuex" class="headerlink" title="方法三、vuex"></a>方法三、<code>vuex</code></h4><h5 id="1-简要介绍-Vuex-原理"><a href="#1-简要介绍-Vuex-原理" class="headerlink" title="1.简要介绍 Vuex 原理"></a>1.简要介绍 <code>Vuex</code> 原理</h5><p><code>Vuex</code> 实现了一个单项数据流，在全局拥有一个 <code>State</code> 存放数据，当组件要更改 <code>State</code> 中当数据时，必须通过 <code>Mutation</code> 进行， <code>Mutation</code> 同时提供了订阅者模式供外部插件调用获取 <code>State</code> 数据的更新。而当所有异步操作（常见于调用后端接口异步获取更新数据）或批量的同步操作需要走 <code>Action</code>，但 <code>Action</code> 也是无法直接修改 <code>State</code> 的，还是需要提供 <code>Mutation</code> 来修改 <code>State</code> 的数据。最后，根据 <code>State</code> 的变化，渲染到视图上。</p><h5 id="2-简要介绍各模块在流程中的功能"><a href="#2-简要介绍各模块在流程中的功能" class="headerlink" title="2. 简要介绍各模块在流程中的功能"></a>2. 简要介绍各模块在流程中的功能</h5><ul><li><p><code>Vue Components</code>：<strong><code>Vue</code> 组件</strong>。<code>HTML</code> 页面上，负责收集用户操作等交互行为，执行 <code>dispatch</code> 方法触发对应 <code>action</code> 进行回应。</p></li><li><p><code>dispatch</code>：<strong>操作行为触发方法</strong>，是唯一能执行 <code>action</code> 的行为。</p></li><li><p><code>actions</code>：<strong>操作行为处理模块，由组件中的 <code>$store.dispatch(&#39;action名称&#39;, detail)</code> 来触发。然后由 <code>commit()</code> 来触发 <code>mutation</code> 的调用，间接更新 <code>state</code></strong>。负责处理 <code>Vue Components</code> 接收到到所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台 <code>API</code>请求的操作就在这个模块中进行，包括触发其他 <code>action</code> 以及提交 <code>mutation</code> 的操作。该模块提供了 <code>Promise</code> 的封装，以支持 <code>action</code> 的链式触发。</p></li><li><p><code>commit</code>：<strong>状态改变提交操作方法</strong>，对 <code>mutation</code> 进行提交，是唯一能执行 <code>mutation</code> 的方法。</p></li><li><p><code>mutations</code>：<strong>状态改变操作方法</strong>，由 <code>actions</code> 中的 <code>commit(&#39;mutation 名称&#39;)</code> 来触发。是 <code>Vuex</code> 修改 <code>state</code> 的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些 <code>hook</code> 暴露出来，以进行 <code>state</code> 的监控等。</p></li><li><p><code>state</code>：<strong>页面状态管理容器对象</strong>。集中存储 <code>Vue components</code> 中 <code>data</code> 对象的零散数据，全局唯一，以进行统一的状态管理。 页面显示所需的数据从该对象中进行读取，利用 <code>Vue</code> 的细粒度数据响应机制来进行高效的状态更新。</p></li><li><p><code>getters</code>：<strong><code>state</code> 对象的读取方法</strong>。<code>Vue Components</code> 通过该方法读取全局 <code>state</code> 对象。</p></li></ul><h5 id="3-Vuex-与-localStorage"><a href="#3-Vuex-与-localStorage" class="headerlink" title="3. Vuex 与 localStorage"></a>3. <code>Vuex</code> 与 <code>localStorage</code></h5><p><code>vuex</code> 是 <code>vue</code> 的状态管理工具，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，具体做法应该在 <code>vuex</code> 里数据改变的时候把数据拷贝一份保存到 <code>localStorage</code> 里面，刷新之后，如果 <code>localStorage</code> 里有保存的数据，取出来再替换 <code>store</code> 里的 <code>state</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> defaultCity <span class="token operator">=</span> <span class="token string">"上海"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>defaultCity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    defaultCity <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"defaultCity"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>      city<span class="token punctuation">:</span> defaultCity<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">changeCity</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> city<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span>city <span class="token operator">=</span> city<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>            <span class="token string">"defaultCity"</span><span class="token punctuation">,</span>            JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>city<span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里需要注意的是：由于 <code>vuex</code> 里，我们保存的状态都是数组，而 <code>localStorage</code> 只支持字符串，所以需要用 <code>JSON</code> 转换：</p><pre class=" language-javascript"><code class="language-javascript">JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>subscribeList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// array -> string</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"subscribeList"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="19、什么是作用域插槽"><a href="#19、什么是作用域插槽" class="headerlink" title="19、什么是作用域插槽"></a>19、什么是作用域插槽</h3><h3 id="20、用vnode来描述一个数据结构"><a href="#20、用vnode来描述一个数据结构" class="headerlink" title="20、用vnode来描述一个数据结构"></a>20、用<code>vnode</code>来描述一个数据结构</h3><h3 id="21、diff算法的时间复杂度"><a href="#21、diff算法的时间复杂度" class="headerlink" title="21、diff算法的时间复杂度"></a>21、<code>diff</code>算法的时间复杂度</h3><h3 id="22、简述Vue中diff算法原理"><a href="#22、简述Vue中diff算法原理" class="headerlink" title="22、简述Vue中diff算法原理"></a>22、简述<code>Vue</code>中<code>diff</code>算法原理</h3><h3 id="23、v-for中为什么要用key"><a href="#23、v-for中为什么要用key" class="headerlink" title="23、v-for中为什么要用key"></a>23、<code>v-for</code>中为什么要用<code>key</code></h3><p><code>key</code> 的特殊 <code>attribute</code> 主要用在 <code>Vue</code> 的虚拟<code>DOM</code> 算法，在新旧 <code>nodes</code> 对比时辨识 <code>VNodes</code>。如果不使用 <code>key</code>，<code>Vue</code> 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 <code>key</code> 时，它会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 <code>key</code> 不存在的元素。<br>有相同父元素的子元素必须有独特的 <code>key</code>。重复的 <code>key</code> 会造成渲染错误。</p><h3 id="24、描述组件渲染和更新过程"><a href="#24、描述组件渲染和更新过程" class="headerlink" title="24、描述组件渲染和更新过程"></a>24、描述组件渲染和更新过程</h3><h3 id="25、Vue中模版编译原理"><a href="#25、Vue中模版编译原理" class="headerlink" title="25、Vue中模版编译原理"></a>25、<code>Vue</code>中模版编译原理</h3><h3 id="26、Vue中常见性能优化"><a href="#26、Vue中常见性能优化" class="headerlink" title="26、Vue中常见性能优化"></a>26、<code>Vue</code>中常见性能优化</h3><h3 id="27、Vue中相同逻辑如何抽离"><a href="#27、Vue中相同逻辑如何抽离" class="headerlink" title="27、Vue中相同逻辑如何抽离"></a>27、<code>Vue</code>中相同逻辑如何抽离</h3><h3 id="28、问什么要使用异步组件"><a href="#28、问什么要使用异步组件" class="headerlink" title="28、问什么要使用异步组件"></a>28、问什么要使用异步组件</h3><h3 id="29、谈谈你对keep-alive的了解"><a href="#29、谈谈你对keep-alive的了解" class="headerlink" title="29、谈谈你对keep-alive的了解"></a>29、谈谈你对<code>keep-alive</code>的了解</h3><h3 id="30、实现hash路由和history路由"><a href="#30、实现hash路由和history路由" class="headerlink" title="30、实现hash路由和history路由"></a>30、实现<code>hash</code>路由和<code>history</code>路由</h3><h3 id="31、Vue-Router中导航守卫有哪些"><a href="#31、Vue-Router中导航守卫有哪些" class="headerlink" title="31、Vue-Router中导航守卫有哪些"></a>31、<code>Vue-Router</code>中导航守卫有哪些</h3><h3 id="32、action和mutation的区别"><a href="#32、action和mutation的区别" class="headerlink" title="32、action和mutation的区别"></a>32、<code>action</code>和<code>mutation</code>的区别</h3><h3 id="33、简述Vuex工作原理"><a href="#33、简述Vuex工作原理" class="headerlink" title="33、简述Vuex工作原理"></a>33、简述<code>Vuex</code>工作原理</h3><h3 id="34、Vue3-0有哪些改进"><a href="#34、Vue3-0有哪些改进" class="headerlink" title="34、Vue3.0有哪些改进"></a>34、<code>Vue3.0</code>有哪些改进</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高频面试题</title>
      <link href="/2020/05/11/gao-pin-mian-shi-ti/"/>
      <url>/2020/05/11/gao-pin-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="高频面试题"><a href="#高频面试题" class="headerlink" title="高频面试题"></a>高频面试题</h3><p>[TOC]</p><h3 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><h4 id="1、你都做过哪些兼容性问题？"><a href="#1、你都做过哪些兼容性问题？" class="headerlink" title="1、你都做过哪些兼容性问题？"></a>1、你都做过哪些兼容性问题？</h4><p><strong>HTML 兼容性：</strong></p><p>h5 新标签只能兼容到 ie9，如果想要兼容 ie 低版本浏览器，需要引入 html5shiv.js 文件，其 cdn 写法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p><strong>CSS 兼容性：</strong></p><p>1.1、媒体查询兼容性，ie9 以下不支持媒体查询，需要引入 response.js 文件，其 cdn 写法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>1.2、CSS Hack：</p><p>1.2.1、属性前缀：例如 IE6 能识别下划线和星号，IE7 能识别星号，但不能识别下划线，IE6~IE10 都认识”\9”，但 firefox 前述三个都不能认识。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>red <span class="token punctuation">{</span> _color<span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ie6 */</span> <span class="token operator">*</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ie7 */</span> color<span class="token punctuation">:</span> red\<span class="token number">9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ie8/9/10 */</span><span class="token punctuation">}</span></code></pre><p>1.2.2、选择器前缀：例如 IE6 能识别 <em>html .class{}，IE7 能识别 +html .class{}或者</em>:first-child+html .class{}。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token punctuation">.</span>red <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* ie6 */</span><span class="token operator">+</span><span class="token punctuation">.</span>red <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/* ie7 */</span></code></pre><p>1.2.3、条件注释：</p><p>针对所有 IE(注：IE10+已经不再支持条件注释)：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">[</span><span class="token keyword">if</span> IE<span class="token punctuation">]</span><span class="token operator">></span>IE浏览器显示的内容 <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>endif<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">></span></code></pre><p>针对 IE6 及以下版本：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token punctuation">[</span><span class="token keyword">if</span> lt IE <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">></span>只在IE6<span class="token operator">-</span>显示的内容 <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>endif<span class="token punctuation">]</span><span class="token operator">--</span><span class="token operator">></span></code></pre><p>这类 Hack 不仅对 CSS 生效，对写在判断语句里面的所有代码都会生效。</p><p>1.3、厂商前缀：谷歌-webkit-、火狐-moz-、IE-ms-、欧朋-o-</p><p>1.4、其它兼容性：</p><p>1.4.1、ie 老版本浮动造成的双边距问题：display:inline;</p><p>1.4.2、图片间隙：父盒子设置 font-size: 0; 或者图片设置 display: block;</p><p>1.4.3、块元素默认高度：overflow: hidden;</p><p><strong>JavaScript 兼容性：</strong>一般使用渐进增强和优雅降级的方式来解决兼容性问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 优雅降级</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 渐进增强</span><span class="token comment" spellcheck="true">// 前边实现上传文件的基本功能</span><span class="token comment" spellcheck="true">// 后边再判断如果支持拖拽事件，就实现拖拽上传</span></code></pre><hr><h4 id="2、如何提高页面性能？"><a href="#2、如何提高页面性能？" class="headerlink" title="2、如何提高页面性能？"></a>2、如何提高页面性能？</h4><p>2.1、图片压缩、合并（精灵图）、使用字体图标代替小图片、使用 base64、图片懒加载</p><p>2.2、css、js 的压缩、封装复用</p><p>2.3、减少重排操作，例如使用 transform 书写动画效果，在 for 循环结束后再去操作 dom 等</p><p>2.3、使用 CDN 网络托管</p><p>2.4、数据懒加载、数据按需加载（上拉加载）、分页</p><p>2.5、路由懒加载</p><p>2.6、利用缓存来缓存文件</p><p>2.7、频繁触发的事件进行防抖和节流</p><p>2.8、异步加载</p><p>2.9、减少闭包，递归优化，使用高效的算法</p><p>2.10、webpack 优化：去除无用代码 treeShaking、组件按需加载、使用 chunck、模板预编译等</p><p>2.11、字库用 gb2312 不要 utf-8，一个汉字少一个字节</p><hr><h4 id="3、谈谈你对-H5-的理解？"><a href="#3、谈谈你对-H5-的理解？" class="headerlink" title="3、谈谈你对 H5 的理解？"></a>3、谈谈你对 H5 的理解？</h4><p>Html5 是 Web 中核心语言 HTML 的规范，是 HyperText Markup Language 5 的缩写，H5 提供新的标签元素，使代码变的更有语义；提供了大量 api，如本地存储、离线存储、webworker、websocket、filereader、地理定位、拖拽等；提供了更加酷炫的 CSS3 新特性，如过渡、变形、动画、阴影、渐变等。</p><hr><h4 id="4、浏览器从输入网址都看到网页都发生了什么？"><a href="#4、浏览器从输入网址都看到网页都发生了什么？" class="headerlink" title="4、浏览器从输入网址都看到网页都发生了什么？"></a>4、浏览器从输入网址都看到网页都发生了什么？</h4><p>4.1、域名解析成 ip 地址</p><p>4.2、客户端发送一个带有 SYN 标志的数据包给服务端（三次握手，第一次）</p><p>4.3、服务端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息（三次握手，第二次）</p><p>4.4、客户端再回传一个带 ACK 标志的数据包，代表握手结束，连接成功（三次握手，第三次）</p><p>4.5、服务端处理数据并返回数据</p><p>4.6、客户端请求关闭连接（四次挥手，第一次）</p><p>4.7、服务端确认是否还有数据要传输（四次挥手，第二次）</p><p>4.8、服务端没有要传输的数据了，准备关闭连接（四次挥手，第三次）</p><p>4.9、客户端断开连接（四次挥手，第四次）</p><p>4.10、浏览器解析 HTML，生成 DOM 树，解析 CSS，生成 CSS 规则树</p><p>4.11、DOM 树和 CSS 规则树合并成渲染树，开始渲染</p><p>4.12、执行 JavaScript 脚本</p><hr><h4 id="5、重绘和重排？"><a href="#5、重绘和重排？" class="headerlink" title="5、重绘和重排？"></a>5、重绘和重排？</h4><p>重排也叫回流，当元素因为规模尺寸，布局，隐藏等改变而需要重新构建时则成为重排。</p><p>重绘：一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局则叫重绘。</p><p>重绘不一定重排，但是重排一定重绘。</p><hr><h4 id="6、缓存？"><a href="#6、缓存？" class="headerlink" title="6、缓存？"></a>6、缓存？</h4><p>6.1、浏览器缓存：就是把一个已经请求过的资源拷贝一份存储起来，当下次需要该资源时， 浏览器会根据缓存机制决定直接使用缓存资源还是再次向服务器发送请求。分为：</p><p>强制缓存：请求头设置 cache-control：</p><p>​ max-age 缓存的时间</p><p>​ no-cache：不使用本地缓存。需要使用缓存协商，先与服务器确认返回的响应是否被更改，如果之前的响应中存在 ETag，那么请求的时候会与服务端验证，如果资源未被更改，则可以避免重新下载。</p><p>​ no-store：直接禁止浏览器缓存数据，每次用户请求该资源，都会向服务器发送一个请求，每次都会下载完整的资源。</p><p>​ public：可以被所有的用户缓存，包括终端用户和 CDN 等中间代理服务器。</p><p>​ private：只能被终端用户的浏览器缓存，不允许 CDN 等中继缓存服务器对其缓存。</p><p>协商缓存：请求头设置 last-modified/etag</p><p>1.Etag 要优于 Last-Modified。Last-Modified 的时间单位是秒，如果某个文件在 1 秒内改变了多次，那么他们的 Last-Modified 其实并没有体现出来修改，但是 Etag 每次都会改变确保了精度；</p><p>2.在性能上，Etag 要逊于 Last-Modified，毕竟 Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出一个 hash 值；</p><p>3.在优先级上，服务器校验优先考虑 Etag。</p><table><thead><tr><th></th><th>获取资源形式</th><th>状态码</th><th>发送请求到服务器</th></tr></thead><tbody><tr><td>强缓存</td><td>从缓存取</td><td>200（fromcache）</td><td>否，直接从缓存取</td></tr><tr><td>协商缓存</td><td>从缓存取</td><td>304（notmodified）</td><td>是，通过服务器来告知缓存是否可用</td></tr></tbody></table><p><img src="F:\offcn\course\第6阶段视频\第6-8天-面试题\offcn\高频面试题\4.png" alt="image-20210416160030758"></p><p>6.2、H5 缓存：</p><p>本地存储：localStorage 永久存储、sessionStorage 临时存储</p><p>离线缓存：在 html 标签上设置 manifest 属性 引入 cache 文件（CACHE 缓存文件，NETWORK 不缓存文件，FALLBACK 当资源不可访问时，代替的文件）</p><p>6.3、更新缓存文件：1、更新 manifest 文件；2、通过 javascript 操作：window.applicationCache.update()；3、清除浏览器缓存；4、带版本号，根据版本号判断。</p><hr><h4 id="7、状态码？"><a href="#7、状态码？" class="headerlink" title="7、状态码？"></a>7、状态码？</h4><p>1 字头：信息，服务器收到请求，需要请求者继续执行操作</p><p>2 字头：成功，操作被成功接收并处理</p><p>3 字头：重定向，需要进一步的操作以完成请求</p><p>4 字头：客户端错误，请求包含语法错误或无法完成请求</p><p>5 字头：服务器错误，服务器在处理请求的过程中发生了错误</p><p>101：切换协议。</p><p>200：请求成功。一般用于 GET 与 POST 请求</p><p>203：非授权信息。请求成功。但返回的 meta 信息不在原始的服务器，而是一个副本</p><p>204：无内容。服务器成功处理，但未返回内容。</p><p>301：永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。</p><p>302：临时移动。</p><p>304：未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。</p><p>305：使用代理。所请求的资源必须通过代理访问</p><p>307：临时重定向。</p><p>400：客户端请求的语法错误，服务器无法理解</p><p>404：服务器无法根据客户端的请求找到资源（网页）</p><p>405：客户端请求中的方法被禁止</p><p>500：服务器内部错误，无法完成请求</p><p>502：作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</p><p>503：由于超载或系统维护，服务器暂时的无法处理客户端的请求。</p><p>505：服务器不支持请求的 HTTP 协议的版本，无法完成处理</p><hr><h4 id="8、-DOCTYPE-html-是干什么的，有什么用？"><a href="#8、-DOCTYPE-html-是干什么的，有什么用？" class="headerlink" title="8、!DOCTYPE html 是干什么的，有什么用？"></a>8、!DOCTYPE html 是干什么的，有什么用？</h4><p>1、声明文档类型是 html5 类型的文档。2、声明了则是标准模式，兼容 ie 高版本；不声明则是混杂模式，兼容 ie 低版本。</p><hr><h4 id="9、http1-0-、http1-1-和-http2-0-的区别"><a href="#9、http1-0-、http1-1-和-http2-0-的区别" class="headerlink" title="9、http1.0 、http1.1 和 http2.0 的区别"></a>9、http1.0 、http1.1 和 http2.0 的区别</h4><p>1、长链接</p><p>HTTP 1.0 需要使用 keep-alive 参数来告知服务器端要建立一个长连接，而 HTTP1.1 默认支持长连接。</p><p>HTTP 是基于 TCP/IP 协议的，创建一个 TCP 连接是需要经过三次握手的,有一定的开销，如果每次通讯都要重新建立连接的话，对性能有影响。因此最好能维持一个长连接，可以用个长连接来发多个请求。</p><p>2、节约带宽</p><p>HTTP 1.1 支持只发送 header 信息(不带任何 body 信息)，如果服务器认为客户端有权限请求服务器，则返回 100，否则返回 401。客户端如果接受到 100，才开始把请求 body 发送到服务器。</p><p>这样当服务器返回 401 的时候，客户端就可以不用发送请求 body 了，节约了带宽。</p><p>3、HOST 域</p><p>HTTP1.0 没有 host 域，HTTP1.1 有 host 域。HOST 域就是，web server 上的多个虚拟站点可以共享同一个 ip 和端口</p><p>4、多路复用</p><p>HTTP2.0 使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比 HTTP1.1 大了好几个数量级</p><p>5、数据压缩</p><p>HTTP1.1 不支持 header 数据的压缩，HTTP2.0 使用 HPACK 算法对 header 的数据进行压缩，这样数据体积小了，在网络上传输就会更快。</p><p>6、服务器推送</p><p>当我们对支持 HTTP2.0 的 web server 请求数据的时候，服务器会顺便把一些客户端需要的资源一起推送到客户端，免得客户端再次创建连接发送请求到服务器端获取。这种方式非常合适加载静态资源。服务器端推送的这些资源其实存在客户端的本地，客户端直接从本地加载这些资源就可以了，不用走网络，速度自然是快很多的。</p><hr><h4 id="10、http-和-https-的区别"><a href="#10、http-和-https-的区别" class="headerlink" title="10、http 和 https 的区别"></a>10、http 和 https 的区别</h4><p>1、https 协议需要到 ca 申请证书，一般免费证书较少，因而需要一定费用。</p><p>2、http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</p><p>3、http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</p><p>4、http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全。</p><p>虽然说 HTTPS 有很大的优势，但其相对来说，还是存在不足之处的：</p><p>（1）HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近 50%，增加 10%到 20%的耗电；</p><p>（2）HTTPS 连接缓存不如 HTTP 高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</p><p>（3）SSL 证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</p><p>（4）SSL 证书通常需要绑定 IP，不能在同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗。</p><p>（5）HTTPS 协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL 证书的信用链体系并不安全，特别是在某些国家可以控制 CA 根证书的情况下，中间人攻击一样可行。</p><hr><h4 id="11、TCP-和-UDP-的区别"><a href="#11、TCP-和-UDP-的区别" class="headerlink" title="11、TCP 和 UDP 的区别"></a>11、TCP 和 UDP 的区别</h4><p>（1）TCP 是面向连接的，udp 是无连接的即发送数据前不需要先建立链接。</p><p>（2）TCP 提供可靠的服务。也就是说，通过 TCP 连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP 尽最大努力交付，即不保证可靠交付。并且因为 tcp 可靠，面向连接，不会丢失数据因此适合大数据量的交换。</p><p>（3）TCP 是面向字节流，UDP 面向报文，并且网络出现拥塞不会使得发送速率降低（因此会出现丢包，对实时的应用比如 IP 电话和视频会议等）。</p><p>（4）TCP 只能是 1 对 1 的，UDP 支持 1 对 1,1 对多。</p><p>（5）TCP 的首部较大为 20 字节，而 UDP 只有 8 字节。</p><p>（6）TCP 是面向连接的可靠性传输，而 UDP 是不可靠的。</p><hr><h3 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h3><h4 id="1、display-none-和-visibility-hidden-的区别是什么？"><a href="#1、display-none-和-visibility-hidden-的区别是什么？" class="headerlink" title="1、display:none; 和 visibility:hidden;的区别是什么？"></a>1、display:none; 和 visibility:hidden;的区别是什么？</h4><p>display:none; 彻底消失，释放空间。能引发页面的 reflow 回流（重排）。</p><p>visibility:hidden; 就是隐藏，但是位置没释放，好比 opacity:0; 不引发页面回流。</p><hr><h4 id="2、CSS-优先级和权重值如何计算"><a href="#2、CSS-优先级和权重值如何计算" class="headerlink" title="2、CSS 优先级和权重值如何计算"></a>2、CSS 优先级和权重值如何计算</h4><p>内嵌样式&gt;内部样式&gt;外部样式&gt;导入式</p><p>！important &gt; 内嵌 1000 &gt;Id 100 &gt; class=[]=伪类 10 &gt; tag=伪元素 1 &gt; ( * + &gt; ~) 0</p><hr><h4 id="3、如何触发-BFC，以及-BFC-的作用"><a href="#3、如何触发-BFC，以及-BFC-的作用" class="headerlink" title="3、如何触发 BFC，以及 BFC 的作用"></a>3、如何触发 BFC，以及 BFC 的作用</h4><p>BFC：块级格式化上下文 block formatting context，是一个独立渲染区域。规定了内部 box 如何布局，并且与这个区域外部毫不相干。</p><p>触发：float 的值不是 none；position 的值不是 static 或者 relative；display 的值是 inline-block、block、table-cell、flex、table-caption 或者 inline-flex；overflow 的值不是 visible。</p><p>作用：避免 margin 重叠；自适应两栏布局；清除浮动。</p><hr><h4 id="4、CSS-盒模型"><a href="#4、CSS-盒模型" class="headerlink" title="4、CSS 盒模型"></a>4、CSS 盒模型</h4><p>盒模型由：外边距 margin、边框 border、内边距 padding、内容 content 四个部分组成</p><p>标准盒模型大小=border+padding+content</p><p>怪异盒模型大小=content</p><p>转怪异盒模型：box-sizing:border-box;</p><p>转标准盒模型：box-sizing:content-box;</p><hr><h4 id="5、如何水平垂直居中一个元素"><a href="#5、如何水平垂直居中一个元素" class="headerlink" title="5、如何水平垂直居中一个元素"></a>5、如何水平垂直居中一个元素</h4><p>5.1、弹性盒子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>box<span class="token punctuation">{</span>  display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  justify<span class="token operator">-</span>content<span class="token punctuation">:</span> center<span class="token punctuation">;</span>  align<span class="token operator">-</span>items<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>5.2、定位</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>box<span class="token punctuation">{</span>  position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>box <span class="token punctuation">.</span>sub<span class="token punctuation">{</span>  position<span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  top<span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  left<span class="token punctuation">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>  transform<span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*margin-left: 负的宽度的一半*/</span>  <span class="token comment" spellcheck="true">/*margin-top: 负的高度的一半*/</span><span class="token punctuation">}</span></code></pre><hr><h4 id="6、css-实现一个三角形"><a href="#6、css-实现一个三角形" class="headerlink" title="6、css 实现一个三角形"></a>6、css 实现一个三角形</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>triangle<span class="token punctuation">{</span>  width<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  border<span class="token punctuation">:</span> 100px solid transparent<span class="token punctuation">;</span>  border<span class="token operator">-</span>left<span class="token operator">-</span>color<span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="7、如何实现左边固定宽，右边自适应布局"><a href="#7、如何实现左边固定宽，右边自适应布局" class="headerlink" title="7、如何实现左边固定宽，右边自适应布局"></a>7、如何实现左边固定宽，右边自适应布局</h4><p>7.1、圣杯布局</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"center"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"left"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"right"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>#container <span class="token punctuation">{</span>  padding<span class="token operator">-</span>left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  padding<span class="token operator">-</span>right<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">}</span>#container <span class="token punctuation">.</span>column <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>#center <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>#left <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  position<span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  right<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token punctuation">}</span>#right <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>right<span class="token punctuation">:</span> <span class="token operator">-</span>150px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.2、双飞翼布局</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"container"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"left"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"right"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  #container <span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">.</span>column <span class="token punctuation">{</span>  float<span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span>#center <span class="token punctuation">{</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span><span class="token punctuation">}</span>#left <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>#right <span class="token punctuation">{</span>  width<span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>  margin<span class="token operator">-</span>left<span class="token punctuation">:</span> <span class="token operator">-</span>150px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.3、等高布局（假等高）互补的内外边距</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>parent<span class="token punctuation">{</span>  overflow<span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token punctuation">.</span>right<span class="token punctuation">{</span>  margin<span class="token operator">-</span>bottom<span class="token punctuation">:</span> <span class="token operator">-</span>10000px<span class="token punctuation">;</span>  padding<span class="token operator">-</span>bottom<span class="token punctuation">:</span> 10000px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.4、等高布局（真等高）弹性盒子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>parent<span class="token punctuation">{</span>  display<span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">.</span>child<span class="token punctuation">{</span>  flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.5、calc</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"left"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"center"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"right"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">.</span>column<span class="token punctuation">{</span>    float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  #left<span class="token punctuation">{</span>    width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  #right<span class="token punctuation">{</span>    width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  #center<span class="token punctuation">{</span>    width<span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">%</span> <span class="token operator">-</span> 100px <span class="token operator">-</span> 200px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>7.6、浮动</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"left"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"right"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"column"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  #left<span class="token punctuation">{</span>    float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>    width<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  #right<span class="token punctuation">{</span>    float<span class="token punctuation">:</span> right<span class="token punctuation">;</span>    width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  #center<span class="token punctuation">{</span>    margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><hr><h4 id="8、如何实现-6px-字体"><a href="#8、如何实现-6px-字体" class="headerlink" title="8、如何实现 6px 字体"></a>8、如何实现 6px 字体</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>font<span class="token punctuation">{</span>  font<span class="token operator">-</span>size<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  transform<span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="9、移动端-1px-边框怎么设置"><a href="#9、移动端-1px-边框怎么设置" class="headerlink" title="9、移动端 1px 边框怎么设置"></a>9、移动端 1px 边框怎么设置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 方法1 */</span><span class="token punctuation">.</span>border<span class="token punctuation">{</span>  width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>  height<span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>  background<span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 方法2 */</span><span class="token punctuation">.</span>border<span class="token punctuation">{</span>  border<span class="token operator">-</span>image<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span>border<span class="token punctuation">.</span>png<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 方法3 */</span><span class="token punctuation">.</span>border<span class="token punctuation">{</span>  box<span class="token operator">-</span>shadow<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> 1px #<span class="token number">000</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="10、px、em、rem、vh、vw-分别是什么"><a href="#10、px、em、rem、vh、vw-分别是什么" class="headerlink" title="10、px、em、rem、vh、vw 分别是什么"></a>10、px、em、rem、vh、vw 分别是什么</h4><p>px 物理像素，绝对单位；em 相对于自身字体大小，如果自身没有大小则相对于父级字体大小，如果父级也没有则一层一层向上查找，直到找到 html 为止，相对单位；rem 相对于 html 的字体大小，相对单位；vh 相对于屏幕高度的大小，相对单位；vw 相对于屏幕宽度的大小，相对单位。</p><hr><h4 id="11、css-可继承的属性有哪些"><a href="#11、css-可继承的属性有哪些" class="headerlink" title="11、css 可继承的属性有哪些"></a>11、css 可继承的属性有哪些</h4><p>可继承的属性：文本类：text-indent、text-align、line-height、word-spacing、letter-spacing、text-transform、direction、color；</p><p>字体类：font、font-family、font-weight、font-size、font-style、font-variant、font-stretch、font-size-adjust；</p><p>其它类：visibility、caption-side、border-collapse、border-spacing、empty-cells、table-layout、list-style-type、list-style-image、list-style-position、list-style、quotes、cursor、page、page-break-inside、windows、orphans 等</p><hr><h3 id="三、JavaScript"><a href="#三、JavaScript" class="headerlink" title="三、JavaScript"></a>三、JavaScript</h3><h4 id="1、call、apply、bind-的区别"><a href="#1、call、apply、bind-的区别" class="headerlink" title="1、call、apply、bind 的区别"></a>1、call、apply、bind 的区别</h4><p>这三个都是用来定义上下文的，call、apply 会指定上下文并执行函数；而 bind 终身定 死上下文但是不执行函数，并返回新的函数。 其中 call 和 apply 传入参数的形式有别，call 是单独罗列，逗号隔开参数；apply 是数 组。 函数.call(上下文对象，参数，参数，参数); 函数.apply(上下文对象，[参数，参数，参数]);</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>fun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fun <span class="token operator">=</span> fun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回新的函数</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="2、数据类型有哪些"><a href="#2、数据类型有哪些" class="headerlink" title="2、数据类型有哪些"></a>2、数据类型有哪些</h4><p>基本类型：数字 number、字符串 string、布尔 boolean、undefined、null、symbol</p><p>引用类型：数组 array、函数 function、对象 object</p><hr><h4 id="3、如何检测数据类型"><a href="#3、如何检测数据类型" class="headerlink" title="3、如何检测数据类型"></a>3、如何检测数据类型</h4><p>typeof 能够检测：数字、字符串、布尔、undefined、symbol、function</p><p>instanceof 能够检测：数组</p><p>Object.prototype.toString.call() 万能法</p><hr><h4 id="4、各语句的区别"><a href="#4、各语句的区别" class="headerlink" title="4、各语句的区别"></a>4、各语句的区别</h4><p>4.1、for 和 for…in 和 for…of 的区别</p><p>for 循环，遍历整个数组</p><p>for…in 加强循环，不光可以遍历数组，还可以遍历对象和其原型上的方法</p><p>for…of 遍历数组和可枚举的对象</p><p>4.2、switch 和 if 的区别</p><p>switch 用于判断精准的值</p><p>if 用于判断值的范围</p><p>4.3、while 和 do…while 的区别</p><p>while 当符合条件时则执行</p><p>do…while 先执行一次，然后再判断是否符合条件，比 while 要多执行一次</p><p>4.4、break 和 continue 的区别</p><p>break 是跳出当前循环并终止循环</p><p>continue 是跳出当前循环并执行下一次循环</p><hr><h4 id="5、闭包"><a href="#5、闭包" class="headerlink" title="5、闭包"></a>5、闭包</h4><p>闭包就是函数能够记忆住当初定义时候的作用域，不管函数到哪里执行了，永远都能够 记住那个作用域，并且会遮蔽新作用域的变量。可预测状态容器；实现模块化，实现变量的私有封装；可以实现迭代器。 闭包缺点：1.闭包有一个非常严重的问题，那就是内存浪费问题，这个内存浪费不仅仅 因为它常驻内存，更重要的是，对闭包的使用不当的话会造成无效内存的产生；2.性能问题 使用闭包时，会涉及到跨作用域访问，每次访问都会导致性能损失。 因此在脚本中，最好小心使用闭包，它同时会涉及到内存和速度问题。不过我们可以通过把跨作用域变量存储在局部变量中，然后直接访问局部变量，来减轻对执行速度的影响。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4 a的值被存储在内存中不会被释放掉</span></code></pre><hr><h4 id="6、原型和原型链"><a href="#6、原型和原型链" class="headerlink" title="6、原型和原型链"></a>6、原型和原型链</h4><p>原型：每一个对象类型都有一个隐式原型<strong>proto</strong> ，每一个函数都有一个显示原型 prototype，该属性指向它的原型对象。</p><p>原型链：某个对象的原型又有自己的原型，直到某个对象的原型为 null 为止，组成这条的最后一环，这种一级一级的链就是原型链。</p><hr><h4 id="7、继承"><a href="#7、继承" class="headerlink" title="7、继承"></a>7、继承</h4><p>7.1、原型链继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 缺点：引用类型的属性被所有实例共享, * 在创建Child 的实例时， 不能向Person传参 */</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaopao"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>7.2、借用构造函数继承（经典继承）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*优点：1.避免了引用类型的属性被所有实例共享2.可以在Child中向Parent传参缺点：1.只是子类的实例，不是父类的实例2.方法都在构造函数中定义，每次创建实例都会创建一遍方法*/</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Person<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>7.3、组合继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*优点：融合原型链继承和构造函数的优点，是JavaScript中最常用的继承模式缺点：调用了两次父类构造函数组合继承最大的问题是无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部）*/</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二次调用 Parent()</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一次调用 Parent()</span></code></pre><p>7.4、原型式继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 缺点： 包含引用类型的属性值始终都会共享相应的值， 这点跟原型链继承一样</span><span class="token keyword">function</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"xiaopao"</span><span class="token punctuation">,</span>  friend<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"daisy"</span><span class="token punctuation">,</span> <span class="token string">"kelly"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>7.5、寄生式继承 可以理解为在原型式继承的基础上增加一些函数或属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 缺点：跟借用构造函数一样，每次创建对象都会创建一遍方法</span><span class="token keyword">var</span> ob <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"xiaopao"</span><span class="token punctuation">,</span>  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"lulu"</span><span class="token punctuation">,</span> <span class="token string">"huahua"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过调用函数创建一个新对象</span>  clone<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//以某种方式来增强这个对象</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回这个对象</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上面CreateObj函数 在ECMAScript5 有了一新的规范写法，Object.create(ob) 效果是一样的 , 看下面代码</span><span class="token keyword">var</span> ob1 <span class="token operator">=</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span>ob<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ob1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// xiaopao</span></code></pre><p>7.6、寄生组合式继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 优点：完美继承</span><span class="token comment" spellcheck="true">// 缺点：代码繁多，使用起来十分麻烦</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">prototype</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> prototype <span class="token operator">=</span> <span class="token function">CreateObj</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> child<span class="token punctuation">;</span>  child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">prototype</span><span class="token punctuation">(</span>Child<span class="token punctuation">,</span> Parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">"大圣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>7.7、es6 继承</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><hr><h4 id="8、递归和递归优化"><a href="#8、递归和递归优化" class="headerlink" title="8、递归和递归优化"></a>8、递归和递归优化</h4><p>递归就是函数自己调用自己。但是又不能无限的调用自己，需要有一个出口，否则会成为死循环。函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 循环求1-5的所有数的和</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span><span class="token comment" spellcheck="true">//递归实现1-5的所有数的和</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//15</span></code></pre><p>尾递归优化是解决递归调用栈溢出的方法。尾递归是指，在函数返回的时候，调用自身本身，并且，return 语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 上例递归进行尾递归优化</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//15</span><span class="token comment" spellcheck="true">// 或者while优化</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sum</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 15</span></code></pre><hr><h4 id="9、ajax-工作原理和封装"><a href="#9、ajax-工作原理和封装" class="headerlink" title="9、ajax 工作原理和封装"></a>9、ajax 工作原理和封装</h4><p>1.创建 XMLHttpRequest 对象。 2.设置请求方式。open() 3.调用回调函数。onreadystatechange 4.发送请求。send()</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> dataType<span class="token punctuation">,</span> data<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> url<span class="token punctuation">,</span> success<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> options<span class="token punctuation">;</span>  <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token function">formatParams</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> xhr<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//考虑兼容性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>ActiveObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//兼容IE6以下版本</span>    xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXobject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//启动并发送一个请求</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"GET"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> params<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"post"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置表单提交时的内容类型</span>    <span class="token comment" spellcheck="true">//Content‐type数据请求的格式</span>    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content‐type"</span><span class="token punctuation">,</span> <span class="token string">"application/x‐www‐form‐urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置有效时间</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readySate <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 接收</span>  <span class="token comment" spellcheck="true">// options.success成功之后的回调函数 options.error失败后的回调函数</span>  <span class="token comment" spellcheck="true">//xhr.responseText,xhr.responseXML 获得字符串形式的响应数据或者XML形式的响应数据</span>  xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> status <span class="token operator">=</span> xhr<span class="token punctuation">.</span>status<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> status <span class="token operator">==</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        success <span class="token operator">&amp;&amp;</span> <span class="token function">success</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseXML<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        error <span class="token operator">&amp;&amp;</span> <span class="token function">error</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//格式化请求参数</span><span class="token keyword">function</span> <span class="token function">formatParams</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> name <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"v="</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="10、跨域"><a href="#10、跨域" class="headerlink" title="10、跨域"></a>10、跨域</h4><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。其 实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。同源策略 SOP（Same origin policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个 ip 地 址，也非同源。</p><p>方法 1：跨域资源共享 CORS 跨域，就是服务端在 HTTP 返回头上加上“AccessControll-Allow-Origin：*”。 “Access-Controll-Allow-METHODS：GET, POST” DELETE、PATCH 请求类型会发出 OPTIONS 预检请求。</p><p>方法 2：代理跨域，webpack-dev-server 里面的 proxy 配置项。config 中的 ProxyTable</p><p>方法 3：JSONP，利用页面 srcipt 没有跨域限制的漏洞，用 script 的 src 引入它，然后页 面内定义回调函数，jQuery 中$.ajax({dataType: ‘jsonp’})。</p><p>方法 4： iframe 跨域，配合 window.name 或者 location.hash 或者 document.domain 一起使用</p><p>方法 5：nginx 反向代理接口跨域，通过 nginx 配置一个代理服务器（域名与 domain1 相同，端口不同）做跳板机，反向代理访问 domain2 接口，并且可以顺便修改 cookie 中 domain 信息，方便当前域 cookie 写入，实现跨域登录。</p><p>方法 6：jquery 的 ajax 跨域，dataType:’jsonp’</p><hr><h4 id="11、事件流和事件委托"><a href="#11、事件流和事件委托" class="headerlink" title="11、事件流和事件委托"></a>11、事件流和事件委托</h4><p>事件流一般分三个阶段：1、捕获阶段（由外向内） 2、目标阶段 （执行阶段） 3、冒泡阶段（由内向外）</p><p>阻止事件冒泡 e.stopPropagation() 阻止默认动作 e.preventDefault()</p><p>事件委托：就是把事件委托给父级，利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。</p><hr><h4 id="12、事件循环"><a href="#12、事件循环" class="headerlink" title="12、事件循环"></a>12、事件循环</h4><p><img src="F:\offcn\course\第6阶段视频\第6-8天-面试题\offcn\高频面试题\2.png" alt="image-20210415153418143"></p><p>同步任务进入主线程，异步任务进入 Event Table 并注册函数 当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。 主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执 行。 上述过程会不断重复，也就是常说的 Event Loop(事件循环)。</p><p><img src="F:\offcn\course\第6阶段视频\第6-8天-面试题\offcn\高频面试题\3.png" alt="image-20210415153548623"></p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"script start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"script end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 执行结果为：script start, script end, promise1, promise2, setTimeout因为Promise是微任务，主线程会在同步任务做完后先清空微任务队列，再执行宏任务队列 */</span></code></pre><p>微任务是由 JavaScript 自身发起，包括：process.nextTick、promise、MutationObserver</p><p>宏任务是由宿主发起的，如浏览器、node。包括：setTimeout、setInterval、setImmediate、postMessage</p><hr><h4 id="13、防抖和节流"><a href="#13、防抖和节流" class="headerlink" title="13、防抖和节流"></a>13、防抖和节流</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 节流：在计时器内部清除计时器，有节奏的执行事件</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>      timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        callback <span class="token operator">&amp;&amp;</span> callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 防抖：在计时器前边清除计时器，只执行最后一次事件，能够无限延长执行时间</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> delay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      callback <span class="token operator">&amp;&amp;</span> callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="14、深克隆和浅克隆"><a href="#14、深克隆和浅克隆" class="headerlink" title="14、深克隆和浅克隆"></a>14、深克隆和浅克隆</h4><p>浅克隆：同值也同址。浅拷贝是指源对象与拷贝对象共用一份实体，仅仅是引用的变量不同（名称不同）。对其中任何一个对象的改动都会影响另外一个对象。如：Object.assign；=等号赋值；slice 截取。</p><p>深克隆：同值不同址。深拷贝是指源对象与拷贝对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。如：JSON.parse(JSON.stringify())；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义一个变量</span>  <span class="token keyword">let</span> result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果当前需要深拷贝的是一个对象的话</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果是一个数组的话</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将result赋值为一个数组，并且执行遍历</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 递归克隆数组中的每一项</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 判断如果当前的值是null的话；直接赋值为null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 判断如果当前的值是一个RegExp对象的话，直接赋值</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>constructor <span class="token operator">===</span> RegExp<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 否则是普通对象，直接for in循环，递归赋值对象的所有值</span>      result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果不是对象的话，就是基本数据类型，那么直接赋值</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> target<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回最终结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="15、cookie、sessionStorage-和-localStorage-的区别"><a href="#15、cookie、sessionStorage-和-localStorage-的区别" class="headerlink" title="15、cookie、sessionStorage 和 localStorage 的区别"></a>15、cookie、sessionStorage 和 localStorage 的区别</h4><p>15.1、cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递，而 sessionStorage 和 localStorage 不会自动把数据发送给服务器，仅在本地保存。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下<br>15.2、存储大小限制也不同，cookie 数据不能超过 4K，同时因为每次 http 请求都会携带 cookie、所以 cookie 只适合保存很小的数据，如会话标识。sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大<br>15.3、数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的 cookie 过期时间之前有效，即使窗口关闭或浏览器关闭<br>15.4、作用域不同，sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localstorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的<br>15.5、web Storage 支持事件通知机制，可以将数据更新的通知发送给监听者<br>15.6、web Storage 的 api 接口使用更方便</p><hr><h4 id="16、get-和-post-请求的区别"><a href="#16、get-和-post-请求的区别" class="headerlink" title="16、get 和 post 请求的区别"></a>16、get 和 post 请求的区别</h4><p>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</p><p>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。</p><p>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</p><p>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</p><p>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</p><p>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有。</p><p>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</p><p>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</p><p>GET 参数通过 URL 传递，POST 放在 Request body 中</p><hr><h4 id="17、new-操作符都做了哪些事情"><a href="#17、new-操作符都做了哪些事情" class="headerlink" title="17、new 操作符都做了哪些事情"></a>17、new 操作符都做了哪些事情</h4><p>构造函数中没有显示的创建 Object 对象，实际上后台自动创建了一个空对象，直接给 this 对象赋值属性和方法，this 即指向创建的对象。没有 return 返回值，后台自动返回了该对象，该对象继承构造函数的原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 模拟构造函数实现</span><span class="token keyword">var</span> Book <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正常用法</span><span class="token keyword">var</span> js <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用代码模拟，在非IE浏览器中测试，IE浏览器不支持</span><span class="token keyword">var</span> javascript <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>javascript<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> Book<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>Book<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>javascript<span class="token punctuation">,</span> <span class="token string">"js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="18、XSS-攻击和-CSRF-攻击"><a href="#18、XSS-攻击和-CSRF-攻击" class="headerlink" title="18、XSS 攻击和 CSRF 攻击"></a>18、XSS 攻击和 CSRF 攻击</h4><p>XSS：跨站脚本攻击 Cross site script，因叫 css 容易让人误会所以改成了 xss。比如一个 JSON 数据：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"&lt;script>alert('哈哈哈')&lt;/script>"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>在不该出现 script 代码的地方出现了，引发一些潜在的危险。 XSS 漏洞，能让人们在网页里面插入一段有功能的语句。 XSS 全称“跨站脚本”，是注入攻击的一种。其特点是不对服务器端造成任何伤害， 而是通过一些正常的站内交互途径，例如发布评论，提交含有 JavaScript 的内容文本。这时服务器端如果没有过滤或转义掉这些脚本，作为内容发布到了页面上，其他用户访问这个 页面的时候就会运行这些脚本。 防范： ① 用正则表达式阻止用户提交带有&lt;、eval、script 等危险字眼的语句 ② 显示的时候不要直接用 innerHTML，而是用 innerText，或者将&lt;转义。</p><p>CSRF 的全称是“跨站请求伪造”，而 XSS 的全称是“跨站脚本”。看起来有点相 似，它们都是属于跨站攻击——不攻击服务器端而攻击正常访问网站的用户，但前面说 了，它们的攻击类型是不同维度上的分类。CSRF 顾名思义，是伪造请求，冒充用户在站内 的正常操作。我们知道，绝大多数网站是通过 cookie 等方式辨识用户身份(包括使用服务 器端 Session 的网站，因为 Session ID 也是大多保存在 cookie 里面的)，再予以授权的。 所以要伪造用户的正常操作，最好的方法是通过 XSS 或链接欺骗等途径，让用户在本机(即 拥有身份 cookie 的浏览器端)发起用户所不知道的请求。 就是说，如果用户不老老实实写姓名，写了一个个<code>&lt;script&gt;叫做 XSS。如果进一步的，写了一个$.post()发了 document.cookie 就是 CSRF 了</code>。解决方法： ① 用 token 验证，验证用户的 IP 地址生成 MD5 码，更安全的验证方法 ② 防住 XSS。</p><hr><h4 id="19、垃圾回收机制"><a href="#19、垃圾回收机制" class="headerlink" title="19、垃圾回收机制"></a>19、垃圾回收机制</h4><p>一般来说没有被引用的对象就是垃圾，就是要被清除， 有个例外如果几个对象引用形成一个环，互相引用，但根本访问不到它们，这几个对象也是垃圾，也要被清除。 垃圾回收的方法主要有两种：一种是标记清除，即用完之后的变量 赋值成 null，另一种 是引用计数，将使用完的对象的引用计数，如果为 0 则回收</p><hr><h4 id="20、常用-DOM-操作"><a href="#20、常用-DOM-操作" class="headerlink" title="20、常用 DOM 操作"></a>20、常用 DOM 操作</h4><p>createElement 创建</p><p>appendChild 末尾添加</p><p>insertBefore 前边插入</p><p>cloneNode(true) 克隆</p><p>removeChild() 移除</p><p>parentNode 父节点</p><p>childNodes // 全部子节点</p><p>firstChild // 第一个子节点</p><p>lastChild // 最后一个子节点</p><p>previousElementSibling// 上一个兄弟节点</p><p>nextElementSibling// 下一个兄弟节点</p><p>获取 dom 节点：document.getElementById() 、document.getElementsByTagName() 、document.getElementsByClassName() 、document.getElementsByName() 、document.querySelector() 、document.querySelectorAll()</p><hr><h4 id="21、AMD、CMD、ES6、CommonJS-的区别"><a href="#21、AMD、CMD、ES6、CommonJS-的区别" class="headerlink" title="21、AMD、CMD、ES6、CommonJS 的区别"></a>21、AMD、CMD、ES6、CommonJS 的区别</h4><p>CommonJS：模块引用(require) 模块输出(exports) 模块标识(module) ES6：模块引用(import) 模块输出(export) 前者支持动态导入，也就是 require(${path}/xx.js)，后者目前不支持。 前者是同步导入，因为用于服务端，文件都在本地，同步导入即使卡住主线 程影响也不大。而后者是异步导入，因为用于浏览器，需要下载文件，如果也采用同 步导入会对渲染有很大影响。 前者在导出时都是值拷贝，就算导出的值变了，导入的值也不会改变，所以 如果想更新值，必须重新导入一次。但是后者采用实时绑定的方式，导入导出的值都 指向同一个内存地址，所以导入值会跟随导出值变化 AMD、CMD 都使用 define 定义模块，require 引入模块，区别在于 AMD 是前置依赖， CMD 是就近依赖</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// AMD   依赖必须一开始就声明</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./a"</span><span class="token punctuation">,</span> <span class="token string">"./b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>require<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// CMD</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>require<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 依赖就近书写</span>  <span class="token comment" spellcheck="true">// do something...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="四、ES6"><a href="#四、ES6" class="headerlink" title="四、ES6"></a>四、ES6</h3><h4 id="1、let、const、var-的区别"><a href="#1、let、const、var-的区别" class="headerlink" title="1、let、const、var 的区别"></a>1、let、const、var 的区别</h4><p>var 声明变量存在变量提升，let 和 const 不存在变量提升</p><p>let、const 都是块级局部变量 ，存在暂时性死区</p><p>const 的特性和 let 完全一样，不同的只是 const 声明时候必须赋值，赋值基本类型时，只能进行一次赋值，即声明后不能再修改，赋值引用类型时，内存地址不能修改</p><p>同一作用域下 let 和 const 不能声明同名变量，而 var 可以</p><hr><h4 id="2、箭头函数和普通函数的区别"><a href="#2、箭头函数和普通函数的区别" class="headerlink" title="2、箭头函数和普通函数的区别"></a>2、箭头函数和普通函数的区别</h4><p>2.1、箭头函数的 this 是定义时决定的，普通函数是看调用方法。</p><p>2.2、箭头函数不能成为构造函数</p><p>2.3、箭头函数不能使用 async/await</p><p>2.4、箭头函数不能使用 Generator 函数，不能使用 yeild 关键字</p><p>2.5、箭头函数不能使用 call、apply、bind 来修改 this 指向</p><p>2.6、箭头函数不绑定 arguments</p><p>2.7、箭头函数不具有 prototype 原型对象，不具有 super</p><hr><h4 id="3、promise-的实现原理和封装"><a href="#3、promise-的实现原理和封装" class="headerlink" title="3、promise 的实现原理和封装"></a>3、promise 的实现原理和封装</h4><p>promise 一共有三种状态，分别是 pedding 初始状态 、resolved 成功的状态、 rejected 失败的状态。传入两个参数，一个是 resolve，执行 then 的方法，一个是 reject，执行 catch 的方法或者 then 的第二个参数的回调。promise 一旦状态改变就不可在修改。promise 的链式调用实际上是返回的一个新的 promise，而非 return this。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 简版promise</span><span class="token keyword">function</span> <span class="token function">Promise</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//executor执行器</span>  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等待态</span>  self<span class="token punctuation">.</span>value <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示当前成功的值</span>  self<span class="token punctuation">.</span>reason <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示是失败的值</span>  <span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 成功的方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"resolved"</span><span class="token punctuation">;</span>      self<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//失败的方法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"pending"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      self<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span>      self<span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>then <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>onFufiled<span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"resolved"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onFufiled</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token string">"rejected"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">onRejected</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="4、forEach、for-in、for-of-三者区别"><a href="#4、forEach、for-in、for-of-三者区别" class="headerlink" title="4、forEach、for in、for of 三者区别"></a>4、forEach、for in、for of 三者区别</h4><p>forEach 更多的用来遍历数组<br>for in 一般用来遍历对象或 json，可以遍历对象的原型<br>for of 一遍用来遍历数组对象和可枚举对象，不能遍历原型<br>for in 循环出的是 key，for of 循环出的是 value</p><hr><h4 id="5、set、map-分别是什么"><a href="#5、set、map-分别是什么" class="headerlink" title="5、set、map 分别是什么"></a>5、set、map 分别是什么</h4><p>set 对象：允许你存储任何类型的唯一值，无论是原始值或者是对象引用。Set 是值得集合，不能通过 get 方法获取值，因为 set 只有值。能通过迭代器进行 for…of 遍历。Set 的值是唯一的可以做数组去重。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SetIterator</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SetIterator</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SetIterator</span><span class="token comment" spellcheck="true">// set对象可遍历</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map 对象：Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> keyObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">,</span> <span class="token string">"和键 keyObj 关联的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "和键 keyObj 关联的值"</span>myMap<span class="token punctuation">.</span>size<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>myMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>myMap<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>keyObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>myMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMap<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// MapIterator 键组成的对象</span>myMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// MapIterator  值组成的对象</span>myMap<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// MapIterator 键值对组成的对象</span><span class="token comment" spellcheck="true">// map对象可遍历</span>myMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  {}, "和键 keyObj 关联的值"</span><span class="token punctuation">}</span></code></pre><hr><h4 id="6、symbol-的理解"><a href="#6、symbol-的理解" class="headerlink" title="6、symbol 的理解"></a>6、symbol 的理解</h4><p>ES6 引入了一种新的原始数据类型 Symbol ，表示独一无二的值，最大的用法是用来定义对象的唯一属性名</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sy <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"KK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Symbol(KK)</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>sy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "symbol"</span><span class="token comment" spellcheck="true">// 相同参数 Symbol() 返回的值不相等</span><span class="token keyword">let</span> sy1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"kk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sy <span class="token operator">===</span> sy1<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 写法1</span><span class="token keyword">let</span> syObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>syObject<span class="token punctuation">[</span>sy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"kk"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {Symbol(key1): "kk"}</span><span class="token comment" spellcheck="true">// 写法2</span><span class="token keyword">let</span> syObject <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">"kk"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syObject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {Symbol(key1): "kk"}</span><span class="token comment" spellcheck="true">// 写法3</span><span class="token keyword">let</span> syObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>syObject<span class="token punctuation">,</span> sy<span class="token punctuation">,</span> <span class="token punctuation">{</span>value<span class="token punctuation">:</span> <span class="token string">"kk"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>syObject<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// {Symbol(key1): "kk"}</span>Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问。但是不会出现在 <span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">in</span> 、 <span class="token keyword">for</span><span class="token operator">...</span><span class="token keyword">of</span> 的循环中，也不会被 Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 、 Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 返回。如果要读取到一个对象的 Symbol 属性，可以通过 Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 取到。</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> syObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 无输出</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>syObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// []</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>syObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [Symbol(key1)]</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>syObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [Symbol(key1)]</span></code></pre><hr><h4 id="7、新增哪些数组方法"><a href="#7、新增哪些数组方法" class="headerlink" title="7、新增哪些数组方法"></a>7、新增哪些数组方法</h4><p><strong>forEach</strong>：forEach()会遍历数组, 循环体内没有返回值,forEach()循环不会改变原来数组的内容, forEach()有三个参数, 第一个参数是当前元素, 第二个参数是当前元素的索引, 第三个参数是当前元素所属的数组</p><p><strong>map</strong>：map()的主要作用, 其实是创建一个新的数组</p><p><strong>filter</strong>：filter()主要是过滤的, 用来过滤数组中不满足条件的元素, 把满足条件的元素放到新的数组里, 并且不会改变原数组</p><p><strong>every</strong>：会遍历数组, 在循环体内写条件, 如果每一项都是 true, 就会返回 true, 只要有一个是 false, 就会返回 false</p><p><strong>some</strong>：遍历数组的每一项, 然后根据循环体内的条件去判断, 只要有一个是 true, 就会停止循环</p><p><strong>reduce</strong>：接收一个函数作为累加器, 数组中每个值(从左到右)开始缩减, 最终为一个值</p><p><strong>Array.from()</strong>：用于将两类对象变成数组。一类是类数组对象，一类是可遍历对象。</p><p><strong>Array.of()</strong>：用于将一组值，转换为数组</p><p><strong>find() 和 findIndex()</strong>：用于找出第一个符合条件的数组成员和下标。</p><p><strong>fill()</strong>：方法使用给定值填充一个数组</p><p><strong>includes()</strong>：检查是否包含某个值</p><hr><h4 id="8、新增哪些字符串方法"><a href="#8、新增哪些字符串方法" class="headerlink" title="8、新增哪些字符串方法"></a>8、新增哪些字符串方法</h4><p><strong>startsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的头部</p><p><strong>endsWith()</strong>：返回布尔值，表示参数字符串是否在原字符串的尾部</p><p><strong>includes()</strong>：返回布尔值，表示是否找到了参数字符串</p><p><strong>repeat()</strong>：返回一个新字符串，表示将原字符串重复 n 次</p><p><strong>padStart()</strong>：开始位置填充</p><p><strong>padEnd()</strong>：结束位置填充</p><p><strong>trimStart()</strong>：消除字符串头部的空格</p><p><strong>trimEnd()</strong>：消除字符串尾部的空格</p><p><strong>matchAll()</strong>：返回一个正则表达式在当前字符串的所有匹配</p><hr><h4 id="9、新增哪些对象方法"><a href="#9、新增哪些对象方法" class="headerlink" title="9、新增哪些对象方法"></a>9、新增哪些对象方法</h4><p><strong>Object.is()</strong>：判断两个值是否相等</p><p><strong>Object.assign()</strong>：用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><p><strong>Object.getOwnPropertyDescriptors()</strong>：返回指定对象所有自身属性（非继承属性）的描述对象</p><p><strong>Object.setPrototypeOf()，Object.getPrototypeOf()</strong>：用来读取或设置当前对象的 prototype 对象</p><p><strong>Object.keys()</strong>：用于返回一个数组，成员的参数是对象自身的所有可遍历属性的键名</p><p><strong>Object.values()</strong>：返回值是一个数组，成员是对象自身的（不含继承的）所有可遍历属性的值。</p><p><strong>Object.entries()</strong>：返回一个数组，成员是对象自身（不含继承的）所有可遍历属性的键值对数组，Symbol 属性的值会被过滤。</p><p><strong>Object.fromEntries()</strong>：是 Object.entries 的逆操作，将一个键值对数组转为对象。</p><hr><h4 id="10、async…await"><a href="#10、async…await" class="headerlink" title="10、async…await"></a>10、async…await</h4><p>async…await 是 Generator 函数的语法糖，将*改成 async，将 yield 换成 await。 是对 Generator 函数的改进, 返回 promise。 异步写法同步化，遇到 await 先返回，执行完异步再执行接下来的. 内置执行器, 无需 next()</p><hr><h3 id="五、Vue"><a href="#五、Vue" class="headerlink" title="五、Vue"></a>五、Vue</h3><h4 id="1、生命周期都有哪些，以及在这些生命周期中都做过哪些事情"><a href="#1、生命周期都有哪些，以及在这些生命周期中都做过哪些事情" class="headerlink" title="1、生命周期都有哪些，以及在这些生命周期中都做过哪些事情"></a>1、生命周期都有哪些，以及在这些生命周期中都做过哪些事情</h4><p>beforeCreate 创建之前;无法获取响应数据</p><p>created 创建之后，可以在这加个 loading 事件和进行数据请求</p><p>beforeMount 挂载前 ，在这结束 loading，还做一些初始数据的获取，实现函数自执行</p><p>mounted 挂载后 ，在这发起后端请求，拿回数据，配合路由钩子做一些事情</p><p>beforeUpdate 数据更新之前</p><p>updated 数据更新完成之后</p><p>beforeDestroy 销毁之前 ，你确认删除 XX 吗？或者确认退出吗？</p><p>destroyed 销毁之后 ，当前组件已被删除，清空相关内容，在这获取不到 dom 了</p><hr><h4 id="2、组件通信"><a href="#2、组件通信" class="headerlink" title="2、组件通信"></a>2、组件通信</h4><p>父传子：props、$attrs/$listeners、$children、$root、provide/inject、$refs</p><p>子传父：$emit、$parent、</p><p>同级传：eventBus、vuex</p><hr><h4 id="3、页面通信"><a href="#3、页面通信" class="headerlink" title="3、页面通信"></a>3、页面通信</h4><p>url 拼接参数：”/a?a1=a1”，接收页面：this.$route.query.a1</p><p>query 传参：{path: ‘a’, query: {a2:’a2’}}，接收页面：this.$route.query.a2</p><p>params 传参：{name: ‘a’, params: {a3:’a3’}}，接收页面：this.$route.params.a3</p><p>动态路由传参：/path/a4 ，接收页面：this.$route.params.id，路由：path: “/a/:id”</p><hr><h4 id="4、-set-是干什么的"><a href="#4、-set-是干什么的" class="headerlink" title="4、$set 是干什么的"></a>4、$set 是干什么的</h4><p>当数据变化但没有更新视图时使用，例如对象新增加的属性，数组新增加的成员</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$<span class="token keyword">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="5、-nextTick-是干什么的"><a href="#5、-nextTick-是干什么的" class="headerlink" title="5、$nextTick 是干什么的"></a>5、$nextTick 是干什么的</h4><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><p>例如：在 created 生命周期中想要操作 dom 就可以使用</p><p>this.$nextTick(()=&gt;{ … })可以在 mounted 之前的生命周期中操作 dom</p><hr><h4 id="6、mixin-是干什么的"><a href="#6、mixin-是干什么的" class="headerlink" title="6、mixin 是干什么的"></a>6、mixin 是干什么的</h4><p>提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>      foo<span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"goodbye"</span><span class="token punctuation">,</span>      bar<span class="token punctuation">:</span> <span class="token string">"def"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// => { message: "goodbye", foo: "abc", bar: "def" }</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="7、简单说说-MVVM-的理解"><a href="#7、简单说说-MVVM-的理解" class="headerlink" title="7、简单说说 MVVM 的理解"></a>7、简单说说 MVVM 的理解</h4><p>MVVM 是 Model-View-ViewModel 的缩写。 Model 代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑。 View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来。 ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理 解就是一个同步 View 和 Model 的对象，连接 Model 和 View。 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也 会立即反应到 View 上。 ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起 来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关 注业务逻辑，不需要手动操作 DOM, 不需要关注数据状态的同步问题，复杂的数据状态维 护完全由 MVVM 来统一管理。</p><hr><h4 id="8、watch-和-computed-的区别"><a href="#8、watch-和-computed-的区别" class="headerlink" title="8、watch 和 computed 的区别"></a>8、watch 和 computed 的区别</h4><p>Watch 只能监听 data 中的数据变化，computed 不需要，watch 可以进行异步操作， computed 不可以，computed 不修改原始数据，通过 return 返回处理的数据，可以包含大 量的逻辑运算</p><hr><h4 id="9、v-if-和-v-show-的区别"><a href="#9、v-if-和-v-show-的区别" class="headerlink" title="9、v-if 和 v-show 的区别"></a>9、v-if 和 v-show 的区别</h4><p>9.1、v-show 只是简单的控制元素的 display 属性，而 v-if 才是条件渲染（条件为真，元 素将会被渲染，条件为假，元素会被销毁）；</p><p>9.2、v-show 有更高的首次渲染开销，而 v-if 的首次渲染开销要小的多；</p><p>9.3、v-if 有更高的切换开销，v-show 切换开销小；</p><p>9.4、v-if 有配套的 v-else-if 和 v-else，而 v-show 没有</p><p>9.5、v-if 可以搭配 template 使用，而 v-show 不行</p><hr><h4 id="10、为什么不能-v-for-和-v-if-一起使用"><a href="#10、为什么不能-v-for-和-v-if-一起使用" class="headerlink" title="10、为什么不能 v-for 和 v-if 一起使用"></a>10、为什么不能 v-for 和 v-if 一起使用</h4><p>v-for 优先级是比 v-if 高</p><p>永远不要把 v-if 和 v-for 同时用在一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）</p><p>如果避免出现这种情况，则在外层嵌套 template （页面渲染不生成 dom 节点），再这一层进行 v-if 判断，然后再内部进行 v-for 循环</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">></span> <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in items"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p>如果条件出现再循环内部，可通过计算属性 computed 提前过滤掉那些不需要显示的项</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span><span class="token punctuation">{</span> items<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> item<span class="token punctuation">.</span>isShow  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h4 id="11、key-的作用是什么，值写-index-和-id-哪个更好"><a href="#11、key-的作用是什么，值写-index-和-id-哪个更好" class="headerlink" title="11、key 的作用是什么，值写 index 和 id 哪个更好"></a>11、key 的作用是什么，值写 index 和 id 哪个更好</h4><p>key 是为每个 vnode 指定唯一的 id，在同级 vnode 的 Diff 过程中，可以根据 key 快速的进 行对比，来判断是否为相同节点， 利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快,指定 key 后,可以 保证渲染的准确性(尽可能的复用 DOM 元素。)赋值时应优先使用 id。</p><hr><h4 id="12、过滤器怎么使用"><a href="#12、过滤器怎么使用" class="headerlink" title="12、过滤器怎么使用"></a>12、过滤器怎么使用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 全局使用</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'globalFilter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 局部使用</span>filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">formatMoney</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>p<span class="token operator">></span>过滤器<span class="token punctuation">{</span><span class="token punctuation">{</span> money <span class="token operator">|</span> formatMoney <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><hr><h4 id="13、vuex-五大核心分别是干什么的"><a href="#13、vuex-五大核心分别是干什么的" class="headerlink" title="13、vuex 五大核心分别是干什么的"></a>13、vuex 五大核心分别是干什么的</h4><p>state：Vuex 中的基本数据，辅助函数 mapState</p><p>getters：即从 store 的 state 中派生出的状态，有点类似计算属性，辅助函数 mapGetters</p><p>mutations：是更改 Vuex 中的 store 中的状态的唯一方法，是同步的，辅助函数 mapMutations</p><p>actions：Action 提交的是 mutation，而不是直接变更状态。 Action 可以包含任意异步操作。辅助函数 mapActions</p><p>Modules：Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutations、actions、getters、甚至是嵌套子模块——从上至下进行类似的分割</p><hr><h4 id="14、如何调用-mutations-和-actions-的方法"><a href="#14、如何调用-mutations-和-actions-的方法" class="headerlink" title="14、如何调用 mutations 和 actions 的方法"></a>14、如何调用 mutations 和 actions 的方法</h4><pre class=" language-javascript"><code class="language-javascript">调用mutations：$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'mutations中定义的方法'</span><span class="token punctuation">)</span>调用actions：$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'actions中定义的方法'</span><span class="token punctuation">)</span>actions调用mutations中的方法：<span class="token function">fn</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'mutations中定义的方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="15、vue-router-常写属性都有什么"><a href="#15、vue-router-常写属性都有什么" class="headerlink" title="15、vue-router 常写属性都有什么"></a>15、vue-router 常写属性都有什么</h4><p>router-link 常用属性：</p><p>to 表示目标路由的链接</p><p>replace 设置 replace 属性的话，当点击时，会调用 roter.replace()而不是 router.push()，所以导航后不会留下 history 记录，也就是不能回退到上一个页面</p><p>append 设置 append 属性后，则在当前路径前添加基路径，例如，我们从/a 导航到一个相对路径 b，如果没有配置 append，则路径为/b，如果配了，则为/a/b</p><p>tag 有时候想要<code>&lt;router-link&gt;</code>渲染成某种标签，例如<code>&lt;li&gt;</code>。于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。</p><p>active-class 设置链接激活时使用的 css 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置, 默认值为 ‘router-link-active‘</p><p>exact “是否激活”，默认是 false 。</p><p>vue-router 常用属性：</p><p>path 路由路径</p><p>name 路由名字</p><p>component 导入路由组件</p><p>redirect 路由重定向</p><p>mode 路由模式</p><p>children 子路由</p><p>meta 路由元信息</p><hr><h4 id="16、路由守卫都有哪些以及都做过哪些事情，三个参数分别是干什么的"><a href="#16、路由守卫都有哪些以及都做过哪些事情，三个参数分别是干什么的" class="headerlink" title="16、路由守卫都有哪些以及都做过哪些事情，三个参数分别是干什么的"></a>16、路由守卫都有哪些以及都做过哪些事情，三个参数分别是干什么的</h4><p>全局守卫：beforeEach（登录拦截）、afterEach</p><p>路由独享守卫：beforeEnter（部分路由的登录拦截）</p><p>组件内守卫：beforeRouteEnter（权限管理）、beforeRouteUpdate、beforeRouteLeave</p><p>路由全局解析守卫：beforeResolve（这里根据单页面 name 的指向不同，去访问的接口域名也不同）</p><p>三个参数：to：去哪，from：从哪来，next：下一步</p><pre class=" language-javascript"><code class="language-javascript">当从a页面离开进入b页面时触发的生命周期    <span class="token number">1</span><span class="token punctuation">.</span>beforeRouteLeave<span class="token punctuation">:</span>路由组件的组件离开路由前钩子，可取消路由离开。    <span class="token number">2</span><span class="token punctuation">.</span>beforeEach<span class="token punctuation">:</span> 路由全局前置守卫，可用于登录验证、全局路由loading等。    <span class="token number">3</span><span class="token punctuation">.</span>beforeEnter<span class="token punctuation">:</span> 路由独享守卫    <span class="token number">4</span><span class="token punctuation">.</span>beforeRouteEnter<span class="token punctuation">:</span> 路由的组件进入路由前钩子。    <span class="token number">5</span><span class="token punctuation">.</span>beforeResolve<span class="token punctuation">:</span>路由全局解析守卫    <span class="token number">6</span><span class="token punctuation">.</span>afterEach<span class="token punctuation">:</span>路由全局后置钩子    <span class="token number">7</span><span class="token punctuation">.</span>beforeCreate<span class="token punctuation">:</span>组件生命周期，不能访问<span class="token keyword">this</span>。    <span class="token number">8</span><span class="token punctuation">.</span>created<span class="token punctuation">:</span>组件生命周期，可以访问<span class="token keyword">this</span>，不能访问dom。    <span class="token number">9</span><span class="token punctuation">.</span>beforeMount<span class="token punctuation">:</span>组件生命周期    <span class="token number">10</span><span class="token punctuation">.</span>deactivated<span class="token punctuation">:</span> 离开缓存组件a，或者触发a的beforeDestroy和destroyed组件销毁钩子。    <span class="token number">11</span><span class="token punctuation">.</span>mounted<span class="token punctuation">:</span>访问<span class="token operator">/</span>操作dom。    <span class="token number">12</span><span class="token punctuation">.</span>activated<span class="token punctuation">:</span><span class="token function">进入缓存组件，进入a的嵌套子组件</span><span class="token punctuation">(</span>如果有的话<span class="token punctuation">)</span>。    <span class="token number">13</span><span class="token punctuation">.</span>执行beforeRouteEnter回调函数next。</code></pre><hr><h4 id="17、hash-和-history-模式的区别"><a href="#17、hash-和-history-模式的区别" class="headerlink" title="17、hash 和 history 模式的区别"></a>17、hash 和 history 模式的区别</h4><p>hash 模式就是 url 后面写#锚点，由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件（hashchange 只能改变 # 后面的 url 片段）；更关键的一点是，因为 hash 发生变化的 url 都会被浏览器记录下来，从而你会发现浏览器的前进后退都可以用了，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的</p><p>history 模式：hash 能兼容到 IE8， history 只能兼容到 IE10；hash 本来是拿来做页面定位的，如果拿来做路由的话，原来的锚点功能就不能用了。其次，hash 的传参是基于 url 的，如果要传递复杂的数据，会有体积的限制，而 history 模式不仅可以在 url 里放参数，还可以将数据存放在一个特定的对象中。history api 可以分为两大部分：切换（back、forward、go）和修改（pushState<code>,</code>replaceState）。history 模式的问题：就怕刷新，</p><hr><h4 id="18、说说常用指令有哪些，如何自定义指令"><a href="#18、说说常用指令有哪些，如何自定义指令" class="headerlink" title="18、说说常用指令有哪些，如何自定义指令"></a>18、说说常用指令有哪些，如何自定义指令</h4><p>v-if ：如果是真则渲染节点，否则不渲染节点</p><p>v-if、v-else 和 v-else-if ：类似 js 的 if…else 判断语句</p><p>v-show ：通过 display:none;控制元素显示隐藏</p><p>v-for ：循环，v-for 的优先级高于 v-if，不推荐一起使用</p><p>v-bind ：绑定属性，</p><p>v-on ：绑定事件，</p><p>.stop 阻止事件继续传播</p><p>.prevent 事件不再重载页面</p><p>.capture 使用事件捕获模式,即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理</p><p>.self 只当在 event.target 是当前元素自身时触发处理函数</p><p>.once 事件将只会触发一次</p><p>.passive 告诉浏览器你不想阻止事件的默认行为</p><p>v-model ：数据双向绑定</p><p>.lazy 默认情况下，v-model 同步输入框的值和数据。可以通过这个修饰符，转变为在 change 事件再同步。</p><p>.number 自动将用户的输入值转化为数值类型</p><p>.trim 自动过滤用户输入的首尾空格</p><p>v-text 和 v-html ：用来更新 textContent 和输出真正的 html 结构</p><p>v-pre ：主要用来跳过这个元素和它的子元素编译过程。</p><p>v-cloak ：保持在元素上直到关联实例结束时进行编译。</p><p>v-once ：关联的实例，只会渲染一次。之后的重新渲染，实例极其所有的子节点将被视为静态内容跳过，这可以用于优化更新性能。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 自定义指令 v-focus</span>  directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 指令的定义</span>      inserted<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><hr><h4 id="19、vue-插槽如何使用"><a href="#19、vue-插槽如何使用" class="headerlink" title="19、vue 插槽如何使用"></a>19、vue 插槽如何使用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 比如新建一个&lt;base-layout> 组件</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>header<span class="token operator">></span>    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"header"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>  <span class="token operator">&lt;</span>main<span class="token operator">></span>    <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>  <span class="token operator">&lt;</span>footer<span class="token operator">></span>    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 使用插槽</span><span class="token operator">&lt;</span>base<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>header<span class="token operator">></span> <span class="token comment" spellcheck="true">// 或者 &lt;template #header></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Here might be a page title<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span><span class="token keyword">default</span><span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>A paragraph <span class="token keyword">for</span> the main content<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>And another one<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span>footer<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>Here's some contact info<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>base<span class="token operator">-</span>layout<span class="token operator">></span><span class="token comment" spellcheck="true">// 作用域插槽，比如新建一个&lt;current-user>组件</span><span class="token operator">&lt;</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span>slot v<span class="token operator">-</span>bind<span class="token punctuation">:</span>user<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> user<span class="token punctuation">.</span>lastName <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token comment" spellcheck="true">// 使用插槽</span><span class="token operator">&lt;</span>current<span class="token operator">-</span>user<span class="token operator">></span>  <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token punctuation">:</span><span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"slotProps"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> slotProps<span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>current<span class="token operator">-</span>user<span class="token operator">></span><span class="token comment" spellcheck="true">// 或者缩写</span><span class="token operator">&lt;</span>current<span class="token operator">-</span>user v<span class="token operator">-</span>slot<span class="token operator">=</span><span class="token string">"slotProps"</span><span class="token operator">></span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> slotProps<span class="token punctuation">.</span>user<span class="token punctuation">.</span>firstName <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>current<span class="token operator">-</span>user<span class="token operator">></span></code></pre><hr><h4 id="20、vue-单页应用优缺点"><a href="#20、vue-单页应用优缺点" class="headerlink" title="20、vue 单页应用优缺点"></a>20、vue 单页应用优缺点</h4><p>优点：Vue 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组 件，核心是一个响应的数据绑定系统。MVVM、数据驱动、组件化、轻量、简洁、高效、 快速、模块友好。 只关心数据，不关心 DOM。插件众多。维护状态方便。</p><p>缺点：不支持低版本的浏览器，最低只支持到 IE9；不利于 SEO 的优化（如果要支持 SEO，建议通过服务端来进行渲染组件）；第一次加载首页耗时相对长一些；不可以使用浏 览器的导航按钮需要自行实现前进、后退。</p><hr><h4 id="21、为什么做-SSR，如何实现"><a href="#21、为什么做-SSR，如何实现" class="headerlink" title="21、为什么做 SSR，如何实现"></a>21、为什么做 SSR，如何实现</h4><p>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</p><p>更快的内容到达时间，特别是对于缓慢的网络情况或运行缓慢的设备。通常 可以产生更好的用户体验。</p><p>开发条件所限。浏览器特定的代码，只能在某些生命周期钩子函数中使用； 一些外部扩展库可能需要特殊处理，才能在服务器渲染应用程序中运行。</p><p>涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完 全静态单页面应用程序 (SPA) 不同，服务器渲染应用程序，需要处于 Node.js server 运行环境</p><p>更多的服务器端负载</p><p>通过后端返回 html 结构，在前端进行渲染展示，可使用 Nuxt 实现。</p><hr><h4 id="22、如何实现路由懒加载"><a href="#22、如何实现路由懒加载" class="headerlink" title="22、如何实现路由懒加载"></a>22、如何实现路由懒加载</h4><p>为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题。</p><p>可以将页面进行划分，需要的时候加载页面，可以有效的分担首页所承担的加载压力</p><p>减少首页加载用时。</p><pre class=" language-javascript"><code class="language-javascript">component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./Foo.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者</span>component<span class="token punctuation">:</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"@/components/home"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="23、less-如何设置全局样式"><a href="#23、less-如何设置全局样式" class="headerlink" title="23、less 如何设置全局样式"></a>23、less 如何设置全局样式</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue.config.js 中</span><span class="token keyword">function</span> <span class="token function">addStyleResource</span><span class="token punctuation">(</span>rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>  rule    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"style-resource"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"style-resources-loader"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      patterns<span class="token punctuation">:</span> <span class="token punctuation">[</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/assets/less/global.less"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// module.export 中 使用less</span>  css<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>      less<span class="token punctuation">:</span> <span class="token punctuation">{</span>        lessOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>          javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          globalVars<span class="token punctuation">:</span> <span class="token punctuation">{</span>            primary<span class="token punctuation">:</span> <span class="token string">"#fff"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// less全局变量</span>  chainWebpack<span class="token punctuation">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"vue-modules"</span><span class="token punctuation">,</span> <span class="token string">"vue"</span><span class="token punctuation">,</span> <span class="token string">"normal-modules"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    types<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>      <span class="token function">addStyleResource</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"less"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">oneOf</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><hr><h4 id="24、scoped-的作用是什么"><a href="#24、scoped-的作用是什么" class="headerlink" title="24、scoped 的作用是什么"></a>24、scoped 的作用是什么</h4><p>scoped 的意思是下面的样式的作用域就是当前这个组件，不会影响全局的样式</p><hr><h4 id="25、-router和-route-的区别"><a href="#25、-router和-route-的区别" class="headerlink" title="25、$router和$route 的区别"></a>25、$router和$route 的区别</h4><p>$router是路由跳转，$route 是路由信息</p><hr><h4 id="26、data-和-data-return-的区别"><a href="#26、data-和-data-return-的区别" class="headerlink" title="26、data:{}和 data(){return {}} 的区别"></a>26、data:{}和 data(){return {}} 的区别</h4><p>因为不使用 return 包裹的数据会在项目的全局可见，会造成变量污染，使用 return 包裹后数据中变量只在当前组件中生效，不会影响其他组件。起到保护源数据的效果。</p><hr><h4 id="27、axios-的配置、封装、拦截和跨域"><a href="#27、axios-的配置、封装、拦截和跨域" class="headerlink" title="27、axios 的配置、封装、拦截和跨域"></a>27、axios 的配置、封装、拦截和跨域</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 跨域：在config文件夹中的index.js中的devServe中填写</span>proxyTable：<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// cli3.0+  是在vue.config.js中配置proxy</span> <span class="token string">'/api'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>  Target：’代理服务器的目标地址’，  changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  PathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>“<span class="token operator">^</span><span class="token operator">/</span>api”<span class="token punctuation">:</span>” ”<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装和拦截</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">const</span> http <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> <span class="token string">"/api"</span><span class="token punctuation">,</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"Context‐Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求拦截</span>http<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const token = sessionStorage.getItem('token') ? sessionStorag.getItem('token') : '';</span>    <span class="token comment" spellcheck="true">// if(token){给headers添加token}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 响应拦截</span>http<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// const code = res.code</span>    <span class="token comment" spellcheck="true">// if(code === 404){router.replace()}</span>    <span class="token comment" spellcheck="true">// if(code === 200){router.replace()}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    http      <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    http      <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> params<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">,</span> post <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="28、cli-各版本构建项目的命令和启动命令"><a href="#28、cli-各版本构建项目的命令和启动命令" class="headerlink" title="28、cli 各版本构建项目的命令和启动命令"></a>28、cli 各版本构建项目的命令和启动命令</h4><p>创建项目：<br>cli2.0：vue init webpack 项目名<br>cli3.0+：vue create 项目名<br>启动项目：<br>cli2.0：npm run dev<br>cli3.0+：npm run serve</p><hr><h4 id="29、简单谈谈你对-vue3-0-的理解"><a href="#29、简单谈谈你对-vue3-0-的理解" class="headerlink" title="29、简单谈谈你对 vue3.0 的理解"></a>29、简单谈谈你对 vue3.0 的理解</h4><p>29.1、vue3.0 和 vue2.0 最大的区别就是 api 从原来的 options API 变成了 composition API + options API ，编写代码更灵活、复用率更高。</p><p>29.2、vue3.0 比 vue2.0 快 2 倍，Tree-shaking 更友好</p><p>29.3、vue3.0 支持 TypeScript 以及 PWA</p><p>29.4、数据双向绑定从 Object.defineProperty 变成了 new Proxy，不用再使用$set 了</p><p>29.5、其他方面的更改：支持自定义渲染器、支持 Fragment 和 Protal 组件等。</p><hr><h4 id="30、简单说说双向绑定的原理"><a href="#30、简单说说双向绑定的原理" class="headerlink" title="30、简单说说双向绑定的原理"></a>30、简单说说双向绑定的原理</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 发布订阅模式实现的数据依赖采集器</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">addSub</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Dep<span class="token punctuation">.</span>depTargets <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> getter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getter <span class="token operator">=</span> getter<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Dep<span class="token punctuation">.</span>depTargets <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Dep<span class="token punctuation">.</span>depTargets <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> typeTo <span class="token operator">=</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 观察者模式监听所有属性的变化</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">===</span> value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>      dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> topTarget <span class="token operator">=</span> Dep<span class="token punctuation">.</span>depTargets<span class="token punctuation">;</span>      dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>topTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">walk</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//监听所有属性</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeTo</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">walk</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">defineReactive</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">typeTo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token function">walk</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$mounte</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="31、做过哪些-vue-的性能优化"><a href="#31、做过哪些-vue-的性能优化" class="headerlink" title="31、做过哪些 vue 的性能优化"></a>31、做过哪些 vue 的性能优化</h4><p>31.1、长列表性能优化：可以通过 Object.freeze 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> books <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>31.2、优化无限列表性能：如果应用存在非常长或者无限滚动的列表，那么需要采用“窗口化”的技术来优化性能，只需要渲染少部分区域的内容，减少重新渲染组件和创建 dom 节点的时间。window.requestAnimationFrame 方法可以设置延迟加载的功能</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 插入十万条数据</span>  <span class="token keyword">const</span> total <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 一次20条，可根据性能问题自己调整</span>  <span class="token keyword">const</span> MAX_ONCE <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 渲染数据需要的次数</span>  <span class="token keyword">const</span> loopCount <span class="token operator">=</span> total <span class="token operator">/</span> MAX_ONCE<span class="token punctuation">;</span>  <span class="token keyword">let</span> countOfRender <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 优化，不允许插入数据引起回流</span>    <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_ONCE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      li<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> + </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>      fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span><span class="token punctuation">;</span>    countOfRender <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>countOfRender <span class="token operator">&lt;</span> loopCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>      window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="32、vue-的-diff-算法和虚拟-dom"><a href="#32、vue-的-diff-算法和虚拟-dom" class="headerlink" title="32、vue 的 diff 算法和虚拟 dom"></a>32、vue 的 diff 算法和虚拟 dom</h4><p>虚拟 DOM 就是为了解决浏览器性能问题而被设计出来的。若一次操作中有 N 次更新 DOM 的动作，虚拟 DOM 不会立即操作 DOM，而是将这 N 次更新的 diff 内容保存到本地一个 JS 对象中，最终将这个 JS 对象一次性添加到 DOM 树上，再进行后续操作，避免大量无谓的计算量。所以，用 JS 对象模拟 DOM 节点的好处是，页面的更新可以先全部反映在 JS 对象(虚拟 DOM)上，操作内存中的 JS 对象的速度显然要更快，等更新完成后，再将最终的 JS 对象映射成真实的 DOM，交由浏览器去绘制。</p><p>vue 的 diff 算法：只进行同层级比较，忽略跨级操作，从两头向中间进行对比。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//diff时调用patch函数，patch接收两个参数vnode，oldVnode，分别代表新旧节点。</span><span class="token keyword">function</span> patch <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> oEl <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>el        <span class="token keyword">let</span> parentEle <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">parentNode</span><span class="token punctuation">(</span>oEl<span class="token punctuation">)</span>        <span class="token function">createEle</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentEle <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            api<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentEle<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>el<span class="token punctuation">,</span> api<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oEl<span class="token punctuation">)</span><span class="token punctuation">)</span>            api<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>parentEle<span class="token punctuation">,</span> oldVnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span>            oldVnode <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// patch函数内第一个if判断sameVnode(oldVnode, vnode)就是判断这两个节点是否为同一类型节点</span><span class="token keyword">function</span> <span class="token function">sameVnode</span><span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//两节点key值相同，并且sel属性值相同，即认为两节点属同一类型，可进行下一步比较</span>    <span class="token keyword">return</span> vnode<span class="token punctuation">.</span>key <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>sel <span class="token operator">===</span> oldVnode<span class="token punctuation">.</span>sel<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//也就是说，即便同一个节点元素比如div，他的className不同，Vue就认为是两个不同类型的节点，执行删除旧节点、插入新节点操作。这与react diff实现是不同的，react对于同一个节点元素认为是同一类型节点，只更新其节点上的属性。</span><span class="token comment" spellcheck="true">//对于同类型节点调用patchVnode(oldVnode, vnode)进一步比较</span>patchVnode <span class="token punctuation">(</span>oldVnode<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> el <span class="token operator">=</span> vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>el  <span class="token comment" spellcheck="true">//让vnode.el引用到现在的真实dom，当el修改时，vnode.el会同步变化。</span>    <span class="token keyword">let</span> i<span class="token punctuation">,</span> oldCh <span class="token operator">=</span> oldVnode<span class="token punctuation">.</span>children<span class="token punctuation">,</span> ch <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode <span class="token operator">===</span> vnode<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment" spellcheck="true">//新旧节点引用一致，认为没有变化</span>    <span class="token comment" spellcheck="true">//文本节点的比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldVnode<span class="token punctuation">.</span>text <span class="token operator">!==</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        api<span class="token punctuation">.</span><span class="token function">setTextContent</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">updateEle</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//对于拥有子节点(两者的子节点不同)的两个节点，调用updateChildren</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&amp;&amp;</span> oldCh <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">updateChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> ch<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//只有新节点有子节点，添加新的子节点</span>            <span class="token function">createEle</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//create el's children dom</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCh<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//只有旧节点内存在子节点，执行删除子节点操作</span>            api<span class="token punctuation">.</span><span class="token function">removeChildren</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 更新vnode：updateChildren</span><span class="token keyword">function</span> updateChildren <span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> removeOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> oldStartIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newStartIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> oldEndIdx <span class="token operator">=</span> oldCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newEndIdx <span class="token operator">=</span> newCh<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> oldKeyToIdx<span class="token punctuation">,</span> idxInOld<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">,</span> refElm<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// removeOnly is a special flag used only by &lt;transition-group></span>    <span class="token comment" spellcheck="true">// to ensure removed elements stay in correct relative positions</span>    <span class="token comment" spellcheck="true">// during leaving transitions</span>    <span class="token keyword">var</span> canMove <span class="token operator">=</span> <span class="token operator">!</span>removeOnly<span class="token punctuation">;</span>    <span class="token punctuation">{</span>      <span class="token function">checkDuplicateKeys</span><span class="token punctuation">(</span>newCh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果索引正常</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">&lt;=</span> oldEndIdx <span class="token operator">&amp;&amp;</span> newStartIdx <span class="token operator">&lt;=</span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 当前的开始旧节点没有定义，进入下一个节点</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Vnode has been moved left</span>        <span class="token comment" spellcheck="true">// 当前的结束旧节点没有定义，进入上一个节点</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果旧的开始节点与新的开始节点相同，则开始更新该节点，然后进入下一个节点</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　　　　<span class="token comment" spellcheck="true">// 更新节点</span>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果旧的结束节点与新的结束节点相同，则开始更新该节点，然后进入下一个节点</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果旧的开始节点与新的结束节点相同，更新节点后把旧的开始节点移置节点末尾</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Vnode moved right</span>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldStartVnode<span class="token punctuation">,</span> newEndVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> nodeOps<span class="token punctuation">.</span><span class="token function">nextSibling</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oldStartVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">++</span>oldStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        newEndVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">--</span>newEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果旧的结束节点与新的开始节点相同，更新节点后把旧的结束节点移置节点开头</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Vnode moved left</span>        <span class="token function">patchVnode</span><span class="token punctuation">(</span>oldEndVnode<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldEndVnode<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>        oldEndVnode <span class="token operator">=</span> oldCh<span class="token punctuation">[</span><span class="token operator">--</span>oldEndIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>        newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 如果旧的节点没有定义key，则创建key</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>oldKeyToIdx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> oldKeyToIdx <span class="token operator">=</span> <span class="token function">createKeyToOldIdx</span><span class="token punctuation">(</span>oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        idxInOld <span class="token operator">=</span> <span class="token function">isDef</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">)</span>          <span class="token operator">?</span> oldKeyToIdx<span class="token punctuation">[</span>newStartVnode<span class="token punctuation">.</span>key<span class="token punctuation">]</span>          <span class="token punctuation">:</span> <span class="token function">findIdxInOld</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果没有定义index,则创建新的新的节点元素</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUndef</span><span class="token punctuation">(</span>idxInOld<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// New element</span>          <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          vnodeToMove <span class="token operator">=</span> oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sameVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">patchVnode</span><span class="token punctuation">(</span>vnodeToMove<span class="token punctuation">,</span> newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>            oldCh<span class="token punctuation">[</span>idxInOld<span class="token punctuation">]</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span>            canMove <span class="token operator">&amp;&amp;</span> nodeOps<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> vnodeToMove<span class="token punctuation">.</span>elm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// same key but different element. treat as new element</span>            <span class="token function">createElm</span><span class="token punctuation">(</span>newStartVnode<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">,</span> parentElm<span class="token punctuation">,</span> oldStartVnode<span class="token punctuation">.</span>elm<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        newStartVnode <span class="token operator">=</span> newCh<span class="token punctuation">[</span><span class="token operator">++</span>newStartIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果旧节点的开始index大于结束index,则创建新的节点  如果新的开始节点index大于新的结束节点则删除旧的节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldStartIdx <span class="token operator">></span> oldEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>      refElm <span class="token operator">=</span> <span class="token function">isUndef</span><span class="token punctuation">(</span>newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> newCh<span class="token punctuation">[</span>newEndIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elm<span class="token punctuation">;</span>      <span class="token function">addVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> refElm<span class="token punctuation">,</span> newCh<span class="token punctuation">,</span> newStartIdx<span class="token punctuation">,</span> newEndIdx<span class="token punctuation">,</span> insertedVnodeQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newStartIdx <span class="token operator">></span> newEndIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">removeVnodes</span><span class="token punctuation">(</span>parentElm<span class="token punctuation">,</span> oldCh<span class="token punctuation">,</span> oldStartIdx<span class="token punctuation">,</span> oldEndIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><hr><h4 id="33、vuex-页面刷新后数据丢失？和-history-模式刷新-404-问题？"><a href="#33、vuex-页面刷新后数据丢失？和-history-模式刷新-404-问题？" class="headerlink" title="33、vuex 页面刷新后数据丢失？和 history 模式刷新 404 问题？"></a>33、vuex 页面刷新后数据丢失？和 history 模式刷新 404 问题？</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//   在页面加载时读取sessionStorage里的状态信息</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">,</span>      JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//   页面刷新时将state数据存储到sessionStorage中</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"beforeunload"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// history模式刷新404问题   在vue.config.js中配置</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//这个必须，引入静态资源需要从根路径引入，否则会找不到静态资源</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// history模式下的url会请求到服务器端，但是服务器端并没有这一个资源文件，就会返回404，所以需要配置这一项</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>      index<span class="token punctuation">:</span> <span class="token string">"/index.html"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//与output的publicPath</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="34、Vue-开发中如何使用全局状态常量？你都用这个状态常量做什么事情"><a href="#34、Vue-开发中如何使用全局状态常量？你都用这个状态常量做什么事情" class="headerlink" title="34、Vue 开发中如何使用全局状态常量？你都用这个状态常量做什么事情"></a>34、Vue 开发中如何使用全局状态常量？你都用这个状态常量做什么事情</h4><p>比如最常见的全局状态常量就是 process.env.NODE_ENV</p><p>它的值可能是：production、development</p><p>就是 webpack.config.js 中的 mode。</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 比如现在是开发模式，我就显示一个某某功能按钮。</span><span class="token operator">&lt;</span>button v‐<span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"process.env.NODE_ENV === 'develpment'"</span><span class="token operator">></span>测试按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>npm run serve 的时候看的见这个按钮npm run build 的时候看不见这个按钮</code></pre><hr><h4 id="35、动态路由"><a href="#35、动态路由" class="headerlink" title="35、动态路由"></a>35、动态路由</h4><p>通过 addRoutes() 动态添加路由信息</p><hr><h3 id="六、React"><a href="#六、React" class="headerlink" title="六、React"></a>六、React</h3><h4 id="1、调用-setState-之后发生了什么？"><a href="#1、调用-setState-之后发生了什么？" class="headerlink" title="1、调用 setState 之后发生了什么？"></a>1、调用 setState 之后发生了什么？</h4><p>在代码中调用 setState 函数之后，React 会将传入的参数对象与组件当前的状态合 并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的 方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。在 React 得到元素 树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重 渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改 变，这就保证了按需更新，而不是全部重新渲染。</p><hr><h4 id="2、react-生命周期函数"><a href="#2、react-生命周期函数" class="headerlink" title="2、react 生命周期函数"></a>2、react 生命周期函数</h4><p>初始化阶段：</p><p>getDefaultProps:获取实例的默认属性</p><p>getInitialState:获取每个实例的初始化状态</p><p>componentWillMount：组件即将被装载、渲染到页面上</p><p>render:组件在这里生成虚拟的 DOM 节点</p><p>componentDidMount:组件真正在被装载之后</p><p>运行中状态：</p><p>componentWillReceiveProps:组件将要接收到属性的时候调用</p><p>shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回 false， 接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）</p><p>componentWillUpdate:组件即将更新不能修改属性和状态</p><p>render:组件重新描绘 componentDidUpdate:组件已经更新</p><p>销毁阶段：</p><p>componentWillUnmount:组件即将销毁</p><hr><h4 id="3、为什么虚拟-dom-会提高性能"><a href="#3、为什么虚拟-dom-会提高性能" class="headerlink" title="3、为什么虚拟 dom 会提高性能?"></a>3、为什么虚拟 dom 会提高性能?</h4><p>虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没 有必要的 dom 操作，从而提高性能。 用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进 行比较，记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视 图就更新了。</p><hr><h4 id="4、react-diff-原理"><a href="#4、react-diff-原理" class="headerlink" title="4、react diff 原理"></a>4、react diff 原理</h4><p>把树形结构按照层级分解，只比较同级元素。 给列表结构的每个单元添加唯一的 key 属性，方便比较。 React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字） 合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一 个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制. 选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。</p><hr><h4 id="5、React-中-refs-的作用是什么？"><a href="#5、React-中-refs-的作用是什么？" class="headerlink" title="5、React 中 refs 的作用是什么？"></a>5、React 中 refs 的作用是什么？</h4><p>Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以 为元素添加 ref 属性然后在回调函数中接受该元素在 DOM 树中的句柄，该值会作为回调函 数的第一个参数返回</p><hr><h4 id="6、展示组件和容器组件之间有何不同？"><a href="#6、展示组件和容器组件之间有何不同？" class="headerlink" title="6、展示组件和容器组件之间有何不同？"></a>6、展示组件和容器组件之间有何不同？</h4><p>展示组件关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不 会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心 UI 状态而不是数据的状 态。 容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数 据和行为(behavior)，它们会调用 actions，并将其作为回调提供给展示组件。容器组件经 常是有状态的，因为它们是(其它组件的)数据源。</p><hr><h4 id="7、类组件和函数式组件之间有何不同？"><a href="#7、类组件和函数式组件之间有何不同？" class="headerlink" title="7、类组件和函数式组件之间有何不同？"></a>7、类组件和函数式组件之间有何不同？</h4><p>类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组 件直接访问 store 并维持状态 当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 ‘无状态组件 (stateless component)’，可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组 件(dumb components)或展示组件</p><hr><h4 id="8、createElement-和-cloneElement-有什么区别？"><a href="#8、createElement-和-cloneElement-有什么区别？" class="headerlink" title="8、createElement 和 cloneElement 有什么区别？"></a>8、createElement 和 cloneElement 有什么区别？</h4><p>React.createElement():JSX 语法就是用 React.createElement()来构建 React 元素 的。它接受三个参数，第一个参数可以是一个标签名。如 div、span，或者 React 组件。 第二个参数为传入的属性。第三个以及之后的参数，皆作为组件的子组件。</p><pre class=" language-javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>React.cloneElement()与 React.createElement()相似，不同的是它传入的第一个参数 是一个 React 元素，而不是标签名或组件。新添加的属性会并入原有的属性，传入到返回 的新元素中，而旧的子元素将被替换。</p><pre class=" language-javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>children<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="9、简述-flux-思想"><a href="#9、简述-flux-思想" class="headerlink" title="9、简述 flux 思想"></a>9、简述 flux 思想</h4><p>Flux 的最大特点，就是数据的”单向流动”。 用户访问 View ，View 发出用户的 Action， Dispatcher 收到 Action，要求 Store 进行相应的更新， Store 更新后，发出一个”change”事件， View 收到”change”事件后，更新页面</p><hr><h4 id="10、了解-redux-么，说一下-redux"><a href="#10、了解-redux-么，说一下-redux" class="headerlink" title="10、了解 redux 么，说一下 redux"></a>10、了解 redux 么，说一下 redux</h4><p>redux 是一个应用数据流框架，主要是解决了组件间状态共享的问题，原理是集中式管 理，主要有三个核心方法，action，store，reducer，工作流程是 view 调用 store 的 dispatch 接收 action 传入 store，reducer 进行 state 操作，view 通过 store 提供的 getState 获取最新的数据，flux 也是用来进行数据操作的，有四个组成部分 action， dispatch，view，store，工作流程是 view 发出一个 action，派发器接收 action，让 store 进行数据更新，更新完成以后 store 发出 change，view 接受 change 更新视图。 Redux 和 Flux 很像。主要区别在于 Flux 有多个可以改变应用状态的 store，在 Flux 中 dispatcher 被用来传递数据到注册的回调事件，但是在 redux 中只能定义一个可更新状态 的 store，redux 把 store 和 Dispatcher 合并,结构更加简单清晰</p><p>新增 state,对状态的管理更加明确，通过 redux，流程更加规范了，减少手动编码量， 提高了编码效率，同时缺点时当数据更新时有时候组件不需要，但是也要重新绘制，有些影 响效率。一般情况下，我们在构建多交互，多数据流的复杂项目应用时才会使用它们</p><hr><h4 id="11、什么是-JSX？"><a href="#11、什么是-JSX？" class="headerlink" title="11、什么是 JSX？"></a>11、什么是 JSX？</h4><p>JSX 即 JavaScript XML。一种在 React 组件内部构建标签的类 XML 语法。JSX 为 react.js 开发的一套语法糖，也是 react.js 的使用基础。React 在不使用 JSX 的情况下一样可以工作， 然而使用 JSX 可以提高组件的可读性，因此推荐使用 JSX。</p><p>优点：</p><p>1.允许使用熟悉的语法来定义 HTML 元素树；</p><p>2.提供更加语义化且移动的标签；</p><p>3.程序结构更容易被直观化；</p><p>4.抽象了 React Element 的创建过程；</p><p>5.可以随时掌控 HTML 标签以及生成这些标签的代码；</p><p>6.是原生的 JavaScript。</p><hr><h4 id="12、React-Hooks-是什么"><a href="#12、React-Hooks-是什么" class="headerlink" title="12、React Hooks 是什么"></a>12、React Hooks 是什么</h4><p>Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如，useState 是允 许你在 React 函数组件中添加 state 的 Hook。如果你在编写函数组件并意识到需要向其添 加一些 state，以前的做法是必须将其它转化为 class。现在你可以在现有的函数组件中使 用 Hook。</p><p>hooks 优势：无需复杂的 DOM 结构，简洁易懂</p><p>他允许你在不写 class 的情况下操作 state 和 react 的其他特性。hooks 只是多了一种写 组件的方法，使编写一个组件更简单更方便，同时可以自定义 hook 把公共的逻辑提取出 来，让逻辑在多个组件之间共享。</p><hr><h4 id="13、class-组件有什么不足"><a href="#13、class-组件有什么不足" class="headerlink" title="13、class 组件有什么不足"></a>13、class 组件有什么不足</h4><p>1.生命周期臃肿，逻辑耦合；</p><p>2.逻辑难以复用；通过继承解决，不支持多继承；通过高阶组件解决，会增加额外的组 件嵌套；通过渲染属性解决，也会增加额外组件嵌套，层级臃肿</p><p>3.class 存在 this 指向问题；匿名函数解决，每次创建新的函数，子组件重复不必要渲 染；bind 解决，需要写很多跟逻辑状态无关的代码</p><hr><h3 id="七、小程序"><a href="#七、小程序" class="headerlink" title="七、小程序"></a>七、小程序</h3><h4 id="1、简单描述下微信小程序的相关文件类型"><a href="#1、简单描述下微信小程序的相关文件类型" class="headerlink" title="1、简单描述下微信小程序的相关文件类型"></a>1、简单描述下微信小程序的相关文件类型</h4><p>微信小程序项目结构主要有四个文件类型</p><p>WXML（WeiXin Markup Language）是框架设计的一套标签语言，结合基础组件、 事件系统，可以构建出页面的结构。内部主要是微信自己定义的一套组件</p><p>WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式</p><p>js 逻辑处理，网络请求</p><p>json 小程序设置，如页面注册，页面标题及 tabBar</p><p>主要文件</p><p>app.json 必须要有这个文件，如果没有这个文件，项目无法运行，因为微信框架把这 个作为配置文件入口，整个小程序的全局配置。包括页面注册，网络设置，以及小程序的 window 背景色，配置导航条样式，配置默认标题，底部导航等</p><p>app.js 必须要有这个文件，没有也是会报错！但是这个文件创建一下就行 什么都不需 要写以后我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量</p><p>app.wxss 可选，全局样式</p><hr><h4 id="2、简述微信小程序原理"><a href="#2、简述微信小程序原理" class="headerlink" title="2、简述微信小程序原理"></a>2、简述微信小程序原理</h4><p>微信小程序采用 JavaScript、WXML、WXSS 三种技术进行开发,本质就是一个单页面 应用，所有的页面渲染和事件处理，都在一个页面内进行，但又可以通过微信客户端调用原 生的各种接口微信的架构，是数据驱动的架构模式，它的 UI 和数据是分离的，所有的页面 更新，都需要通过对数据的更改来实现</p><p>小程序分为两个部分 webview 和 appService 。其中 webview 主要用来展现 UI ， appService 有来处理业务逻辑、数据及接口调用。它们在两个进程中运行，通过系统层 JSBridge 实现通信，实现 UI 的渲染、事件的处理</p><hr><h4 id="3、小程序的双向绑定和-vue-哪里不一样"><a href="#3、小程序的双向绑定和-vue-哪里不一样" class="headerlink" title="3、小程序的双向绑定和 vue 哪里不一样"></a>3、小程序的双向绑定和 vue 哪里不一样</h4><p>小程序直接 this.data 的属性是不可以同步到视图的，必须调用： this.setData({ // 这里设置 })</p><hr><h4 id="4、小程序页面间有哪些传递数据的方法"><a href="#4、小程序页面间有哪些传递数据的方法" class="headerlink" title="4、小程序页面间有哪些传递数据的方法"></a>4、小程序页面间有哪些传递数据的方法</h4><p>4.1、使用全局变量实现数据传递,在 app.js 文件中定义全局变量 globalData， 将需要存 储的信息存放在里面</p><p>4.2、使用 wx.navigateTo 与 wx.redirectTo 的时候，可以将部分数据放在 url 里面，并 在新页面 onLoad 的时候接收</p><p>4.3、使用本地存储 Storage</p><hr><h4 id="5、小程序的生命周期函数"><a href="#5、小程序的生命周期函数" class="headerlink" title="5、小程序的生命周期函数"></a>5、小程序的生命周期函数</h4><p>onLoad 页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取打 开当前页面路径中的参数</p><p>onShow() 页面显示/切入前台时触发</p><p>onReady() 页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥 当，可以和视图层进行交互</p><p>onHide() 页面隐藏/切入后台时触发。 如 navigateTo 或底部 tab 切换到其他页面， 小程序切入后台等</p><p>onUnload() 页面卸载时触发。如 redirectTo 或 navigateBack 到其他页面时</p><hr><h4 id="6、小程序组件通信"><a href="#6、小程序组件通信" class="headerlink" title="6、小程序组件通信"></a>6、小程序组件通信</h4><p>父传子：组件上写自定义属性，子组件通过 properties 接收</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件</span><span class="token operator">&lt;</span>banner  step<span class="token operator">=</span><span class="token string">"{{step}}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>banner<span class="token operator">></span><span class="token comment" spellcheck="true">//子组件</span><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>    step<span class="token punctuation">:</span><span class="token punctuation">{</span>      type<span class="token punctuation">:</span>Number    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>子传父：通过自定义事件 triggerEvent</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//子组件</span> <span class="token function">realNameConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">'realNameConfirm'</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//通过triggerEvent将参数传给父组件</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//父组件</span><span class="token operator">&lt;</span>realName  bind<span class="token punctuation">:</span>realNameConfirm<span class="token operator">=</span><span class="token string">"realNameConfirm"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>realName<span class="token operator">></span></code></pre><p>调取子组件的实例 selectComponent</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>banner id<span class="token operator">=</span><span class="token string">"banner"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>banner<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectComponent</span><span class="token punctuation">(</span><span class="token string">"#banner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="八、常见编程题"><a href="#八、常见编程题" class="headerlink" title="八、常见编程题"></a>八、常见编程题</h3><h4 id="1、数组去重"><a href="#1、数组去重" class="headerlink" title="1、数组去重"></a>1、数组去重</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// indexOf</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 双层循环</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>    r<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// hash表</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> hash <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hash<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hash<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// set</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 排序后，相邻相同去重</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> re<span class="token punctuation">[</span>re<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      re<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> re<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="2、数组排序"><a href="#2、数组排序" class="headerlink" title="2、数组排序"></a>2、数组排序</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 冒泡排序</span><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 选择排序</span><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 插入排序</span><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>    temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 归并去重</span><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">>=</span> hi<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> lo<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> lo<span class="token punctuation">;</span>  <span class="token keyword">let</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> aux <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    aux<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token operator">=</span> lo<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> hi<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>aux<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> aux<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> aux<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h4 id="3、统计字符串中出现次数最多的字符"><a href="#3、统计字符串中出现次数最多的字符" class="headerlink" title="3、统计字符串中出现次数最多的字符"></a>3、统计字符串中出现次数最多的字符</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"12342535646757765453423"</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">?</span> res<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">++</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {1: 1, 2: 3, 3: 4, 4: 4, 5: 5, 6: 3, 7: 3}</span></code></pre><hr><h4 id="4、手写数组-filter-方法"><a href="#4、手写数组-filter-方法" class="headerlink" title="4、手写数组 filter 方法"></a>4、手写数组 filter 方法</h4><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>guolv <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="5、手写数组-map-方法"><a href="#5、手写数组-map-方法" class="headerlink" title="5、手写数组 map 方法"></a>5、手写数组 map 方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// for循环实现</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myMap <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> <span class="token punctuation">[</span>fn<span class="token punctuation">,</span> thisValue<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisValue<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// forEach实现(reduce类似)</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myMap <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisValue<span class="token punctuation">,</span> v<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="6、函数柯里化"><a href="#6、函数柯里化" class="headerlink" title="6、函数柯里化"></a>6、函数柯里化</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 标准版</span><span class="token keyword">function</span> <span class="token function">currying</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token operator">...</span>newArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newArgs<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>newArgs<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> _c<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> addCurry <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prev <span class="token operator">+</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意调用方式的变化</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 简单版</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">+</span><span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">return</span> fn<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  fn<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> fn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="7、数组扁平化"><a href="#7、数组扁平化" class="headerlink" title="7、数组扁平化"></a>7、数组扁平化</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 二维数组转一维数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> cur<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 合并pre 与 cur, 并返回一个新数组</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多维数组转一维数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">iterator</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">iterator</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">iterator</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="8、手写-bind-方法"><a href="#8、手写-bind-方法" class="headerlink" title="8、手写 bind 方法"></a>8、手写 bind 方法</h4><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 保存原函数</span>  <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取出第一个参数作为上下文, 相当于[].shift.call(arguments)</span>  <span class="token keyword">var</span> context <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>shift<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 取剩余的参数作为arg; 因为arguments是伪数组, 所以要转化为数组才能使用数组方法</span>  <span class="token keyword">var</span> arg <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回一个新函数</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 绑定上下文并传参</span>    self<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>      context<span class="token punctuation">,</span>      Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>concat<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="9、数组交集、差集"><a href="#9、数组交集、差集" class="headerlink" title="9、数组交集、差集"></a>9、数组交集、差集</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//交集</span><span class="token keyword">function</span> <span class="token function">intersection</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//差集</span><span class="token keyword">function</span> <span class="token function">differencesection</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">!</span>arr2<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="10、连续重复最长的项"><a href="#10、连续重复最长的项" class="headerlink" title="10、连续重复最长的项"></a>10、连续重复最长的项</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">maxRepeat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> maxCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> maxChar <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">></span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxCount <span class="token operator">=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>        maxChar <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      i <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    maxCount<span class="token punctuation">,</span>    maxChar<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">maxRepeat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h4 id="11、手写-queryString"><a href="#11、手写-queryString" class="headerlink" title="11、手写 queryString"></a>11、手写 queryString</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// {"a":1,"b":2} => "a=1&amp;b=2"</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> o<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "a=1&amp;b=2" => {"a":1,"b":2}</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"a=1&amp;b=2"</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> k <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> v <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h4 id="12、手写-splice-方法"><a href="#12、手写-splice-方法" class="headerlink" title="12、手写 splice 方法"></a>12、手写 splice 方法</h4><pre class=" language-javascript"><code class="language-javascript">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>removeIndex <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> length <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">this</span><span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="13、手写-call-方法"><a href="#13、手写-call-方法" class="headerlink" title="13、手写 call 方法"></a>13、手写 call 方法</h4><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myCall <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  context <span class="token operator">=</span> context <span class="token operator">||</span> window<span class="token punctuation">;</span>  context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="14、时间复杂度和空间复杂度"><a href="#14、时间复杂度和空间复杂度" class="headerlink" title="14、时间复杂度和空间复杂度"></a>14、时间复杂度和空间复杂度</h4><p>常见时间复杂度</p><p><img src="https://img-blog.csdn.net/20170327162904721" alt="img"></p><p><img src="https://img-blog.csdn.net/20170327164357916" alt="img"></p><hr><h3 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h3><h4 id="1、webpack-的基本配置"><a href="#1、webpack-的基本配置" class="headerlink" title="1、webpack 的基本配置"></a>1、webpack 的基本配置</h4><p>1.1、entry（项目入口，打包的入口文件，一个字符串或者一个对象）：entry:”./src/index.js”</p><p>1.2、output（出口文件，配置打包的结果，一个对象）：</p><pre class=" language-javascript"><code class="language-javascript">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>  filename<span class="token punctuation">:</span> <span class="token string">"build.js"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1.3、module（模块的处理）：loader 的配置主要在 module.rules 中进行，例如：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/(\.jsx|\.js)/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//表示匹配规则，是一个正则表达式</span>      use<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//表示针对匹配文件将使用处理的loader</span>        loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token string">"react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1.4、plugin（loader 不能做的处理都能交给 plugin 来做），例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">{</span>  plugin<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">"process.env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        NODE_ENV<span class="token punctuation">:</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">"production"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      root<span class="token punctuation">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/stu/"</span><span class="token punctuation">,</span>      verbose<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      dry<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>1.5、其它常用属性：</p><p>devTool:打包后的代码和原始代码存在较大的差异，此选项控制是否生成以及如何生成 sourcemap</p><p>devServer：通过配置 devserver 选项，可以开启一个本地服务器（通常在这里配置跨域）</p><pre class=" language-javascript"><code class="language-javascript">  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://www.baidu.com/'</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'^/api'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// target是域名的话，需要这个参数，</span>        secure<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 设置支持https协议的代理</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>watch：启用 watch 模式后，webpack 将持续监听热河已经解析文件的更改，开发时开启会很方便</p><p>watchoption：用来定制 watch 模式的选项</p><p>performance：打包后命令行如何展示性能提示，如果超过某个大小是警告还是报错</p><p><strong>1.6、webpack 打包优化常用配置</strong>：</p><p>1.6.1、减小打包体积：</p><p>使用 CommonsChunkPlugin 分离第三方包</p><pre class=" language-javascript"><code class="language-javascript">entry<span class="token punctuation">:</span> <span class="token punctuation">{</span> vendor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'babel-polyfill'</span><span class="token punctuation">,</span> <span class="token string">"axios"</span><span class="token punctuation">,</span> <span class="token string">"marked"</span><span class="token punctuation">,</span> <span class="token string">"react"</span><span class="token punctuation">,</span> <span class="token string">"react-dom"</span><span class="token punctuation">,</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 第三方文件</span> app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"vendor"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当加载 vendor 中的资源的时候，把这些资源都合并到 vendor.js 文件中</span>  filename<span class="token punctuation">:</span> <span class="token string">"js/vendor.js"</span><span class="token punctuation">,</span>  minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span><span class="token punctuation">,</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>或者使用 externals 进行 cdn 网络托管：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// index.html页面中引入</span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/react/15.0.0/react-with-addons.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/react/15.0.0/react-dom.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/react-router/3.0.0/ReactRouter.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/redux/3.6.0/redux.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/react-redux/5.0.1/react-redux.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/history/4.5.0/history.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// webpack中配置</span>externals<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token string">'react'</span><span class="token punctuation">:</span> <span class="token string">'React'</span><span class="token punctuation">,</span> <span class="token string">'react-dom'</span><span class="token punctuation">:</span> <span class="token string">'ReactDOM'</span><span class="token punctuation">,</span> <span class="token string">'react-router'</span><span class="token punctuation">:</span> <span class="token string">'ReactRouter'</span><span class="token punctuation">,</span> <span class="token string">'redux'</span><span class="token punctuation">:</span> <span class="token string">'Redux'</span><span class="token punctuation">,</span> <span class="token string">'history'</span><span class="token punctuation">:</span> <span class="token string">'History'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// vue.config.js</span>  configureWebpack<span class="token punctuation">:</span><span class="token punctuation">{</span>    externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue'</span><span class="token punctuation">:</span> <span class="token string">'Vue'</span><span class="token punctuation">,</span>      <span class="token string">'element-ui'</span><span class="token punctuation">:</span> <span class="token string">'ELEMENT'</span><span class="token punctuation">,</span>      <span class="token string">'vue-router'</span><span class="token punctuation">:</span> <span class="token string">'VueRouter'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span></code></pre><p>1.6.2、小图片优化，使用 url-loader，将小图转成 base64，防止小图太多请求次数太多</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>D url<span class="token operator">-</span>loadermodule<span class="token punctuation">:</span> <span class="token punctuation">{</span> rules<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.(png|svg|jpg|gif)$/</span><span class="token punctuation">,</span>  use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>  loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 优化小图片过多造成请求数太多</span>  options<span class="token punctuation">:</span> <span class="token punctuation">{</span>   limit<span class="token punctuation">:</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果图片小于 8192 bytes 就直接 base64 内置到模板，否则才拷贝</span>   outputPath<span class="token punctuation">:</span> <span class="token string">'img/'</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>1.6.3、压缩 css、js 和 html：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 压缩css</span> rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>   test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>   use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>   fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//这个地方配置一个对象，添加一个属性进行压缩css文件</span>   use<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>     minimize<span class="token punctuation">:</span> <span class="token boolean">true</span>   <span class="token comment" spellcheck="true">// 配置minimize 值为true，压缩css 文件</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 压缩js</span><span class="token comment" spellcheck="true">/*下载*/</span> npm install <span class="token operator">-</span>D uglifyjs<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token comment" spellcheck="true">/*引入*/</span> <span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*配置*/</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 压缩 JavaScript</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//压缩html</span><span class="token comment" spellcheck="true">/*下载*/</span> npm   install  <span class="token operator">-</span>D   html<span class="token operator">-</span>webpack<span class="token operator">-</span>plugin<span class="token comment" spellcheck="true">/*引入*/</span> <span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*配置*/</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">'./index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 把 index.html 也打包到 dist 目录中</span>        <span class="token comment" spellcheck="true">// 压缩 html，默认 false 不压缩</span>        minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>         collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 去除回车换行符以及多余空格</span>            removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 删除注释</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><hr><h4 id="2、git-的常用命令"><a href="#2、git-的常用命令" class="headerlink" title="2、git 的常用命令"></a>2、git 的常用命令</h4><p>2.1、首次拉取项目：git clone 项目地址</p><p>2.2、https 方式的需要输入用户名和密码，需要长期保存信息的话则输入：git config –global credential.helper winstore</p><p>ssh 方式的需要生成 ssh 密钥然后在 github 上设置，生成密钥：ssh-keygen -t rsa -C</p><p>2.3、查看分支：git branch -a</p><p>2.4、切换分支：git checkout 分支名</p><p>2.5、拉取项目：git pull origin 分支名</p><p>2.6、添加管理：git add .</p><p>2.7、提交代码：git commit -m 说明</p><p>2.8、查看提交：git log</p><p>2.9、推送提交：git push -u origin 分支名</p><p>2.10、版本回退：git reset –hard 目标版本号 或者 git revert -n 版本号</p><p>或者 git reset –hard HEAD^ 退回到前一个版本</p><p>2.11、回退后 push 会报错，需要强制推送：git push -f</p><p>2.12、合并分支：git merge 分支名</p><hr><h4 id="3、项目的工作流程"><a href="#3、项目的工作流程" class="headerlink" title="3、项目的工作流程"></a>3、项目的工作流程</h4><p>3.1、产品经理出原型图、流程图</p><p>3.2、UI 设计根据原型图出设计稿</p><p>3.3、项目经理出开发规范、前后端任务分配</p><p>3.4、前后端任务细分（根据功能、模块进行任务划分）、估计工期</p><p>3.5、前端进行静态页面开发、后端进行数据库搭建</p><p>3.6、后端写接口、接口联调、前端调接口渲染</p><p>3.7、提交、测试、修改 bug</p><p>3.8、优化、打包、发布</p><hr><h4 id="4、项目中你都负责哪块"><a href="#4、项目中你都负责哪块" class="headerlink" title="4、项目中你都负责哪块"></a>4、项目中你都负责哪块</h4><p>4.1、后台管理系统：主要使用 cli 脚手架进行项目搭建，使用 elementUI 进行页面的快速开发，负责的模块主要有登录页：登录验证、登录拦截、登录过期、登录异常处理；首页：echarts 制表，有饼状图、柱状图、折线图，图表一键存为图片，动态渲染图表等；系统管理：系统设置，设置管理系统的版式、样式、风格；角色设置，设置角色的权限、个人信息、密码修改等；订单管理、文章管理、公告管理：进行相关的增删改查等操作。</p><p>4.2、商城：主要有首页（搜素模块、轮播组件、九宫格组件、列表组件、上拉加载更多组件、loading 组件）、详细页（自定义标题栏组件、模态框组件、消息提示框组件）、购物车页（商品数量增加，总金额实时计算）、登录注册页（表单验证、本地存储、数据加密、防 XSS、CSRF 攻击）、个人中心（我的收藏、我的设置、我的订单）等等</p><hr><h4 id="5、平时是如何进行自己的技能提升的"><a href="#5、平时是如何进行自己的技能提升的" class="headerlink" title="5、平时是如何进行自己的技能提升的"></a>5、平时是如何进行自己的技能提升的</h4><p>比如：去阮一峰个人网站、廖雪峰微博、csdn 社区、哔哩哔哩等视频网站上进行学习，也有关注一些公众号（开课吧、网易、金渡、优就业等），经常看一些大神发的帖子和文章。</p><hr><h4 id="6、你还有什么想要了解的"><a href="#6、你还有什么想要了解的" class="headerlink" title="6、你还有什么想要了解的"></a>6、你还有什么想要了解的</h4><p>6.1、咱们公司现在正在开发什么项目，周期是多久，用的是什么技术？</p><p>6.2、咱们公司项目中的技术是否总是一成不变的，是否会使用新技术？比如什么时候会考虑使用 vue3？</p><p>6.3、咱们公司是否注重员工平时的技能提升，是否会有一些技能上的分享或者培训？</p><p>6.4、人员配比是什么样的，有几个前端几个后端，平时是如何沟通的（用的 git、svn、还是其它可视化工具）？</p><p>6.5、公司的晋升机制是什么样的？</p><p>6.6、如果我能有幸入职，是先有一段熟悉项目的时间还是直接就开始干？</p><p>6.7、您觉得我本次面试有哪些不足，假如您给我打分的话，100 分您会打多少分？</p><hr><h4 id="7、你都封装过哪些组件和工具方法"><a href="#7、你都封装过哪些组件和工具方法" class="headerlink" title="7、你都封装过哪些组件和工具方法"></a>7、你都封装过哪些组件和工具方法</h4><p>7.1、展示组件：container、row、col、header、footer 等</p><p>7.2、列表组件：整体是一个左图右文、固定宽+自适应的布局，内容部分放入了插槽，提高了组件的扩展性。</p><p>7.3、菜单组件：因为菜单层级是未知的，有的可能有二级，有的可能有三级或者更多层级，所以这块是通过一个递归组件来实现的，组件自己调用自己，最后暴露一个 menuData 属性，通过 props 来接收，父组件通过在子组件上写 menuData 属性来传值。</p><p>7.4、loading 组件、加载更多组件、分页组件等等。</p><p>7.5、格式化方法：时间戳格式化（将时间戳转换成 yyyy-mm-dd 的形式）、金钱格式化（金额前边加￥符号，每隔 3 位一个逗号）、cookie 的方法（getCookies、setCookies、removeCookies、clear 等）、请求方法（get、put、post、delete、options 等）</p><hr><h4 id="8、自我介绍"><a href="#8、自我介绍" class="headerlink" title="8、自我介绍"></a>8、自我介绍</h4><p>面试官您好，我叫 XX，今年 XX 岁，毕业于 XXXX 大学，什么专业，上一家公司是在 XX 城市的 XXXX 公司任前端开发一职，从事前端开发工作也有 X 年了，日常工作主要负责静态页面的开发、添加交互效果、数据请求和渲染以及产品的迭代、更新与维护。擅长的技术栈有 HTML、CSS、JS、Jquery、Vue、微信小程序，目前也有自学 React 和 nodeJS。曾参与过多个项目的开发，如 XX 商城、XX 官网、XX 后台管理系统等，有一定的实际开发经验。今天来应聘贵公司的前端开发岗位，以上就是我的自我介绍，谢谢。</p><hr><h4 id="9、项目介绍"><a href="#9、项目介绍" class="headerlink" title="9、项目介绍"></a>9、项目介绍</h4><p>我最近刚做完一个 XX 后台管理系统，主要的技术栈有：技术框架使用的是 vue2.0，项目使用 vue-cli3.0 搭建的，UI 框架使用的是 Element-UI，相关第三方还有 echarts 实现数据可视化，layload 实现图片懒加载，swiper 实现轮播图功能，vue-router 使用的是 history 模式（或者 hash 模式），路由采用的是动态路由，当用户登录成功时会返回角色权限，然后根据角色权限去动态创建路由（或者字典查询动态添加路由），路由全局守卫验证用户是否登录以及登录是否过期，数据请求使用的是 axios，有进行请求拦截和响应拦截，并封装 get 请求和 post 请求，数据管理使用的 vuex，数据持久化使用的 vuex-persistedstate（不熟的也可以说 storage）。主要负责的功能有：登录功能（表单验证、密码加密、过期验证、错误次数验证、手机+验证码登录、账号密码登录、自动登录、第三方登录）；图表功能/大屏数据展示（营业额、销量、浏览量、分享量等各种饼状图、柱状图、折线图，支持一键生成图片，图表自适应等功能）；系统管理：角色管理、用户管理、个人设置。角色管理主要是修改用户权限的，只有管理员才可见，而修改按钮则是按钮级别的权限，只有超级管理员才能修改，用户管理主要是商户端查看自己的会员的，个人设置主要是用户修改自己的个人信息和密码的；商品管理（商品分类、商品增删改查，发布商品使用的 wangEditor 富文本编辑器）；订单管理（订单删查）；公告管理（公共增删改查）等。</p><hr><h4 id="10、项目中遇到过哪些问题，以及如何解决的？"><a href="#10、项目中遇到过哪些问题，以及如何解决的？" class="headerlink" title="10、项目中遇到过哪些问题，以及如何解决的？"></a>10、项目中遇到过哪些问题，以及如何解决的？</h4><p><strong>动态路由</strong>：以前写路由都是在 router 里面去配的，但是很多时候路由不可能全都配出来，当项目较大时，路由都是动态的，特别是有权限的路由，所以这块就遇到了很多问题。最后查了很多资料，vue 官网，github 社区，csdn 社区都有查看，最终找到了两种解决方法：</p><p>1、动态创建路由：用户登录成功后会返回权限信息，然后根据权限信息动态创建路由，最后添加到 router 上，伪代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//返回的数据res中包含如下属性</span><span class="token punctuation">{</span> roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> roles <span class="token operator">=</span> res<span class="token punctuation">.</span>roles<span class="token punctuation">;</span><span class="token keyword">let</span> routes <span class="token operator">=</span> roles<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/'</span> <span class="token operator">+</span> item<span class="token punctuation">,</span> name<span class="token punctuation">:</span> item<span class="token punctuation">,</span> component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>2、字典查询：用个 js 文件存储路由总表，然后根据角色权限去查询符合条件的路由信息，最后添加到 router 上，伪代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//返回的数据res中包含如下属性</span><span class="token punctuation">{</span>  roles<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> roles <span class="token operator">=</span> res<span class="token punctuation">.</span>roles<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 路由总表</span><span class="token keyword">import</span> allRoutes <span class="token keyword">from</span> <span class="token string">"./allRoutes"</span><span class="token punctuation">;</span><span class="token keyword">let</span> routes <span class="token operator">=</span> allRoutes<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> roles<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">addRoutes</span><span class="token punctuation">(</span>routes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>按钮级权限</strong>: 全局 <code>hasPermission</code></p><p>一开始不会做，自己查了很多资料，找到一种解决办法，就是在全局定义了一个方法 hasPermission，然后配合 v-if，在用户登录成功后，获取用户的按钮权限(数组格式)，存储到 store 中，在需要的按钮上使用即可，伪代码大致如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">hasPermission</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">let</span> btns <span class="token operator">=</span> store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>btns<span class="token punctuation">;</span> <span class="token keyword">return</span> btns<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasPermission <span class="token operator">=</span> hasPermission<span class="token punctuation">;</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"hasPermission('role:add')"</span><span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"hasPermission('role:update')"</span><span class="token operator">></span>修改<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"hasPermission('role:delete')"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"hasPermission('role:confirm')"</span><span class="token operator">></span>确定<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"hasPermission('role:cancel')"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span></code></pre><p>后来在公司的分享会上，其他同事还分享可以使用 vue 的自定义指令 directive，伪代码大致如下：</p><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'has'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span>   btnPermissions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">.</span>$route<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>btnPermissions<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> state <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>       <span class="token keyword">switch</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token operator">...</span><span class="token operator">...</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span>btn<span class="token operator">=</span><span class="token string">"add"</span><span class="token operator">></span>添加<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span>btn<span class="token operator">=</span><span class="token string">"update"</span><span class="token operator">></span>修改<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span>btn<span class="token operator">=</span><span class="token string">"delete"</span><span class="token operator">></span>删除<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span>btn<span class="token operator">=</span><span class="token string">"confirm"</span><span class="token operator">></span>确定<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token operator">&lt;</span>el<span class="token operator">-</span>button v<span class="token operator">-</span>btn<span class="token operator">=</span><span class="token string">"cancel"</span><span class="token operator">></span>取消<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span></code></pre><p><strong>第三方登录</strong>：微信、QQ 一键登录</p><p><strong>操作数据</strong>：有时页面开发较快，后台接口没有写好，自己就要模拟请求写一套假数据，模拟数据使用的是 mock，但是自己写好之后也渲染完了，请求后端真实的接口时，由于和假数据的数据结构不一致，这时就要去修改数据</p><p><strong>webpack 优化：</strong>详见九、其他：1、webpack 的基本配置</p><p><strong>单元测试</strong>：test-utils</p><hr><h4 id="12、未来规划？"><a href="#12、未来规划？" class="headerlink" title="12、未来规划？"></a>12、未来规划？</h4><p>半年内争取先把 react 以及周边的第三方都能熟练使用；一年内争取能独自开发项目；一年半年把各种底层原理研究明白；两年内争取有 react+nodeJS+MySQL 的实际项目经验；三年内达到全栈开发的能力；至于更远的目标暂时还没有想过，如果畅谈一下的话，我想可能会朝着项目经理的方向发展，走管理层，或者组建自己的团队，也开公司当老板等。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高频面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript数组方法集锦</title>
      <link href="/2020/04/17/javascript-shu-zu-fang-fa-ji-jin/"/>
      <url>/2020/04/17/javascript-shu-zu-fang-fa-ji-jin/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Array-from"><a href="#1、Array-from" class="headerlink" title="1、Array.from()"></a>1、Array.from()</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><code>Array.from()</code>方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><code>Array.form(arrayLike[, mapFn[, thisArg]])</code></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><code>arrayLike</code> -&gt; 想要转换成数组的伪数组或可迭代对象</li><li><code>mapFn</code> -&gt; <code>[可选参数]</code> 如果指定了该参数，新数组中的每个元素会执行该回调函数。</li><li><code>thisArg</code> -&gt; [可选参数] 执行回调函数 <code>mapFn</code> 时<code>this</code>对象。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>一个新的 <code>Array</code> 实例。</p><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>1、<code>Array.from()</code>可以通过以下方式来创建数组对象</p><ul><li>伪数组对象：拥有一个<code>length</code>属性和若干索引属性的任意对象。</li><li>可迭代对象：可以获取对象中的元素，如<code>Map</code>和<code>Set</code>等。</li></ul><p>2、<code>Array.from()</code>方法有一个可选参数 <code>mapFn</code>，可以让你在最后生成的数组上在执行一次 <code>map</code> 方法后在返回。</p><p>3、<code>from()</code>的 <code>length</code> 属性为 1，即 <code>Array.from.length === 1</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组方法 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之排序集锦</title>
      <link href="/2020/01/17/javascript-zhi-pai-xu-ji-jin/"/>
      <url>/2020/01/17/javascript-zhi-pai-xu-ji-jin/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-之排序集锦"><a href="#JavaScript-之排序集锦" class="headerlink" title="JavaScript 之排序集锦"></a>JavaScript 之排序集锦</h2><hr><h3 id="1、快速排序"><a href="#1、快速排序" class="headerlink" title="1、快速排序"></a>1、快速排序</h3><p><img src="http://www.conardli.top/docs/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p><p>单独开辟两个存储空间 <code>left</code> 和 <code>right</code> 来存储每次递归比 <code>target</code> 小和大的序列,每次递归直接返回 <code>left</code> 、 <code>target</code> 、 <code>right</code> 拼接后的数组.<br>浪费大量存储空间,写法简单.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> target <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="2、归并排序"><a href="#2、归并排序" class="headerlink" title="2、归并排序"></a>2、归并排序</h3><p>利用归并的思想实现的排序方法。</p><p>该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><ul><li>将已有序的子序列合并，得到完全有序的序列</li><li>即先使每个子序列有序，再使子序列段间有序</li><li>若将两个有序表合并成一个有序表，称为二路归并</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-f65e17c1828ae579.gif?imageMogr2/auto-orient/strip|imageView2/2/w/811/format/webp" alt="归并排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-518da026621cbed5.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="归并排序"></p><p>分割数组时直接将数组分割为两个数组，合并时直接合并数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>front<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>front<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>front<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> end<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>front<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>front<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>end<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>end<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> front <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> end <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="3、选择排序"><a href="#3、选择排序" class="headerlink" title="3、选择排序"></a>3、选择排序</h3><p><img src="http://www.conardli.top/docs/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><p>每次循环选取一个最小的数字放到前面的有序序列中.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="4、插入排序"><a href="#4、插入排序" class="headerlink" title="4、插入排序"></a>4、插入排序</h3><p>将左侧序列看成一个有序序列，每次将一个数字插入该有序序列。<br>插入时，从有序序列最右侧开始比较，若比较的数较大，后移一位。</p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-d317b2a2e4591ad4.gif?imageMogr2/auto-orient/strip|imageView2/2/w/811/format/webp" alt="插入排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> target <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>target<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        target <span class="token operator">=</span> j<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="5、冒泡排序"><a href="#5、冒泡排序" class="headerlink" title="5、冒泡排序"></a>5、冒泡排序</h3><p><img src="https://upload-images.jianshu.io/upload_images/12585785-00bd06c1b1cdcb72.gif?imageMogr2/auto-orient/strip|imageView2/2/w/826/format/webp" alt="冒泡排序"></p><ul><li>循环数组，比较当前元素和下一个元素，如果当前元素比下一个元素大，向上冒泡。</li><li>这样一次循环之后最后一个数就是本数组最大的数。</li><li>下一次循环继续上面的操作，不循环已经排序好的数。</li><li>优化：当一次循环没有发生冒泡，说明已经排序完成，停止循环。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> complete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 比较相邻数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        complete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 没有冒泡结束循环</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>complete<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="6、堆排序"><a href="#6、堆排序" class="headerlink" title="6、堆排序"></a>6、堆排序</h3><ul><li>创建一个大顶堆，大顶堆的堆顶一定是最大的元素。</li><li>交换第一个元素和最后一个元素，让剩余的元素继续调整为大顶堆。</li><li>从后往前以此和第一个元素交换并重新构建，排序完成。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-e1fc1f31b1b0dc32.gif?imageMogr2/auto-orient/strip|imageView2/2/w/547/format/webp" alt="堆排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-e07e488f103d04a2.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="堆排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 构建大顶堆, 从第一个非叶子节点开始, 进行下沉操作.</span><span class="token keyword">function</span> <span class="token function">createHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">adjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将第target个元素进行下沉, 孩子节点有比他大的就下沉</span><span class="token keyword">function</span> <span class="token function">adjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> target<span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找到孩子节点中最大的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> array<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下沉</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      target <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">heapSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">createHeap</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 交换第一个和最后一个元素, 然后重新调整大顶堆</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">adjust</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="7、希尔排序"><a href="#7、希尔排序" class="headerlink" title="7、希尔排序"></a>7、希尔排序</h3><p>希尔排序的核心在于间隔序列的设定.既可以提前设定好间隔序列,也可以动态的定义间隔序列.动态定义间隔序列的算法是<code>《算法(第4版)》</code> 的合著者 <code>Robret Sedgewick</code> 提出的.</p><ul><li>先将整个待排序记录序列分割成若干个子序列</li><li>在序列内分别进行直接插入排序,待整个序列基本有序时,在对全体记录进行一次直接插入排序</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-23abea5f9a7eb194.gif?imageMogr2/auto-orient/strip|imageView2/2/w/665/format/webp" alt="希尔排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-0ed048c95908255b.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="希尔排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shellSort</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">let</span> gap <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 复制数组</span>  result <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      temp <span class="token operator">=</span> result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        j <span class="token operator">=</span> j <span class="token operator">-</span> gap<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      result<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    gap <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>gap <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="8、计数排序"><a href="#8、计数排序" class="headerlink" title="8、计数排序"></a>8、计数排序</h3><ul><li>找出待排序的数组中最大和最小的元素；</li><li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li><li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素 i 放在新数组的第 C(i)项，每放一个元素就将 C(i)减去 1</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-a4af4d4837bc5cb2.gif?imageMogr2/auto-orient/strip|imageView2/2/w/1012/format/webp" alt="计数排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-7940185bd6499f5c.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="计数排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">countingSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> sortIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> bucketLen <span class="token operator">=</span> maxValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bucket<span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucketLen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      array<span class="token punctuation">[</span>sortIndex<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>      bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="9、桶排序"><a href="#9、桶排序" class="headerlink" title="9、桶排序"></a>9、桶排序</h3><ul><li>设置一个定量的数组当作空桶；</li><li>遍历输入数据，并且把数据一个一个放到对应的桶里去；</li><li>对每个不是空的桶进行排序；</li><li>从不是空的桶里把排好序的数据拼接起来。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-76601f156098c376.png?imageMogr2/auto-orient/strip|imageView2/2/w/891/format/webp" alt="桶排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-374f4e4a41b59bb6.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="桶排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> bucketSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      minValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入数据的最小值</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      maxValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输入数据的最大值</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//桶的初始化</span>  <span class="token keyword">const</span> DEFAULT_BUCKET_SIZE <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置桶的默认数量为5</span>  bucketSize <span class="token operator">=</span> bucketSize <span class="token operator">||</span> DEFAULT_BUCKET_SIZE<span class="token punctuation">;</span>  <span class="token keyword">let</span> bucketCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>maxValue <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> buckets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>bucketCount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//利用映射函数将数据分配到各个桶中</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buckets<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minValue<span class="token punctuation">)</span> <span class="token operator">/</span> bucketSize<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> buckets<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">insertionSort</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对每个桶进行排序，这里使用了插入排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>buckets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="10、基数排序"><a href="#10、基数排序" class="headerlink" title="10、基数排序"></a>10、基数排序</h3><ul><li>该算法是稳定的排序法；</li><li>在所有的情况下，时间复杂度均为 O(nlog(p)k)，空间复杂度为 O(n*p)<br>（其中 K 为关键词位数，p 为数据字符数(即基数 radix)）；</li><li>若 n 很大，p 固定或很小，此方法将很有效。</li><li>基数排序不需要进行元素间的比较，属于分配/分布排序；</li><li>根据起始方向可分为 最高位优先 MSD 和 最低位优先 LSD</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/12585785-ee41d9ba9d41c625.gif?imageMogr2/auto-orient/strip|imageView2/2/w/1012/format/webp" alt="基数排序"></p><p><img src="https://upload-images.jianshu.io/upload_images/12585785-d1c26722a18c0dd8.gif?imageMogr2/auto-orient/strip|imageView2/2/w/954/format/webp" alt="基数排序"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> radix<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>radix<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//默认为十进制</span>    radix <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果未指定关键词位数将自动使用首个元素的位数作为n</span>    n <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> i<span class="token punctuation">,</span>    j<span class="token punctuation">,</span>    tmp<span class="token punctuation">,</span>    num<span class="token punctuation">,</span>    queues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    q <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    queues<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成Q[0]~Q[radix-1]</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//LSD低位起始</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      tmp <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      num <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>radix<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> radix<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取某位数值</span>      <span class="token comment" spellcheck="true">//这里这个转换只能搞得动十进制= =其他就会有问题 因为不能直接用其他进制来进行运算 所以考虑使用字符串处理</span>      queues<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> radix<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//重构q</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>queues<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>queues<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> q<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之类型推论</title>
      <link href="/2019/12/17/typescript-lei-xing-tui-lun/"/>
      <url>/2019/12/17/typescript-lei-xing-tui-lun/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>TypeScript</code> 类型推论：即类型是在哪里如何被推断的。</p><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p><code>TypeScript</code> 里，在有些没有明确指出类型的地方，类型推论会帮助提供类型。如下面的例子</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></code></pre><p>变量 <code>x</code> 的类型被推断为数字。这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。大多数情况下，类型推断是直截了当地。后面的小节，我们会浏览类型推论时的细微差别。</p><h3 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h3><p>当需要从几个表达式中推断类型的时候，会使用这些表达式的类型来推断出一个最合适的通用类型。例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>为了推断 <code>x</code> 的类型，我们必须考虑所有元素的类型。这里有两种选择：<code>number</code> 和 <code>null</code>。计算通用类型算法会考虑所有的候选类型，并选出一个兼容所有候选类型的类型。</p><p>由于最终的类型通用类型取自候选类型，有些时候候选类型共享相同的通用类型，但是没有一个类型能做为所有候选类型的类型。例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>这里，我们想让 <code>zoo</code> 被推断为 <code>Animal[]</code> 类型。但是这个数组里没有对象是 <code>Animal</code> 类型的，因此不能推断出这个结果。为了更正，当候选类型不能使用的时候，我们需要明确的指出类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> zoo<span class="token punctuation">:</span>Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>如果没有找到最佳通用类型的话，类型推断的结果为联合数组类型，<code>(Rhino | Elephant | Snake)[]</code>。</p><h3 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h3><p><code>TypeScript</code> 类型推断也可能按照相反的方向进行。这被叫做 <code>按上下文归类</code>。按上下文归类会发生在表达式的类型与所处的位置相关时。比如：</p><pre class=" language-typescript"><code class="language-typescript">window<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nouseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;- Error</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个例子会得到一个类型错误，<code>TypeScript</code> 类型检查器使用 <code>Window.onmousedown</code> 函数的类型推断来推断右边函数表达式的类型。因此，就能推断出 <code>mouseEvent</code> 参数的类型了。如果函数表达式不是在上下文类型的位置， <code>mouseEvent</code> 参数的类型需要指定为 <code>any</code>，这样也不会报错了。</p><p>如果上下文类型表达式包含了明确的类型信息，上下文的类型被忽略。 重写上面的例子：</p><pre class=" language-typescript"><code class="language-typescript">window<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nouseEvent<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mouseEvent<span class="token punctuation">.</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// &lt;- Now, no error is given</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这个函数表达式有明确的参数类型注解，上下文类型被忽略。这样的话就不报错了，因为这里不会使用到上下文类型。</p><p>上下文归类在很多情况下使用到。通常包含函数的参数、赋值表达式的右边、类型断言、对象成员、数组字面量和返回值语句。上下文类型也会做为最佳通用类型的候选类型。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">createZoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Animal<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Elephant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个例子里，最佳通用类型有 <code>4</code> 个候选者：<code>Animal</code>，<code>Rhino</code>，<code>Elephant</code> 和 <code>Snake</code>。当然, <code>Animal</code> 会被做为最佳通用类型。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 类型推论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript之枚举</title>
      <link href="/2019/11/12/typescript-mei-ju/"/>
      <url>/2019/11/12/typescript-mei-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><ul><li>使用枚举我们可以定义一些带名字的常量</li><li>使用枚举可以清晰地表达意图或者创建一组有区别的用例。</li><li><code>TypeScript</code> 支持基于数字的和基于字符串的枚举。</li></ul><hr><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>首先让我能看看数字枚举，如果你使用过其他编程语言应该会很熟悉。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  Up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Down<span class="token punctuation">,</span>  Left<span class="token punctuation">,</span>  Right<span class="token punctuation">}</span></code></pre><p>如上，我们定义了一个数字枚举，<code>Up</code> 使用初始化为 <code>1</code>。其余成员会从 <code>1</code> 开始自动增长。换句话说， <code>Direction.Up</code> 的值为 <code>1</code>，<code>Down</code> 为 <code>2</code>, <code>Left</code> 为 <code>3</code>，<code>Right</code> 为 <code>4</code>。</p><p>我们还可以完全不使用初始化器：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  Up<span class="token punctuation">,</span>  Down<span class="token punctuation">,</span>  Left<span class="token punctuation">,</span>  Right<span class="token punctuation">}</span></code></pre><p>现在， <code>Up</code> 的值为 <code>0</code>，<code>Down</code> 的值为 <code>1</code> 等等。当我们不在乎成员的值的时候，这种自增长的行为是很有用处的，但是要注意每个枚举成员的值都是不同的。</p><p>使用枚举很简单：</p><ul><li>通过枚举的属性来访问枚举成员</li><li>通过枚举的名字来访问枚举类型</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Response <span class="token punctuation">{</span>  No <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  Yes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">respond</span><span class="token punctuation">(</span>recipient<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> Response<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token function">respond</span><span class="token punctuation">(</span><span class="token string">'Princess Caroline'</span><span class="token punctuation">,</span> Response<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>数字枚举可以被混入到 <code>计算过的和常量成员</code>。简短地说，不带初始化的枚举或者被放在第一的位置，或者被放在使用了数字常量或其他常量初始化了的枚举后面。换句话说，下面的情况是不被允许的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> E <span class="token operator">=</span> <span class="token punctuation">{</span>    A <span class="token operator">=</span> <span class="token function">getSomeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    B <span class="token comment" spellcheck="true">// 错误!'A'不是常量初始化的，所以'B'需要一个初始化器</span><span class="token punctuation">}</span></code></pre><hr><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p>字符串枚举的概念很简单，但是有细微的运行时的差别。在一个字符串枚举里，每个成员都必须用字符串字面量，或另一个字符串枚举成员进行初始化。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Direction <span class="token punctuation">{</span>  Up <span class="token operator">=</span> <span class="token string">'Up'</span><span class="token punctuation">,</span>  Down <span class="token operator">=</span> <span class="token string">'Down'</span><span class="token punctuation">,</span>  Left <span class="token operator">=</span> <span class="token string">'Left'</span><span class="token punctuation">,</span>  Right <span class="token operator">=</span> <span class="token string">'Right'</span><span class="token punctuation">}</span></code></pre><p>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。换句话说，如果你正在调试且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息（尽管 <code>反向映射</code> 会有所帮助），字符串枚举允许提供一个运行时有意义并且可读的值，独立于枚举成员的名字。</p><hr><h3 id="异构枚举-Heterogeneous-enums"><a href="#异构枚举-Heterogeneous-enums" class="headerlink" title="异构枚举 Heterogeneous enums"></a>异构枚举 <code>Heterogeneous enums</code></h3><p>从技术的角度来说，枚举可以混合数字和字符串成员，但是似乎你并不会这么做：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> BooleanLikeHeterogeneousEnum <span class="token punctuation">{</span>  No <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  Yes <span class="token operator">=</span> <span class="token string">'Yes'</span><span class="token punctuation">}</span></code></pre><p>除非你真的想要利用 <code>JavaScript</code> 运行时的行为，否则我们不建议这样做。</p><hr><h3 id="计算的和常量成员"><a href="#计算的和常量成员" class="headerlink" title="计算的和常量成员"></a>计算的和常量成员</h3><p>每个枚举成员都带有一个值，它可以是 <strong>_常量_</strong> 或 <strong><em>计算出来</em></strong>的。当满足如下条件时，枚举成员被当作是常量：</p><ul><li>它是枚举的第一个成员且没有初始化器，这种情况下它被赋值 <code>0</code>：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// E.X is constant</span><span class="token keyword">enum</span> E <span class="token punctuation">{</span>  X<span class="token punctuation">}</span></code></pre><ul><li>它不带有初始化器且它之前的枚举成员是一个 <strong>_数字_</strong>常量。这种情况下，当前枚举成员的值为它上一个枚举成员的值加 <code>1</code>。</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// All enum members in 'E1' and 'E2' are constant.</span><span class="token keyword">enum</span> E1 <span class="token punctuation">{</span>  X<span class="token punctuation">,</span>  Y<span class="token punctuation">,</span>  Z<span class="token punctuation">}</span><span class="token keyword">enum</span> E2 <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  B<span class="token punctuation">,</span>  C<span class="token punctuation">}</span></code></pre><ul><li>枚举成员使用 <strong><em>常量枚举表达式</em></strong> 初始化。常量枚举表达式是 <code>TypeScript</code> 的子集，它可以在编译阶段求值。当一个表达式满足下面条件之一时，它就是一个常量枚举表达式：<ul><li>一个枚举表达式字面量(主要是字符串字面量或数字字面量)</li><li>一个对之前定义的常量枚举成员的引用(可以是在不同的枚举类型中定义的)</li><li>带括号的常量枚举表达式</li><li>一元运算符 <code>+</code>，<code>-</code>，<code>~</code> 其中之一应用在了常量枚举表达式</li><li>常量枚举表达式作为二元运算符 <code>+</code>，<code>-</code>，<code>*</code> ，<code>/</code>，<code>%</code>，<code>&lt;&lt;</code>， <code>&gt;&gt;</code>，<code>&gt;&gt;&gt;</code>，<code>&amp;</code>，<code>|</code>，<code>^</code> 的操作对象。若常量枚举表达式求值后为 <code>NaN</code> 或 <code>Infinity</code>，则会在编译阶段报错。</li></ul></li></ul><p>所有其它情况的枚举成员被当作是需要计算得出的值。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> FileAccess <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// constant members</span>  None<span class="token punctuation">,</span>  Read <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>  Write <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>  ReadWrite <span class="token operator">=</span> Read <span class="token operator">|</span> Write<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// computed member</span>  G <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span></code></pre><hr><h3 id="联合枚举与枚举成员的类型"><a href="#联合枚举与枚举成员的类型" class="headerlink" title="联合枚举与枚举成员的类型"></a>联合枚举与枚举成员的类型</h3><p>存在一种特殊的非计算的常量枚举成员的子集：字面量枚举成员。字面量枚举成员是指不带有初始值的常量枚举成员，或者是值被初始化为：</p><ul><li>任何字符串字面量（例如：<code>foo</code>， <code>bar</code>， <code>baz</code>）</li><li>任何数字字面量（例如： <code>1</code>， <code>100</code>）</li><li>应用了一元 <code>-</code> 符号的数字字面量（例如： <code>-1</code>， <code>-100</code>）</li></ul><p>当所有枚举成员都拥有字面量枚举值时，它就带有了一种特殊的语义。</p><p>首先，枚举成员成为了类型！ 例如，我们可以说某些成员 只能是枚举成员的值：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> ShapeKind <span class="token punctuation">{</span>  Circle<span class="token punctuation">,</span>  Square<span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> ShapeKind<span class="token punctuation">.</span>Circle<span class="token punctuation">;</span>  radius<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> ShapeKind<span class="token punctuation">.</span>Square<span class="token punctuation">;</span>  sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Circle <span class="token operator">=</span> <span class="token punctuation">{</span>  kind<span class="token punctuation">:</span> ShapeKind<span class="token punctuation">.</span>Square<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Error !</span>  rasius<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>另一个变化是枚举类型本身变成了每个枚举成员的 _联合_。虽然我们还没有讨论<strong>联合类型</strong>，但你只要知道通过联合枚举，类型系统能够利用这样一个事实，它可以知道枚举里的值的集合。因此，<code>TypeScript</code> 能够捕获在比较值的时候犯的愚蠢的错误。例如：</p><pre class=" language-typescript"><code class="language-typescript">enmu E <span class="token punctuation">{</span>  Foo<span class="token punctuation">,</span>  Bar<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> E<span class="token punctuation">.</span>Foo <span class="token operator">||</span> x <span class="token operator">!==</span> E<span class="token punctuation">.</span>Bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Error! Operator '!==' cannot be applied to types 'E.Foo' and 'E.Bar'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在这个例子里，我们先检查 <code>x</code> 是否不是 <code>E.Foo</code>。如果通过了这个检查，然后 <code>||</code> 会发生短路效果，<code>if</code> 语句体里的内容会被执行。然而，这个检查没有通过，那么<code>x</code> 只能为 <code>E.Foo</code>，因此没理由再去检查它是否为 <code>E.Bar</code>。</p><hr><h3 id="运行时的枚举"><a href="#运行时的枚举" class="headerlink" title="运行时的枚举"></a>运行时的枚举</h3><p>枚举是在运行时真正存在的对象。例如下面的枚举：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> E <span class="token punctuation">{</span>  X<span class="token punctuation">,</span>  Y<span class="token punctuation">,</span>  Z<span class="token punctuation">}</span></code></pre><p>实际上可以传递给函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> X<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>X<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Works, since 'E' has a property named 'X' which is a number.</span><span class="token function">f</span><span class="token punctuation">(</span>E<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>除了创建一个以属性名作为对象成员的对象之外，数字枚举成员还具有了 <strong>反向映射</strong>，从枚举值到枚举名字。例如，在下面的例子中：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>  A<span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> Enum<span class="token punctuation">.</span>A<span class="token punctuation">;</span><span class="token keyword">let</span> nameOfA <span class="token operator">=</span> Enum<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span></code></pre><p><code>TypeScript</code> 可能会将这段代码编译为下面的 <code>JavaScript</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Enum<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>Enum<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Enum<span class="token punctuation">[</span><span class="token punctuation">(</span>Enum<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Enum <span class="token operator">||</span> <span class="token punctuation">(</span>Enum <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> Enum<span class="token punctuation">.</span>A<span class="token punctuation">;</span><span class="token keyword">var</span> nameOfA <span class="token operator">=</span> Enum<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（<code>name</code> -&gt; <code>value</code>）和 反向映射（<code>value</code> -&gt; <code>name</code>）。引用枚举成员总会生成为对象属性访问并且永远也不会内联代码。</p><p>要注意的是，不会为 字符串枚举成员生成反向映射。</p><hr><h3 id="const-枚举"><a href="#const-枚举" class="headerlink" title="const 枚举"></a><code>const</code> 枚举</h3><p>大多数情况下，枚举是十分有效的方案。然而在某些情况下需求很严格。为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问。我们可以使用 <code>const</code> 枚举。常量枚举通过在枚举上使用 <code>const</code> 修饰符来定义。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  B <span class="token operator">=</span> A <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>常量枚举只能使用常量枚举白噢大事，并且不同于常规的枚举，它们在编译阶段会被删除。常量枚举成员字在使用的地方会被内联起来。之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token keyword">enum</span> Directions <span class="token punctuation">{</span>  Up<span class="token punctuation">,</span>  Down<span class="token punctuation">,</span>  Left<span class="token punctuation">,</span>  Right<span class="token punctuation">}</span><span class="token keyword">let</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span>  Directions<span class="token punctuation">.</span>Up<span class="token punctuation">,</span>  Directions<span class="token punctuation">.</span>Down<span class="token punctuation">,</span>  Directions<span class="token punctuation">.</span>Left<span class="token punctuation">,</span>  Directions<span class="token punctuation">.</span>Right<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>生成后的代码为：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">var</span> directions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment" spellcheck="true">/*Up*/</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">/*Down*/</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">/*Left*/</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token comment" spellcheck="true">/*Right*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><hr><h3 id="外部枚举"><a href="#外部枚举" class="headerlink" title="外部枚举"></a>外部枚举</h3><p>外部枚举用来描述已经存在的枚举类型的形状。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">declare</span> <span class="token keyword">enum</span> Enum <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  B<span class="token punctuation">,</span>  C <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span></code></pre><p>外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之泛型</title>
      <link href="/2019/11/01/typescript-zhi-fan-xing/"/>
      <url>/2019/11/01/typescript-zhi-fan-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>软件工程中，我们不仅要创建一致的定义良好的 <code>API</code>，同时也要考虑可重用性。组件不仅能够支持当前的数据类型，同样也能支持未来的数据类型，这在创建大型系统时为你提供例了十分灵活的功能。</p><p>在像 <code>C#</code> 和 <code>Java</code> 这样的语言中，可以使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。这样用户就可以以自己的数据类型来使用组件。</p><hr><h3 id="泛型之-Hello-World"><a href="#泛型之-Hello-World" class="headerlink" title="泛型之 Hello World"></a>泛型之 Hello World</h3><p>下面来创建第一个使用泛型的例子：<code>identity</code> 函数。这个函数会返回传入传入它的值。你可以把这个函数当成是 <code>echo</code> 命令。</p><p>不用泛型的话，这个函数可能是下面这样：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者，我们使用 <code>any</code> 类型来定义函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">identity</span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用 <code>any</code> 类型会导致这个函数可以接收任何类型的 <code>arg</code> 参数，这样就丢失了一些信息：传入的类型与返回的类型应该是相同的。如果我么传入一个数字，我们值知道任何类型的值都有可能被返回。</p><p>因此，我们需要一种方法使返回值的类型与传入参数的类型是相同的。这里，我们使用了 <code>类型变量</code> ，它是一种特殊的变量，只用于表示类型而不是值。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们给 <code>identity</code> 添加了类型变量 <code>T</code>。 <code>T</code> 帮助我们捕获用户传入的类型（比如：<code>number</code>），之后我们就可以使用这个类型。 之后我们再次使用了 <code>T</code> 当做返回值类型。现在我们可以知道参数类型与返回值类型是相同的了。 这允许我们跟踪函数里使用的类型的信息。</p><p>我们把这个版本的 <code>identity</code> 函数叫做泛型，因为它可以适用于多个类型。不同于使用 <code>any</code>，它不会丢失信息，像第一个例子那样保持准确性，传入数值类型并返回数值类型。</p><p>我们定义了泛型函数后，可以用两种方法使用：<br>第一种是，传入所有的参数，包含类型参数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> output <span class="token operator">=</span> identity<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'myString'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type of output will be 'string'</span></code></pre><p>这里我们明确的指定了 <code>T</code> 是 <code>string</code> 类型，并做为一个参数传给函数，使用了 <code>&lt;&gt;</code> 括起来而不是 <code>()</code>。</p><p>第二种方法更普遍。利用了类型推断 <code>--</code> 即编译器会根据传入的参数自动地帮助我们确定 <code>T</code> 的类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token string">'myString'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// type of output will be 'string'</span></code></pre><p>注意我们没必要使用 <code>&lt;&gt;</code> 来明确地传入类型；编译器可以查看 <code>myString</code> 的值，然后把 <code>T</code> 设置为它的类型。类型推断帮助我们保持代码精简和高可读性。如果编译器不能够自动地推断出类型的话，只能像上面那样明确的传入 <code>T</code> 的类型，在一些复杂的情况下，这是可能出现的。</p><hr><h3 id="使用泛型变量"><a href="#使用泛型变量" class="headerlink" title="使用泛型变量"></a>使用泛型变量</h3><p>使用泛型创建像 <code>identity</code> 这样的泛型函数时，编译器要求你在函数体内必须正确的使用这个通用的类型。换句话说，你必须把这些参数当做是任意或所有类型。</p><p>看下之前 <code>identity</code> 例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果我们想同时打印出 <code>arg</code> 的长度。 我们很可能会这样做：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error：T doesn't have .length</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可以这样理解 <code>loggingIdentity</code> 的类型：泛型函数 <code>loggingIdentity</code> ，接收类型参数 <code>T</code> 和参数 <code>arg</code> ，它是个元素类型是 <code>T</code> 的数组，并返回元素类型是 <code>T</code> 的数组。如果我们传入数字数组，将返回一个数字数组，因为此时 <code>T</code> 的类型为 <code>number</code> 。这可以让我们把泛型变量 <code>T</code> 当作类型的一部分使用，而不是整个类型，增加了灵活性。</p><p>我们也可以这样实现上面的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Array has a .length, so no more error</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用过其他语言，你可能对这种语法已经很熟悉了。在下一节，会介绍如何创建自定义泛型像 <code>T</code> 一样。</p><hr><h3 id="泛型类型"><a href="#泛型类型" class="headerlink" title="泛型类型"></a>泛型类型</h3><p>上一节，我们创建了 <code>identity</code> 通用函数，可以适用于不同的类型。在这节，我们研究一下函数本身的类型，以及如何让创建泛型接口。<br>泛型函数的类型与非泛型函数的类型没有什么不同，只是有一个类型参数在最前面，像函数声明一样：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> <span class="token operator">&lt;</span>U<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> U<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> U <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>我们还可以使用带有调用签名的对象字面量来定义泛型函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> indetity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">}</span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>这引导我们去写第一个泛型接口了。我们把上面例子里的对象字面量拿出来做为一个接口：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> identitty<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> GenericIdentity <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>一个相似的例子，我们可能想把泛型参数当作整个接口的一个参数。这样我们就能清楚的知道使用的具体是那个泛型类型（比如：<code>Dictionary&lt;string&gt;</code> 而不是 <code>Dictionary</code>）。这样接口里的其它成员也能知道这个参数的类型了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">GenericIdentityFn</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> identity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myIdentity<span class="token punctuation">:</span> GenericIdentityFn<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> identity<span class="token punctuation">;</span></code></pre><p>注意，我们的示例做了少许改动。不再描述泛型函数，而是把非泛型函数签名作为泛型类型的一部分。当我们使用 <code>GenericIdentityFn</code> 的时候，还得传入一个类型参数来指定泛型类型（这里是：<code>number</code>），锁定了之后代码里使用的类型。对于描述哪些部分属于泛型部分来说，理解何时把参数放在调用签名里和何时放在接口上是很有帮助的。</p><p>除了泛型接口，我们还可以创建泛型类。注意，无法创建泛型枚举和泛型命名空间。</p><hr><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>泛型类看上去与泛型接口差不多。泛型类使用(<code>&lt;&gt;</code>)扩起泛型类型，跟在类名后面。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  zeroValue<span class="token punctuation">:</span> T<span class="token punctuation">;</span>  <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">,</span> y<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><code>GenericNumber</code> 类的使用是十分直观的，并且你可能已经注意到了，没有什么去限制它只能使用 number 类型。 也可以使用字符串或其它更复杂的类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> stringNumeric <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>stringNumeric<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stringNumeric<span class="token punctuation">.</span>zeroValue<span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>与接口一样，直接把泛型类型放在类后面，可以帮助我们确认类的所有属性都在使用相同的类型。</p><p>我们在 <a href="https://libing.art/2019/10/09/typescript-lei/" target="_blank" rel="noopener">类</a> 那节说过，类有两部分：静态部分和实例部分。泛型类指的是实例部分的类型，所以类的静态属性不能使用泛型类型。</p><hr><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>你应该会记得之前的一个例子，我们有时候想操作某类型的一组值，并且我们知道这组值具有什么样的属性。在 <code>loggingIdentity</code> 例子中，我们想访问 <code>arg</code> 的 <code>lengrh</code> 属性，但是编译器并不能证明每种类型都有 <code>length</code> 属性，所以就报错了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: T doesn't have .length</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>相比于操作 <code>any</code> 所有类型，我们想要限制函数去处理任意带有 <code>.length</code> 属性的所有类型。只要传入的类型有这个属性，我们就允许，就是说至少包含这一属性。为此，我们需要列出对于 <code>T</code> 的约束要求。</p><p>为此，我们定义一个接口来描述约束条件。创建一个包含 <code>.length</code> 属性的接口，使用这个接口和 <code>extends</code> 关键字来实现约束：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Lengthwise</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Now we konw it has a .length property, so no more error</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>现在这个泛型函数被定义了约束，因此它不再是适用于任意类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// number doesn't have a .length property</span></code></pre><p>我们需要传入符合约束类型的值，必须包含必须的属性：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token function">loggingIdentity</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="在泛型约束中使用类型参数"><a href="#在泛型约束中使用类型参数" class="headerlink" title="在泛型约束中使用类型参数"></a>在泛型约束中使用类型参数</h3><p>你可以声明一个类型参数，且它被另一个类型函数所约束。比如，现在我们想要用属性名从对象里获取这个属性，并且我们想要确保这个属性存在于对象 <code>obj</code> 上，因此我们需要在这两个类型之间使用约束。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> T<span class="token punctuation">,</span> key<span class="token punctuation">:</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay</span><span class="token function">getProperty</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.</span></code></pre><hr><h3 id="在泛型里使用类类型"><a href="#在泛型里使用类类型" class="headerlink" title="在泛型里使用类类型"></a>在泛型里使用类类型</h3><p>在 <code>TypeScript</code> 使用泛型创建工厂函数时，需要引用构造函数的类类型。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> create<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一个更高级的例子，使用原型属性推断并约束构造函数与类实例的关系。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">BeeKeeper</span> <span class="token punctuation">{</span>  hasMask<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ZooKeeper</span> <span class="token punctuation">{</span>  nametag<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  numLegs<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bee</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  keeper<span class="token punctuation">:</span> BeeKeeper<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Ainmal</span> <span class="token punctuation">{</span>  keeper<span class="token punctuation">:</span> ZooKeeper<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> createInstance<span class="token operator">&lt;</span>A <span class="token keyword">extends</span> <span class="token class-name">Ainmal</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> A<span class="token punctuation">)</span><span class="token punctuation">:</span> A <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">createInstance</span><span class="token punctuation">(</span>Lion<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>nametag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// typechecks!</span><span class="token function">createInstance</span><span class="token punctuation">(</span>Bee<span class="token punctuation">)</span><span class="token punctuation">.</span>keeper<span class="token punctuation">.</span>hasMask<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// typechecks!</span></code></pre><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/generics.html" target="_blank" rel="noopener">TypeScript 泛型</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之函数</title>
      <link href="/2019/10/22/typescript-han-shu/"/>
      <url>/2019/10/22/typescript-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>函数是 <code>JavaScript</code> 应用程序的基础，它帮助你实现抽象层、模拟类、信息隐藏和模块。在 <code>TypeScript</code> 里，虽然已经支持类、命名空间和模块，但函数任然是主要的定义行为的地方。 <code>TypeScript</code> 为 <code>JavaScript</code> 函数添加了额外的功能，让我们可以更容易的使用。</p><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>和 <code>JavaScript</code> 一样， <code>TypeScript</code> 函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列 <code>API</code> 函数还是只使用一次的函数。</p><p>通过下面的例子可以迅速回想起这两种 <code>JavaScript</code> 中的函数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Named function</span>funnction <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Anonymous function</span><span class="token keyword">const</span> myAdd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 <code>JavaScript</code> 里，函数可以使用函数体外部的变量。当函数这么做时，我们说它 <code>捕获</code> 了这些变量。至于为什么可以这样做以及其中的利弊超出了本文范围，但是深刻理解这个机制对学习 <code>JavaScript</code> 和 <code>TypeScript</code> 会非常有帮助。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addToZ</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>让我们为上面那个函数添加类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myAdd <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 <code>TypeScript</code> 能够根据返回语句自动推断出返回值类型，因此我们通常省略它。</p><hr><h3 id="书写完整函数类型"><a href="#书写完整函数类型" class="headerlink" title="书写完整函数类型"></a>书写完整函数类型</h3><p>现在我们已经为函数指定了类型，下面 👇 让我们写出函数的完整类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>函数类型包含两部分：</p><ul><li>1、参数类型</li><li>2、返回值类型<br>当写出完整函数类型的时候，这两部分是需要的。我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。这个名字只是为了增加可读性。我们也可以这么写：</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>baseValue<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> increment<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。<br>第二部分是返回值类型。对于返回值，我们在函数和返回值类型之前使用 <code>=&gt;</code> 符号，使之清晰明了。如之前提到的，返回值类型是函数类型的必要部分，如果函数没有任何返回值，你也必须指定返回值类型为 <code>void</code> 而不能留空。<br>函数的类型只是由类型和返回值组成的。函数中使用的捕获变量不会体现在类型里。实际上，这些变量是函数的隐藏状态，并不是组成 <code>API</code> 的一部分。</p><hr><h3 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h3><p>尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，<code>TypeScript</code> 编译器会自动识别出类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// myAdd has the full function type</span><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// The parameters `x` and `y` have the type number</span><span class="token keyword">let</span> myAdd<span class="token punctuation">:</span> <span class="token punctuation">(</span>baseValue<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> increment<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这叫做”按上下文归类”，是类型推断的一种，它帮助我们更好的为程序指定类型。</p><hr><h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><p><code>TypeScript</code> 里的每个函数参数都是必须的。这不是指不能传递 <code>null</code> 或 <code>undefined</code> 作为参数，而是说编译器检查用户是否为每个参数都传入了值。编译器还会假设只有这些参数会被传递进函数。间短地说，传递给一个函数地参数个数必须与函数期望的参数个数一致。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>fristName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">''</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too few parameters</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too many parameters</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// right</span></code></pre><p><code>Javascript</code> 里，每个参数都是可选的，可传可不传。没传参的时候，它的值就是 <code>undefined</code>。在 <code>TypeScript</code> 里我们可以在参数名旁使用 <code>?</code> 实现可选参数的功能。比如，我们想让 <code>lastName</code> 是可选的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> firstName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// works correctly now</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Expected 1-2 arguments, but got 3.</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// right</span></code></pre><p>可选参数必须跟在必须参数后面。如果上例我们想让 <code>firstName</code> 是可选的，那么就必须调整它们的位置，把 <code>firstName</code> 放在后面。</p><p>在 <code>TypeScript</code> 里，我们也可以为参数提供一个默认值，当用户没有传递这个参数或传递的值是 <code>undefined</code> 时，它们叫做有默认初始化值的参数。让我们修改上例，把 <code>lastName</code> 的默认值设置为 <code>Smith</code> 。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName <span class="token operator">=</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob Smith</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> undefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob Smith</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Expected 1-2 arguments, but got 3.</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  Bob Admas</span></code></pre><p>在所有必须参数后面的带初始默认话的参数都是可选的，与可选参数一样，在调用函数的时候可以省略。也就是说可选参数与末尾的默认参数共享参数类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>和</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> lastName <span class="token operator">=</span> <span class="token string">'Smith'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>共享同样的类型(<code>firstName: string, lastName?: string</code>) =&gt; <code>string</code>。默认参数的默认值消失了，只保留了它是一个可选参数的信息。</p><p>与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。如果带默认值的参数出现在必须参数前面，用户必须明确的传入 <code>undefined</code> 值来获得默认值。例如，我们重写最后一个例子，让 <code>undefined</code> 是带默认值的参数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName <span class="token operator">=</span> <span class="token string">'Will'</span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too few parameters</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">,</span> <span class="token string">'Sr.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error, too many parameters</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay and returns "Bob Admas"</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> <span class="token string">'Admas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay and returns "Will Admas"</span></code></pre><hr><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>必须参数、默认参数和可选参数有个共同点：它们表示某一个参数。有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来，在 <code>JavaScript</code> 里，你可以使用 <code>arguments</code> 来 访问所有传入的参数。</p><p>在 <code>TypeScript</code> 里，你可以把所有参数收集到一个变量里：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> employeeName <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">'Joseph'</span><span class="token punctuation">,</span> <span class="token string">'Samuel'</span><span class="token punctuation">,</span> <span class="token string">'Lucas'</span><span class="token punctuation">,</span> <span class="token string">'MacKinzie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Joseph Samuel Lucas MacKinzie</span></code></pre><p>剩余参数会被当作个数不限的可选参数。可以一个都没有，同样也可以有任意个。编译器创建参数数组，名字是你在省略号 (<code>...</code>) 后面给定的名字，你可以在函数体内使用这个数组。</p><p>这个省略号也会在带有剩余参数的函数类型定义上使用到：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>restOfName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> restOfName<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> buildNameFun<span class="token punctuation">:</span> <span class="token punctuation">(</span>fname<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span> <span class="token operator">=</span> buildName<span class="token punctuation">;</span></code></pre><hr><h3 id="This"><a href="#This" class="headerlink" title="This"></a><code>This</code></h3><p>学习如何在 <code>JavaScript</code> 里正确的使用 <code>this</code> 就好比一场成人礼。由于 <code>TypeScript</code> 是 <code>JavaScript</code> 的超集， <code>TypeScript</code> 程序员也需要弄清 <code>this</code> 工作机制并且有 <code>bug</code> 的时候能够找出错误所在。幸运的是， <code>TypeScript</code> 能通知你错误地使用了 <code>this</code> 的地方。如果你想了解 <code>JavaScript</code> 里的 <code>this</code> 是如何工作的，那么首先阅读 <code>Yehuda Katz</code> 写的<a href="http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/" target="_blank" rel="noopener">Understanding JavaScript Function Invocation and “this”</a>。 <code>Yehuda Katz</code> 的文章详细的阐述了 <code>this</code> 的内部工作原理，因此我们这里只做简单介绍。</p><hr><h3 id="this-和-箭头函数"><a href="#this-和-箭头函数" class="headerlink" title="this 和 箭头函数"></a><code>this</code> 和 箭头函数</h3><p><code>JavaScript</code> 里， <code>this</code> 的值在函数被调用的时候才会指定。这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。但众所周知，这不是一件很简单的事，尤其是返回一个函数或将函数当作参数传递的时候。</p><p>下面看一个例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pickerCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> pickerSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickerCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickerSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>        card<span class="token punctuation">:</span> pickerCard <span class="token operator">%</span> <span class="token number">13</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickerCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card: '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">' of '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到 <code>createCardPicker</code> 是个函数，并且它又返回了一个函数。如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。因为 <code>createCardPicker</code> 返回的函数里的 <code>this</code> 被设置成了 <code>window</code> 而不是 <code>deck</code> 对象。因为我们只是独立的调用了 <code>cardPicker</code> 。顶级的非方法式调用会将 <code>this</code> 视为 <code>window</code> 。(注意 ⚠️：在严格模式下， <code>this</code> 为 <code>undefined</code> 而不是 <code>window</code> 。)</p><p>为了解决这个问题，我们可以在函数被返回时就绑好正确的 <code>this</code> 。这样的话，无论之后怎么使用它，都会引用绑定的 <code>deck</code> 对象。我们需要改变函数表达式来使用 <code>ECMAScript 6</code> 箭头语法。箭头函数能保存函数创建时的 <code>this</code> 值，而不是调用时的值。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> deck <span class="token operator">=</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pickerCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> pickerSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickerCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickerSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>        card<span class="token punctuation">:</span> pickerCard <span class="token operator">%</span> <span class="token number">13</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card: '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">' of '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更好事情是， <code>TypeScript</code> 会警告你犯了一个错误，如果你给编译器设置了 <code>--nolmplicitThis</code> 标记。它会指出 <code>this.suits[pickedSuit]</code> 里的 <code>this</code> 的类型为 <code>ay</code> 。</p><hr><h3 id="this-参数"><a href="#this-参数" class="headerlink" title="this 参数"></a><code>this</code> 参数</h3><p>不幸的是，<code>this.suits[pickedSuit]</code> 的类型依旧为 <code>any</code>。这是因为 <code>this</code> 来自对象字面量里的函数表达式。修改的方法是，提供一个显式的 <code>this</code> 参数。 <code>this</code> 参数是个假的参数，它出现在参数列表的最前面：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// make sure `this` is unusable in this standalone function</span><span class="token punctuation">}</span></code></pre><p>让我们往例子里添加一些接口，<code>Card</code> 和 <code>Deck</code>，让类型重用能够变得清晰简单些：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Card</span> <span class="token punctuation">{</span>  suit<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  card<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Deck</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  cards<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Deck<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Card<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> deck<span class="token punctuation">:</span> Deck <span class="token operator">=</span> <span class="token punctuation">{</span>  suits<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  cards<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 注意:该函数现在显式地指定它的被调用方必须是Deck类型</span>  createCardPicker<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Deck<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> pickerCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> pickerSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>pickerCard <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        suit<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suits<span class="token punctuation">[</span>pickerSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>        card<span class="token punctuation">:</span> pickerCard <span class="token operator">%</span> <span class="token number">13</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> cardPicker <span class="token operator">=</span> deck<span class="token punctuation">.</span><span class="token function">createCardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickerCard <span class="token operator">=</span> <span class="token function">cardPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card: '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">' of '</span> <span class="token operator">+</span> pickedCard<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在 <code>TypeScript</code> 知道 <code>createCardPicker</code> 期望在某个 <code>Deck</code> 对象上调用。也就是说 <code>this</code> 是 <code>Deck</code> 类型的，而非 <code>any</code> 类型，因此 <code>--noImplicitThis</code> 不会报错了。</p><hr><h3 id="this-参数在回调函数里"><a href="#this-参数在回调函数里" class="headerlink" title="this 参数在回调函数里"></a><em><code>this</code></em> 参数在回调函数里</h3><p>你也可以看到过在回调函数里的 <code>this</code> 报错：当你将一个函数传递到某个库函数里稍后会被调用时。因为当回调函数被调用的时候，它们会被当成一个普通函数调用， <code>this</code> 将为 <code>undefined</code> 。稍作改动，你就可以通过 <code>this</code> 参数来避免错误。首先，库函数的作者要指定 <code>this</code> 的类型：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">UIElement</span> <span class="token punctuation">{</span>  <span class="token function">addClickListener</span><span class="token punctuation">(</span>onclick<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>this: void</code> 表示 <code>addClickListener</code> 期望 <code>onclick</code> 是不需要此<code>this</code> 类型的函数。其次，用 <code>this</code> 注释您的调用代码。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// oops, used this here. using this callback would crash at runtime</span>  <span class="token function">onClickBad</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> Handler<span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uiElement<span class="token punctuation">.</span><span class="token function">addClickListener</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>onClickBad<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>指定了 <code>this</code> 类型后，你显式声明 <code>onClickBad</code> 必须在 <code>Handler</code> 的实例上调用。然后 <code>TypeScript</code> 会检测 <code>addClickListener</code> 要求函数带有 <code>this: void</code> 。改变 <code>this</code> 类型来修复这个错误：</p><p>指定了 this 类型后，你显式声明 onClickBad 必须在 Handler 的实例上调用。 然后 TypeScript 会检测到 addClickListener 要求函数带有 this: void。 改变 this 类型来修复这个错误：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// oops, used this here. using this callback would crash at runtime</span>  <span class="token function">onClickGood</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">,</span> e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'clicked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uiElement<span class="token punctuation">.</span><span class="token function">addClickListener</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>onClickGood<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为 <code>onClickGood</code> 指定了 <code>this</code> 类型为 <code>void</code>，因此传递 <code>addClickListener</code> 是合法的。 当然了，这也意味着不能使用 <code>this.info</code>。 如果你两者都想要，你不得不使用箭头函数了：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>  info<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  onClickGood <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> e<span class="token punctuation">.</span>message<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是可行的因为箭头函数不会捕获 <code>this</code> ，所以你总是可以把它们传给期望 <code>this: void</code> 的函数。 缺点是每个 <code>Handler</code> 对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到 <code>Handler</code> 的原型链上。 它们在不同 <code>Handler</code> 对象间是共享的。</p><hr><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p><code>JavaScript</code> 本身是个动态语言，<code>JavaScript</code> 里函数根据传入不同的参数而返回不同类型的数据是很常见的。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Check to see if we're working with an object/array</span>  <span class="token comment" spellcheck="true">// if so, they gave us the deck and we'll pick the card</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickedCard <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pickedCard<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Otherwise just let them pick the card</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickedSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      suit<span class="token punctuation">:</span> suits<span class="token punctuation">[</span>pickedSuit<span class="token punctuation">]</span><span class="token punctuation">,</span>      card<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">13</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> myDeck <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'diamonds'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'hearts'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard1 <span class="token operator">=</span> myDeck<span class="token punctuation">[</span><span class="token function">pickedCard</span><span class="token punctuation">(</span>myDeck<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card'</span> <span class="token operator">+</span> pickedCard1<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">'of'</span> <span class="token operator">+</span> pickedCard1<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard2 <span class="token operator">=</span> <span class="token function">pickedCard</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">'of'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>pickCard</code> 方法根据传入参数的不同会返回两种不同的类型。如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。如果用户想抓牌，我们告诉他抓到了什么牌。但是这怎么在类型系统里表示呢。</p><p>方法是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。<br>下面我们来重载 <code>pickCard</code> 函数。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> suits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hearts'</span><span class="token punctuation">,</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> <span class="token string">'clubs'</span><span class="token punctuation">,</span> <span class="token string">'diamonds'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token punctuation">{</span>suit<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> card<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  suit<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  card<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pickCard</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Check to see if we're working with an object/array</span>  <span class="token comment" spellcheck="true">// if so, they gave us the deck and we'll pick up the card</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">=</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickedCard<span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pickerCard<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Otherwise just let them pick up the card</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">==</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pickefSuit <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      suit<span class="token punctuation">:</span> suits<span class="token punctuation">[</span><span class="token string">'pickerSuit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      card<span class="token punctuation">:</span> x <span class="token operator">%</span> <span class="token number">13</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> myDeck <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'diamonds'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'spades'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> suit<span class="token punctuation">:</span> <span class="token string">'hearts'</span><span class="token punctuation">,</span> card<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard1 <span class="token operator">=</span> myDeck<span class="token punctuation">[</span><span class="token function">pickCard</span><span class="token punctuation">(</span>myDeck<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> pickedCard2 <span class="token operator">=</span> <span class="token function">pickCard</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'card'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>card <span class="token operator">+</span> <span class="token string">'of'</span> <span class="token operator">+</span> pickedCard2<span class="token punctuation">.</span>suit<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样改变后，重载的 <code>pickCard</code> 函数在调用的时候会进行正确的类型检测。</p><p>为了让编译器能够选择正确的检查类型，它与 <code>JavaScript</code> 里的处理流程相似。它查找重载列表，尝试使用第一个重载定义。如果匹配的话就使用这个。因此，在定义重载的时候，一定要把最精确的定义放在最前面。</p><p>注意，<code>function pickCard(x): any</code> 并不是重载列表的一部分，因此这里只要两个重载：一个接收对象，另一个接收数字，以其它参数调用 <code>pickCard</code> 会产生错误。</p><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/functions.html" target="_blank" rel="noopener">TypeScript 函数</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之类</title>
      <link href="/2019/10/09/typescript-lei/"/>
      <url>/2019/10/09/typescript-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>传统的 <code>JavaScript</code> 程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从 <code>ECMAScript 2015</code>，也就是 <code>ECMAScript 6</code> 开始，<code>JavaScript</code> 程序员将能够使用基于类的面向对象的方式。 使用 <code>TypeScript</code>，我们允许开发者现在就使用这些特性，并且编译后的 <code>JavaScript</code> 可以在所有主流浏览器和平台上运行，而不需要等到下个 <code>JavaScript</code> 版本。</p><hr><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>下面来看一个使用 <code>类</code> 的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {greeting: 'World'}</span>greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,World</span></code></pre><p>如果你使用过 <code>C#</code> 或 <code>Java</code>，你会对这种语法非常熟悉。我们声明一个 <code>Greeter</code> 类，这个类有三个成员：</p><ul><li>一个 <code>greeting</code> 的属性</li><li>一个构造函数</li><li>一个 <code>greet</code> 方法</li></ul><p>你会注意到，我们在引用任何一个类的成员的时候，都用了 <code>this</code> ，它表示我们访问的是类的成员。<br>最后一行，我们用 <code>new</code> 构造了 <code>Greeter</code> 类的一个实例。它会调用之前定义的构造函数，创建一个 <code>Greeter</code> 类型的新对象，并执行构造函数初始化它。</p><hr><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>在 <code>TypeScript</code> 里，我们可以使用常用的面向对象模式。基于类的程序设计中一种最基本的模式是：允许使用继承类拓展现有的类。<br>看下面 👇 的例子 🌰：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Animal moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Woof! Woof!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Woof! Woof!</span>dog<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Animal moved 10m.</span>dog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Woof! Woof!</span></code></pre><p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。这里， <code>Dog</code> 是一个派生类，它派生自 <code>Animal</code> 基类，通过 <code>extends</code> 关键字。派生类通常被称作子类，基类通常被称作 超类。</p><ul><li><strong>基类</strong>：在面向对象设计中，被定义为包含所有实体共性的 <code>class</code> 类型。已存在的用来派生新类的类称为基类，又称父类。</li><li><strong>派生类</strong>：从已定义类产生新类的过程称为派生，由已存在的类派生出来的新类称为派生类，又称子类。</li></ul><p>因为 <code>Dog</code> 继承了 <code>Animal</code> 的功能，因此我们可以创建一个 <code>Dog</code> 的实例，拥有 <code>bark()</code> 和 <code>move()</code> 方法。<br>下面我们来看个更加复杂的例子。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Snake</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Slithering'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Galloping'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> sam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Snake</span><span class="token punctuation">(</span><span class="token string">'Sammy the Python'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token string">'Tommy the Palomino'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sam<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Slithering  Sammy the Python moved 5m.</span>tom<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Galloping  Tommy the Palomino moved 34m.</span></code></pre><p>这个例子展示了一些上面没有提到的特性。这一次我们使用 <code>extends</code> 关键字创建了 <code>Animal</code> 的两个子类： <code>Snake</code> 和 <code>Horse</code> 。</p><p>与前一个例子的不同点是，派生类包含了一个构造函数，它必须调用 <code>super</code>，它会执行基类的构造函数。而且，在构造函数里访问 <code>this</code> 之前，我们一定要调用 <code>super</code>，这个是 <code>TypeScript</code> 强制执行的一条重要规则。</p><p>这个例子演示了如何让在子类里重写父类的方法。 <code>Snake</code> 和 <code>Horse</code> 类都创建了 <code>move</code> 方法，它们重写了从 <code>Animal</code> 继承来的 <code>move</code> 方法，使得 <code>move</code> 方法根据不同的类而具有不同的功能。注意，即使 <code>tom</code> 被声明为 <code>Animal</code> 类型，但因为它是 <code>Horse</code> ，调用 <code>tom.move(34)</code> 时，它会调用 <code>Horse</code> 重写的方法。</p><hr><h3 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h3><h4 id="公共-public"><a href="#公共-public" class="headerlink" title="公共 public"></a><code>公共 public</code></h4><p>在上面的例子里，我们可以自由的访问程序里定义的成员。如果你对其语言中的类比较了解，就会注意到我们在之前的代码里并没有使用 <code>public</code> 来做修饰符，在 <code>TypeScript</code> 里，成员都默认为 <code>public</code> 。</p><p>你也可以明确的将一个成员标记成 <code>public</code> 。我们可以用下面的方式来重写上面的 <code>Animal</code> 类：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">move</span><span class="token punctuation">(</span>distanceInMeters<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> moved </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>distanceInMeters<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">m.`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="私有-private"><a href="#私有-private" class="headerlink" title="私有 private"></a><code>私有 private</code></h4><p>当成员被标记为 <code>private</code> 时，它就不能在声明它的类的外部访问。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error： Property 'name' is private and only accessible within class 'Animal'</span></code></pre><p><code>TypeScript</code> 使用的是结构性类型系统。当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p><p>然而，当我们比较带有 <code>private</code> 或 <code>protected</code> 成员类型的时候，情况就不同了。如果其中一个类型里包含 <code>private</code> 成员，那么只有当另外一个类型中也存在这样一个 <code>private</code> 成员，并且它们都是来自同一处声明时，我们才认为两个类型是兼容的。对于 <code>protected</code> 成员也使用这个规则。</p><p>下面来看一个例子，更好的说明了这一点：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Rhino</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'Rhino'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">consoructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">'Goat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> rhino <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rhino</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>animal <span class="token operator">=</span> rhino<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay</span>animal <span class="token operator">=</span> employee<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：Animal 与 Employee 不兼容.</span></code></pre><p>在这个例子中，有 <code>Animal</code> 、 <code>Rhino</code> 和 <code>Empolyee</code> 三个类， <code>Rhino</code> 是 <code>Animal</code> 的子类， <code>Empolyee</code> 类看上去与 <code>Animal</code> 是相同的。我们创建了几个这些类的实例，并相互赋值拉看看会发生什么。因为 <code>Animal</code> 和 <code>Rhino</code> 共享了来自 <code>Animal</code> 里的私有成员定义 <code>private name: string</code>，因此它们是兼容的。然而 <code>Emloyee</code> 却 不是这样。当把 <code>Employee</code> 赋值给 <code>Animal</code> 的时候，得到一个错误，说它们的类型不兼容。尽管 <code>Employee</code> 里也有一个私有成员 <code>name</code> ，但它明显不是 <code>Animal</code> 里面定义的那个。</p><h4 id="受保护的-protected"><a href="#受保护的-protected" class="headerlink" title="受保护的 protected"></a><code>受保护的 protected</code></h4><p><code>protected</code> 修饰符与 <code>private</code> 修饰符的行为很相似，但有一点不同， <code>protected</code> 成员在派生类中仍然可以访问。例如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Empolyee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>theName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Empolyee</span><span class="token punctuation">(</span><span class="token string">'Howard'</span><span class="token punctuation">,</span> <span class="token string">'Sales'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {name: 'Howard', department: 'Sales'}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span><span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  Hello, my name is Howard and I work in Sales.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>howard<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误：属性 'name' 受保护，并且只能在类 'Person' 及其子类中访问</span></code></pre><p>注意 ⚠️，我们不能再 <code>Person</code> 类外使用 <code>name</code>，但是我们仍然可以通过 <code>Empolyee</code> 类的实例方法访问，因为 <code>Employee</code> 是由 <code>Person</code> 派生而来的。</p><p>构造函数可以被标记成 <code>protected</code>，这意味着这个类不能在包含它的类外被实例化，但是能被继承。比如：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">protected</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Empooyee 能继承 Person</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> department<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>theName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">getElevatorPitch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I work in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> howard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">'Howard'</span><span class="token punctuation">,</span> <span class="token string">'Sales'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay</span><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'John'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误：Person 的构造函数是被保护的</span></code></pre><hr><h3 id="reanonly-修饰符"><a href="#reanonly-修饰符" class="headerlink" title="reanonly 修饰符"></a>reanonly 修饰符</h3><p>你可以使用 <code>readonly</code> 关键字将属性设置为只读的。只读属性必须在声明时或构造函数里被初始化。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Octopus</span> <span class="token punctuation">{</span>  readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  readonly numberOfLegs<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>theName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> theName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> dad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Octopus</span><span class="token punctuation">(</span><span class="token string">'Man with the 8 strong legs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dad<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// {numberOfLegs: 8, name: 'Man with the 8 strong legs'}</span>dad<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Man with the 3-piece suit'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 错误：name 是只读的.</span></code></pre><h4 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h4><p>在上面的例子中，我们必须在 <code>Octopus</code> 类里定义一个只读成员 <code>name</code> 和 <code>theName</code> 的构造函数，并且立刻将 <code>theName</code> 赋值给 <code>name</code>，这种情况经常会遇到。参数属性可以方便的让我们在一个地方定义并初始化一个成员。下面的例子是对之前 <code>Octopus</code> 的修改版，使用了参数属性：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Octopus</span> <span class="token punctuation">{</span>  readonly numberOfLegs<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>readonly name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意看我们是如何舍弃了 <code>theName</code>，仅在构造函数里使用 <code>readonly name: string</code>，参数来创建和初始化 <code>name</code> 成员。我们把声明和赋值合并至一处。<br>参数属性通过构造函数参数前面添加一个访问限定符来声明。使用 <code>private</code> 限定一个参数属性会声明并初始化一个私有成员；对于 <code>public</code> 和 <code>protected</code> 来说也是一样。</p><h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p><code>TypeScript</code> 支持通过 <code>getter</code> 和 <code>setter</code> 来截取对对象成员的访问。它能帮助你有效的控制对对象成员的访问。<br>下面来看如何把一个简单的类改写成使用 <code>get</code> 和 <code>set</code> 。首先，我们从一个没有使用存取器的例子开始。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>  fullName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'Bob Smith'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob Smith</span><span class="token punctuation">}</span></code></pre><p>我们可以随意的设置 <code>fullName</code>，这是非常方便的，但是这也可能会带来麻烦。<br>下面这个版本里，我们先检查用户密码是否正确，然后在允许其修改员工信息。我们把 <code>fullName</code> 的直接访问改成了可以检查密码的 <code>set</code> 方法。我们也加了一个 <code>get</code> 方法，让上面的例子仍然可以工作。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> passcode <span class="token operator">=</span> <span class="token string">'secret passcode'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> _fullName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span>newName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>passcode <span class="token operator">&amp;&amp;</span> passcode <span class="token operator">!==</span> <span class="token string">'secret passcode'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_fullName <span class="token operator">=</span> newName<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error：Unauthorized update of employee!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">'Bob Smith'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 弹出  Blob Smith</span><span class="token punctuation">}</span></code></pre><p>我们可以修改一下密码，来验证一下存取器是否工作的。当密码不对时，会提示我们没有权限去修改员工。<br>对于存取器有下面几点需要注意的：</p><ul><li>首先，存取器要求你将编译器设置为输出 <code>ECMAScript 5</code> 或更高，不支持降级到 <code>ECMAScript 3</code> 。</li><li>其次，只有带 <code>get</code> 不带有 <code>set</code> 的存取器自动被推断为 <code>readonly</code> 。</li></ul><hr><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>到目前为止，我们只讨论了类的实例成员，那些仅当类被实例化的时候才会被初始化的属性。我们可以创建类的静态成员，这些属性存在于类本身上面而不是类的实例上。在这个例子里，我们使用 <code>static</code> 定义 <code>origin</code>，因为它是所有网格都会用到的属性。每个实例想要访问这个属性的时候，都要在 <code>origin</code> 前加上类名。如同在实例属性上使用 <code>this.</code> 前缀来访问属性一样，这里我们使用 <code>Grid.</code> 来访问静态属性。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Grid</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> origin <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">calculateDistanceFromOrigin</span><span class="token punctuation">(</span>point<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> xDist <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> Grid<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token keyword">let</span> yDist <span class="token operator">=</span> point<span class="token punctuation">.</span>x <span class="token operator">-</span> Grid<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>xDist <span class="token operator">*</span> xDist <span class="token operator">+</span> yDist <span class="token operator">*</span> yDist<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> scale<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> grid1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grid</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5x scale</span><span class="token keyword">let</span> grid2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grid</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5x scale</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grid1<span class="token punctuation">.</span><span class="token function">calculateDistanceFromOrigin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 14.142135623730951</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grid2<span class="token punctuation">.</span><span class="token function">calculateDistanceFromOrigin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.8284271247461903</span></code></pre><hr><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类作为其他派生类的基类使用。它们一般不会直接被实例化。不同于接口，抽象类可以包含成员的实现细节。<code>abstract</code> 关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  abstract <span class="token function">makeSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>  <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'roaming the search...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。抽象方法的语法于与接口方法类似。两者都是定义方法签名但不包含方法体。然而，抽象方法必须包含 <code>abstract</code> 关键字并且可以包含访问修饰符。</p><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Department name '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  abstract <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须在派生类中实现</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AccountingDepartment</span> <span class="token keyword">extends</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">'Accounting and Auditing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在派生类的构造函数中必须调用 super()</span>  <span class="token punctuation">}</span>  <span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The Accounting Department meets each Monday at 10am.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Genaerating accounting reports...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> department<span class="token punctuation">:</span> Department<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 允许创建一个对抽象类型的引用</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error：Cannot create an instance of an abstract class.</span><span class="token comment" spellcheck="true">// 错误：不能创建一个抽象类的实例</span>department <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountingDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 允许对一个抽象子类进行实例化和赋值</span>department<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Department name Accounting and Auditing</span>department<span class="token punctuation">.</span><span class="token function">printMeeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The Accounting Department meets each Monday at 10am.'</span>department<span class="token punctuation">.</span><span class="token function">generateReports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// error： Property 'generateReports' does not exist on type 'Department'.</span><span class="token comment" spellcheck="true">// generateReports 方法在声明的抽象类中不存在</span></code></pre><hr><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>当你在 <code>TypeScript</code> 中声明了一个类的时候，实际上同时声明了很多东西。首先就是 <strong><em>实例的类型</em></strong>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> greeter<span class="token punctuation">:</span> Greeter<span class="token punctuation">;</span>greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,World</span></code></pre><p>这里我们写了 <code>let greeter: Greeter</code>，意思是 <code>Greeter</code> 类的实例类型是 <code>Greeter</code> 。这对于用过其他面向对象的语言的程序员来说讲已经是老习惯了。</p><p>我们也创建了一个叫<em>构造函数</em>的值。这个函数会在我们使用 <code>new</code> 创建类实例的时候被调用。下面我们来看看，上面的代码被编译成 <code>JavaScript</code> 后是什么样子的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Greeter <span class="token operator">=</span> <span class="token comment" spellcheck="true">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Greeter</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Greeter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>greet <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Greeter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> greeter<span class="token punctuation">;</span>greeter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token string">'World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,World</span></code></pre><p>上面的代码里，<code>var Greeter</code> 将被赋值为构造函数。当我们调用 <code>new</code> 并执行了这个函数后，便会得到一个类的实例。这个构造函数也包含了类的所有静态属性。换个角度说，我们可以认为类具有<em>实例部分</em>和<em>静态部分</em>这个两个部分。</p><p>让我们稍微改写一下这个例子，看看它们之间的区别：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> standardGreeting <span class="token operator">=</span> <span class="token string">'Hello,there'</span><span class="token punctuation">;</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">'Hello,'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Greeter<span class="token punctuation">.</span>standardGreeting<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> greeter1<span class="token punctuation">:</span> Greeter<span class="token punctuation">;</span>greeter1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter1<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello,there</span><span class="token keyword">let</span> greeterMaker<span class="token punctuation">:</span> <span class="token keyword">typeof</span> Greeter <span class="token operator">=</span> Greeter<span class="token punctuation">;</span>greeterMaker<span class="token punctuation">.</span>standardGreeting <span class="token operator">=</span> <span class="token string">'Hey,there'</span><span class="token punctuation">;</span><span class="token keyword">let</span> greeter2<span class="token punctuation">:</span> Greeter<span class="token punctuation">;</span>greeter2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeter2<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hey,there</span></code></pre><p>这个例子里， <code>greeter1</code> 与之前看到的一样。我们实例化 <code>Greeter</code> 类，并使用这个对象。与我们之前看到的一样。</p><p>再之后，我们直接使用类。我们创建了一个叫 <code>greeterMaker</code> 的变量。这个变量保存了这个类或者说保存了类构造函数。然后我们使用 <code>typeof Greeter</code>，意思是取 <code>Greeter</code> 类的类型，而不是实例的类型。或者更确切的说，”告诉我 <code>Greeter</code> 标识符的类型”，也就是构造函数的类型。这个类型包含了类的所有静态成员和构造函数。之后，就和前面一样，我们在 <code>greeterMaker</code> 上使用 <code>new</code>，创建 <code>Greeter</code> 的实例。</p><h4 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h4><p>类定义会创建两个东西：类的实例类型和一个构造函数。因为类可以创建出类型，所以你能够在允许使用接口的地方使用类。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> point3d<span class="token punctuation">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>point3d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { x: 1, y: 2, z: 3 }</span></code></pre><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/classes.html" target="_blank" rel="noopener">TypeScript 类</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之接口</title>
      <link href="/2019/10/02/typescript-jie-kou/"/>
      <url>/2019/10/02/typescript-jie-kou/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>TypeScript</code> 的核心原则之一是对值所具有的结构进行类型检查。它有时被称做 <code>鸭式辨型法</code> 或 <code>结构性子类型化</code>。在 <code>TypeScript</code> 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><hr><h3 id="接口初探"><a href="#接口初探" class="headerlink" title="接口初探"></a>接口初探</h3><p>下面通过一个简单的示例来观察接口是如何让工作的：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">:</span> <span class="token punctuation">{</span> label<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>  size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  label<span class="token punctuation">:</span> <span class="token string">'Size 10 Object'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printLabel</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类型检查器会查看 <code>printLabel</code> 的调用。 <code>printLabel</code> 有一个参数，并要求这个对象参数有一个名为 <code>label</code> 类型为 <code>string</code> 的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候<code>TypeScript</code> 却并不会这么宽松，我们下面会稍做讲解。</p><p>下面我们重写上面的例子，这次使用接口来描述：必须包含一个 <code>label</code> 属性且类型为 <code>string</code>：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">LabelledValue</span> <span class="token punctuation">{</span>  label<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printLabel</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">:</span> LabelledValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>labelledObj<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myObj <span class="token operator">=</span> <span class="token punctuation">{</span>  size<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>  label<span class="token punctuation">:</span> <span class="token string">'Size 10 Object'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">printLabel</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>LabelledValue</code> 接口就好比一个名字，用来描述上面例子里的要求。它代表了有一个 <code>label</code> 属性且类型为 <code>string</code> 的对象。需要注意的是，我们在这里并不能像在其他语言里一样，说传给 <code>printLabel</code> 的对象实现了这个接口。我们只会去关注值的外形，只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p><p>还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p><hr><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里的属性不全都是必须的。有些是只在某些条件下存在，或者根本不存在。可选属性在应用 <code>option bags</code> 模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p><p>下面是应用了 <code>option bags</code> 的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>color<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'black'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code> 符号。</p><p>可选属性的好处之一是可以对可能存在的属性进行 <code>预定义</code>，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 <code>createSquare</code>里的 <code>color</code> 属性名拼错，就会得到一个错误提示：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> newSquare <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">,</span> area<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>clor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Error: Property 'clor' does not exist on type 'SquareConfig'</span>    newSquare<span class="token punctuation">.</span>color <span class="token operator">=</span> config<span class="token punctuation">.</span>clor<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token punctuation">{</span>    newSquare<span class="token punctuation">.</span>area <span class="token operator">=</span> config<span class="token punctuation">.</span>width <span class="token operator">*</span> config<span class="token punctuation">.</span>width<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> newSquare<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'black'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候来修改其值。你可以在属性名前用 <code>readonly</code> 来指定只读属性：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  readonly x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  readonly y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>你可以通过赋值一个对象字面量来构造一个 <code>Point</code>。赋值后，<code>x</code> 和 <code>y</code> 再也不能被改变了。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> p1<span class="token punctuation">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p><code>TypeScript</code> 具有 <code>ReadonlyArray&lt;T&gt;</code> 类型，它与 <code>Array&lt;T&gt;</code> 相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> ro<span class="token punctuation">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> a<span class="token punctuation">;</span>ro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span>ro<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span>ro<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span>a <span class="token operator">=</span> ro<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>上面代码的最后一行，可以看到就算把整个 <code>ReadonlyArray</code> 赋值到一个普通数组也是不可以的。但是你可以用类型断言重写：</p><pre class=" language-typescript"><code class="language-typescript">a <span class="token operator">=</span> ro as <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p><strong><em><code>readonly</code></em></strong> <strong>_vs_</strong> <strong><em><code>const</code></em></strong></p><p>最简单判断该用 <code>readonly</code> 还是 <code>const</code> 的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用<code>readonly</code>。</p><hr><h3 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h3><p>我们在第一个例子里使用了接口，<code>TypeScript</code> 让我们传入 <code>{ size: number; label: string;}</code> 到仅期望得到 <code>{ label&quot; string; }</code> 的函数里。我们已经学过了可选属性，并且知道它们在 <code>option bags</code> 模式里很有用。</p><p>然而，天真地将这两者结合的话就会像在 <code>JavaScript</code> 里那样搬起石头砸自己的脚。比如，那 <code>createSquare</code> 例子来说：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span> SquareConfig<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> area<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">}</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> colour<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意传入 <code>createSquare</code> 的参数拼写为 <code>colour</code> 而不是 <code>color</code>。 在 <code>JavaScript</code> 里，这会默默地失败。</p><p>你可能会争辩这个程序已经正确地类型化了，因为 <code>width</code> 属性是兼容的，不存在 <code>color</code> 属性，而且额外的 <code>colour</code> 属性是无意义的。</p><p>然而，<code>TypeScript</code> 会认为这段代码可能存在 <code>bug</code> 。对象字面量会被特殊对待而且会经过额外属性检查，当将它们赋值给变量或作为参数传递的时候。<br>如果一个对象字面量存在任何 <code>目标类型</code> 不包含的属性时，你会得到一个错误。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// error: 'colour' not expected in type 'SquareConfig'</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> colour<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>绕开这些检查非常简单，最简单的方法是使用类型断言:</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span><span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> opacity<span class="token punctuation">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span> as SquareConfig<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然而，最佳的方式是能够添加一个 <code>字符串索引签名</code>，前提是你能够确定这个对象可能具有某些作为特殊使用的额外属性。如果 <code>SquareConfig</code> 带有上面定义的类型的 <code>color</code> 和 <code>width</code> 属性，并且还会带有任意数量的其他属性，那么我们可以这样定义它：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SquareConfig</span> <span class="token punctuation">{</span>  color<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  width<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>proName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们稍后会讲到索引签名，但这在我们要表示的是 <code>SquareConfig</code> 可以有任意数量的属性，并且只要它们不是 <code>color</code> 和 <code>width</code> ，那么就不所谓它们的类型是什么。</p><p>还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给另一个变量：因为 <code>squareOptions</code> 不会经过额外的属性检查，所以编译器不会报错。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> squareOptions <span class="token operator">=</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> mySquare <span class="token operator">=</span> <span class="token function">createSquare</span><span class="token punctuation">(</span>squareOptions<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>要留意，在像上面一样的简单代码里，你可能不应该绕开这些检查。对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部分额外属性检查错误是真正的 <code>bug</code>。就是说你遇到了额外属性检查出的错误，比如 <code>option bags</code>，你应该去审查一下你的类型声明。在这里，如果支持传入 <code>color</code> 或 <code>colour</code> 属性到 <code>createSquare</code>，你应该修改 <code>SquareConfig</code> 定义来体现出这一点。</p><hr><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>接口能够描述 <code>JavaScript</code> 中对象拥有的各种各样的外形。除了描述带有属性的普通对象外，接口也可以描述函数类型。</p><p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样定义后，我们可以像使用其他接口一样使用这个函数类型的接口。下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。 比如，我们使用下面的代码重写上面的例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> sub<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>函数的参数会逐个进行检查，要求对于位置上的参数类型是兼容的。如果你不想指定类型，<code>TypeScript</code> 的类型系统会推断出参数类型，因为函数直接赋给了 <code>SearchFunc</code> 类型变量。函数的返回值类型是通过其返回值类型推断出来的。（此例是 <code>false</code> 和 <code>true</code>）。如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 <code>SearchFunc</code> 接口中的定义不匹配。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><p>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如 <code>a[10]</code> 或 <code>ageMap[&quot;daniel&quot;]</code>。 可索引类型具有一个 <strong><em>索引签名</em></strong>。它描述了 <strong><em>对象索引的类型</em></strong>，还有 <strong><em>相应的索引返回值类型</em></strong>。 让我们看一个例子：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> StringArray<span class="token punctuation">;</span>myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Fred'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> myStr<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> myArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>上面例子里，我们定义了 <code>StringArray</code> 接口，它具有<code>索引签名</code>。 这个索引签名表示了当用 <code>number</code> 去索引 <code>StringArray</code> 时会得到 <code>string</code> 类型的返回值。</p><p><code>TypeScript</code> 支持两种索引签名：<code>字符串</code>和<code>数字</code>。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 <code>number</code> 来索引时，<code>JavaScript</code> 会将它转换成 <code>string</code> 然后再去索引对象。 也就是说用 <code>100</code>（一个 <code>number</code> ）去索引等同于使用 <code>&quot;100&quot;</code> （一个 <code>string</code> ）去索引，因此两者需要保持一致。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  breed<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span><span class="token keyword">interface</span> <span class="token class-name">NotOkay</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Animal<span class="token punctuation">;</span>  <span class="token punctuation">[</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> Dog<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>字符串索引签名能够很好的描述 <code>dictionary</code> 模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 <code>obj.property</code> 和 <code>obj[&quot;property&quot;]</code> 两种形式都可以。 下面的例子里， <code>name</code> 的类型与字符串索引类型不匹配，所以类型检查器给出一个错误提示：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">NUmberDictionary</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以，length 是 number 类型</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误， name 的类型与索引类型返回值的类型不匹配</span><span class="token punctuation">}</span></code></pre><p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ReadonlyStringArray</span> <span class="token punctuation">{</span>  readonly <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myArray<span class="token punctuation">:</span> ReadonlyArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Mallory'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error!</span></code></pre><p>你不能设置 <code>myArray[2]</code>，因为索引签名是只读的。</p><hr><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p>与 <code>C#</code> 或 <code>Java</code> 里接口的基本作用一样，<code>TypeScript</code> 也能够用它来明确的强制一个类去符合某种契约。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你也可以在接口中描述一个方法，在类里实现它，如同下面的 <code>setTime</code> 方法一样：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> Date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token function">setTime</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> Date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>currentTime <span class="token operator">=</span> d<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</p><h4 id="类静态部分与实例部分的区别"><a href="#类静态部分与实例部分的区别" class="headerlink" title="类静态部分与实例部分的区别"></a>类静态部分与实例部分的区别</h4><p>当你操作类和接口的时候，你要知道类是具有两个类型的：<code>静态部分的类型</code> 和 <code>实例的类型</code>。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockConstructor</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token punctuation">(</span>hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockConstructor</span> <span class="token punctuation">{</span>  currentTime<span class="token punctuation">:</span> Date<span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是因为当一个类实现了一个接口时，只对其实例部分进行类型检查。<code>constructor</code> 存在于类的静态部分，所以不在检查的范围内。</p><p>因此，我们应该直接操作类的静态部分。看下面的例子，我们定义了两个接口，<code>ClockConstructor</code> 为构造函数所用和 <code>ClockInterface</code> 为实例方法所用。为了方便我们定义一个构造函数 <code>createClock</code>，它用传入的类型创建实例。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ClockConstructor</span> <span class="token punctuation">{</span>  <span class="token keyword">new</span> <span class="token punctuation">(</span>hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClockInterface<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createClock</span><span class="token punctuation">(</span>  ctor<span class="token punctuation">:</span> ClockConstructor<span class="token punctuation">,</span>  hour<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  minute<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ClockInterface <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ctor</span><span class="token punctuation">(</span>hour<span class="token punctuation">,</span> minute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">DigitalClock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beep beep'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AnalogClock</span> <span class="token keyword">implements</span> <span class="token class-name">ClockInterface</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'tick tick'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> digital <span class="token operator">=</span> <span class="token function">createClock</span><span class="token punctuation">(</span>DigitalClock<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> analog <span class="token operator">=</span> <span class="token function">createClock</span><span class="token punctuation">(</span>AnalogClock<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>因为 <code>createClock</code> 的第一个参数是 <code>ClockConstructor</code> 类型，在 <code>createClock(AnalogClock, 7, 32)</code> 里，会检查 <code>AnalogClock</code> 是否符合构造函数签名。</p><hr><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token operator">&lt;</span>Sauare<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>sideLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">PenStroke</span> <span class="token punctuation">{</span>  penWidth<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span><span class="token punctuation">,</span> PenStroke <span class="token punctuation">{</span>  sideLength<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> square <span class="token operator">=</span> <span class="token operator">&lt;</span>Square<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'blue'</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>penWidth <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span>square<span class="token punctuation">.</span>sideLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><hr><h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>先前我们提过，接口能够描述 <code>JavaScript</code> 里丰富的类型。 因为 <code>JavaScript</code> 其动态灵活的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。</p><p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  interval<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Counter <span class="token punctuation">{</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token keyword">function</span><span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  count<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  count<span class="token punctuation">.</span>reset <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span></code></pre><p>在使用 <code>JavaScript</code> 第三方库的时候，你可能需要像上面那样去完整地定义类型。</p><hr><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的 <code>private</code> 和 <code>protected</code> 成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（<code>implement</code>）。</p><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系。 例：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> state<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SelectableControl</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Button</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TextBox</span> <span class="token keyword">extends</span> <span class="token class-name">Control</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 错误 Image 类型缺少 state 属性</span><span class="token keyword">class</span> <span class="token class-name">Image</span> <span class="token keyword">implements</span> <span class="token class-name">SelectableControl</span> <span class="token punctuation">{</span>  <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Location</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>在上面的例子里，<code>SelectableControl</code> 包含了 <code>Control</code> 的所有成员，包括私有成员 <code>state</code>。 因为 <code>state</code> 是私有成员，所以只能够是<code>Control</code> 的子类们才能实现 <code>SelectableControl</code> 接口。 因为只有 <code>Control</code> 的子类才能够拥有一个声明于 <code>Control</code> 的私有成员 <code>state</code>，这对私有成员的兼容性是必需的。</p><p>在 <code>Control</code> 类内部，是允许通过 <code>SelectableControl</code> 的实例来访问私有成员 <code>state</code> 的。 实际上， <code>SelectableControl</code> 接口和拥有<code>select</code> 方法的 <code>Control</code> 类是一样的。 <code>Button</code> 和 <code>TextBox</code> 类是 <code>SelectableControl</code> 的子类（因为它们都继承自 <code>Control</code> 并有<code>select</code> 方法），但 <code>Image</code> 和 <code>Location</code> 类并不是这样的。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 之基础类型</title>
      <link href="/2019/09/30/typescript-ji-chu-lei-xing/"/>
      <url>/2019/09/30/typescript-ji-chu-lei-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>为了让程序更有价值，我们需要能够处理最简单的数据单元：数字、字符串、结构体、布尔值等。<code>TypeScript</code>支持与<code>JavaScript</code>几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。</p><hr><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>最基本的数据类型就是简单的 <code>true</code>/ <code>false</code> 值，在 <code>JavaScript</code> 和 <code>TypeScript</code> 里叫做 <code>boolean</code>。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> isDone<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span></code></pre><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>和 <code>JavaScript</code> 一样，<code>TypeScript</code> 里的所有数字都是浮点数，这些浮点数的类型是 <code>number</code>。除了支持十进制和十六进制字面量，<code>TypeScript</code> 还支持 <code>ECMAScript2015</code> 中引入的二进制和八进制字面量。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> decLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">let</span> hexLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token keyword">let</span> binaryLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token keyword">let</span> octalLiteral<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>Javascript</code> 程序的另一项基本操作是处理网页或服务端的文本数据。像其他语言里一样，我们使用 <code>string</code> 表示文本数据类型。和<code>Javascript</code> 一样，可以使用双引号(<code>&quot;</code>)或单引号(<code>&#39;</code>)表示字符串。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'bob'</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">'smith'</span><span class="token punctuation">;</span></code></pre><p>你还可以使用模版字符串，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围(<code>`</code>)，并且以<code>${ expr }</code>这种形式嵌入表达式。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`GENE`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">;</span><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Hello，My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，I will be </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old next month`</span></span><span class="token punctuation">;</span></code></pre><p>这与下面定义 <code>sentence</code> 的方式效果相同。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> sentence<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">'Hello，My name is'</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'，I will be'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' years old next month'</span><span class="token punctuation">;</span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>TypeScript</code> 像 <code>JavaScript</code> 一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上 <code>[]</code>，表示由此类型元素组成的一个数组：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>第二种方式是使用数组泛型。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h3><p>元组类型允许表示一个已知元素数量和元素类型的数组，各元素的类型不必相同。比如你可以定义一对值分别为 <code>string</code> 和 <code>number</code> 类型的元组。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// Declare a tuple type</span><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span>  <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Initialize x</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span><span class="token comment" spellcheck="true">// Initialize it incorrectly</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><p>当访问一个已知索引的元素，会得到正确的类型：</p><pre class=" language-typescript"><code class="language-typescript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error, 'number' does not have 'substr'</span></code></pre><p>当访问一个越界的元素，会使用联合类型替代。</p><pre class=" language-typescript"><code class="language-typescript">x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'world'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, 字符串可以赋值给(string | number)类型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK, 'string' 和 'number' 都有 totoString</span>x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error, 布尔不是(string | number) 类型</span></code></pre><p>联合类型是高级主题，我们会在以后的章节里同讨论它。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><code>enum</code> 类型是对 <code>JavaScript</code> 标准数据类型的一个补充。像 <code>C#</code> 等其他语言一样，使用枚举类型可以为一组数值赋予美好的友好的名字。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>默认情况下，从 <code>0</code> 开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从 <code>1</code> 开始编号：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>或者，全部都采用手动赋值：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。例如，我们知道数值为 <code>2</code>，但是不知道它映射到 <code>Color</code> 里的那个名字，我们可以查找相应的名字。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Blue<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> colorName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> Color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>colorName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 显示 Green 因为上面代码里，它的值是2</span></code></pre><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>有时候，我们想要为那些在编程阶段还不清楚类型的变量指定一个类型。这些值可能来自于动态的内容，比如来自用户输入的第三方代码库。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用 <code>any</code> 类型来标记这些变量：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> notSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token string">'maybe a string instead'</span><span class="token punctuation">;</span>notSure <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, definitely a boolean</span></code></pre><p>在对现有代码进行改写的时候，就像它在其他语言中那样，它允许你在编译时可选择的包含或移除类型检查。你可能认为 <code>Object</code> 有相似的作用，就像它在其他语言中那样。但是 <code>Object</code> 类型的变量只是允许你给它赋任意值，但是却不能够在它上面调用任意的方法，即便它真有这样的方法：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> nouSure<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>notSure<span class="token punctuation">.</span><span class="token function">ifItExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, ifItExists might exist at runtime</span>notSure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// okay, toFixed exists (but the compiler does not check)</span><span class="token keyword">let</span> prettySure<span class="token punctuation">:</span> Object <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>prettySure<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error: Property 'toFixed' doesn't exist on the type 'Object'.</span></code></pre><p>当你只知道一部分数据的类型时， <code>any</code> 类型也是有用的。比如，你有一个数组，它包含了不同的类型的数据：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> list<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></code></pre><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>某种程度上来说， <code>void</code> 类型像是与 <code>any</code>  类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">warnUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This is my warning message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>声明一个 <code>void</code> 类型的变量没有什么大用，因为你只能赋予它 <code>undefined</code> 和 <code>null</code> 。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> unusable<span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span></code></pre><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><p> <code>TypeScript</code> 里， <code>undefined</code> 和 <code>null</code> 两者各自有自己的类型分别叫做 <code>undefined</code> 和 <code>null</code> 。和 <code>void</code> 相似，它们的本身的类型用处不是很大：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token comment" spellcheck="true">// 我们可以为这些变量分配的东西不多！</span> <span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> nill<span class="token punctuation">;</span></code></pre><p> 默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。也就是说你可以把 <code>null</code> 和 <code>undefined</code> 赋值给 <code>number</code> 类型的变量。</p><p> 然而，当你指定了一个 <code>--strickNullChecks</code> 标记， <code>null</code> 和 <code>undefined</code> 只能赋值给 <code>void</code> 和它们自个。这能避免很多常见的问题。也许在某处传入一个 <code>string</code> 或 <code>null</code> 或 <code>undefined</code> ，你可以使用联合类型 <code>string</code> | <code>null</code> | <code>undefined</code> 。再次说明，后面会介绍联合类型。</p><blockquote><p>注意：我们鼓励尽可能的使用 <code>--strickNullChecks</code> ，但在本介绍手册中我们假设这个标记是关闭的。</p></blockquote><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p><code>never</code> 类型表示的是那些永不存在的值的类型。例如，<code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型；变量也可能是 <code>never</code> 类型，当它们被永不为真的类型保护约束时。</p><p><code>never</code> 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code> 的子类型可以赋值给 <code>never</code> 类型（除了 <code>never</code> 本身除外）。即便 <code>any</code> 也不可以赋值给 <code>never</code> 。</p><p>下面是一些返回 <code>never</code> 类型的函数：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 返回 never 的函数必须存在无法达到的终点。</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 推断的返回值类型为 never</span><span class="token keyword">function</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Something failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 返回 never 的函数必须存在无法达到的终点。</span><span class="token keyword">function</span> <span class="token function">infiniteLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p> <code>object</code> 表示非原始类型，也就是除了 <code>number</code> ， <code>string</code> ， <code>boolean</code> ， <code>symbol</code>， <code>null</code>  或 <code>undefined</code> 之外的类型。</p><p> 使用 <code>object</code> 类型，就可以更好的表示像 <code>Object.create</code> 这样的 <code>API</code> 。例如：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>prop<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// OK</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token string">'undefined'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Error</span></code></pre><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p> 有时候你会遇到这样的情况，你会比  <code>TypeScript</code> 更了解某个值的详细信息。通常这会发生在你清楚的知道一个实体具有比它有类型更确切的类型。</p><p> 通常类型断言这种方式可以告诉编译器：<code>&#39;相信我，我知道自己在干什么&#39;</code>。类型断言好比其他语言里的类型转换，但是不进行特殊的类型检查和重构。它没有运行时的影响，只是在编译阶段起作用。 <code>TypeScript</code> 会假设你，程序员，已经进行了必须的检查。</p><p> 类型断言有两种形式。其一是 “尖括号” <code>&lt;&gt;</code> 语法：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">'This is a string'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length</code></pre><p> 另一个为 <code>as</code> 语法：</p><pre class=" language-typescript"><code class="language-typescript"> <span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">'This is a string'</span><span class="token punctuation">;</span> <span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length</code></pre><p> 两种形式是等价的。至于使用哪个大多数情况下是凭个人喜好。然而，当你在 <code>TypeScript</code> 里使用 <code>JSX</code> 时，只有 <code>as</code> 语法断言是被允许的。</p><h3 id="关于-let"><a href="#关于-let" class="headerlink" title="关于 let"></a>关于 let</h3><p> 你可能已经注意到了，我们使用 <code>let</code> 关键字来替代大家所熟悉的 <code>JavaScript</code> 关键字 <code>var</code> 。 <code>let</code> 关键字是 <code>JavaScript</code> 的一个新概念， <code>TypeScript</code> 实现了它。很多常见的问题都可以通过使用 <code>let</code> 来解决，所以尽可能的使用 <code>let</code> 来替代 <code>var</code> 吧。</p><hr><blockquote><p>本文参考来源： <a href="https://www.tslang.cn/docs/handbook/basic-types.html" target="_blank" rel="noopener">TypeScript 基础类型</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> 基础类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo快速搭建个人网站</title>
      <link href="/2019/09/27/xmind-tu-zhi-ying-yong-hexo-da-jian-ge-ren-wang-zhan/"/>
      <url>/2019/09/27/xmind-tu-zhi-ying-yong-hexo-da-jian-ge-ren-wang-zhan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章。<br>在几秒内，即可利用靓丽的主题生成静态网页。<br>应用 XMind 制作的应用 Hexo 快速搭建个人网站流程图。</p></blockquote><p>流程图如下：</p><p><img src="https://raw.githubusercontent.com/libing-cheer/merge-table/master/src/assets/Hexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.png" alt="Hexo快速搭建个人网站流程图"></p><p>点击预览图片不清楚，但是把下载下来就很清晰了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> XMind </category>
          
          <category> 搭建网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Table表格合并</title>
      <link href="/2019/09/26/table-biao-ge-he-bing/"/>
      <url>/2019/09/26/table-biao-ge-he-bing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>vue+elementUI 中的 Table 表格的合并功能，可配置，使用方便。</p></blockquote><h3 id="1、合并前后效果图"><a href="#1、合并前后效果图" class="headerlink" title="1、合并前后效果图"></a>1、合并前后效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/merge-table/master/src/assets/beforeMerge.png" alt="合并前"><br><img src="https://raw.githubusercontent.com/libing-cheer/merge-table/master/src/assets/afterMerge.png" alt="合并后"></p><h3 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{msg}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>        <span class="token attr-name">:span-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arraySpanMethod<span class="token punctuation">"</span></span>        <span class="token attr-name">border</span><span class="token style-attr language-css"><span class="token attr-name">        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">30</span>px auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>550<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in tableTitleData<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>          <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.prop<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:min-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.minWidth<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{scope.row[item.prop]}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> tableTitleData<span class="token punctuation">,</span> tableData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./js/options'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'mergeTable'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'表格合并'</span><span class="token punctuation">,</span>        tableData<span class="token punctuation">,</span>        tableTitleData      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// ====================================== 合并多列单元格逻辑</span>      <span class="token function">arraySpanMethod</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row<span class="token punctuation">,</span> column<span class="token punctuation">,</span> rowIndex<span class="token punctuation">,</span> columnIndex <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 合并单元格</span>        <span class="token comment" spellcheck="true">/**         * desc 该方法会触发n次，n是表格data的length*表头data的length;         * @param  {String} row         [ 当前遍历到的行数据 (后台接口返回的) ]         * @param  {Object} column      [ 当前遍历到的列数据 (elemen表格对象内置的) ]         * @param  {Number} rowIndex    [ 当前遍历到的行下标 ]         * @param  {Number} columnIndex [ 当前遍历到的列下标 ]         * @return {Object} 包含合并的行和列信息         */</span>        <span class="token comment" spellcheck="true">//  ================================================================ 分割线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个数组是带children的表头data展开children后的数组</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>tableTitleData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 展开存在children的titleData</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>val<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>              val<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>child <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 只运行一次，获得要合并的信息数组</span>          <span class="token keyword">const</span> keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'areaName'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (这个数组要根据不同表格来配置!!!) 一些prop名的集合，这些porp名代表的字段 在每个做过合并的行数据集合里 它的的值 都是唯一的（比如区域、片区、中心名称之类的）。这个集合用于确保合并信息的唯一性，确保表格不会错乱</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMergeTabelArr</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>realTitleData<span class="token punctuation">,</span>            keywords<span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// console.log('完整的合并表格的信息集合', this.mergeTabelArr);</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// if (columnIndex > 0) { // 除掉序号那一列(这里用于自定义过滤某列)，都要合并</span>        <span class="token keyword">const</span> _rowArr <span class="token operator">=</span> <span class="token punctuation">(</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">.</span>key <span class="token operator">===</span> column<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>connect<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// connect数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_rowArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> _row <span class="token operator">=</span> _rowArr<span class="token punctuation">[</span>rowIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token punctuation">{</span>            rowspan<span class="token punctuation">:</span> _row<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 0代表删除这列，1代表展示这列，>1代表合并列</span>            colspan<span class="token punctuation">:</span> _row <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment" spellcheck="true">// 0代表删除这列，1代表展示这列，>1代表合并列</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// }</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">getMergeTabelArr</span><span class="token punctuation">(</span>        data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        titleData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        keywords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        colIndexs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取合并表格的信息集合</span>        <span class="token comment" spellcheck="true">/**         * desc 该方法为最终组合‘合并表格的信息集合’的方法         * @param  {Array}  data                   [ 表格的data ]         * @param  {Array}  titleData              [ 表格的表头的data ]         * @param  {Array}  keywords  ['1','a'...] [ 一些prop名的集合，这些porp名代表的字段 在每个做过合并的行数据集合里 它的的值 都是唯一的（比如区域、片区、中心名称之类的）。这个集合用于确保合并信息的唯一性，确保表格不会错乱 ]         * @param  {Array}  colIndexs [0,1,-2,...] [ 合并规则数组，这个数组里所有的负数值代表不合并的列的下标，正数代表合并的列的下标 ]         * @return {Array} arr  示例:         * [         *   {         *     key: 'nextSite', // 对应列的prop名         *     connect: [2, 0, 2, 0, 1]  // connect数组         *   },         *   ...         * ];         */</span>        <span class="token comment" spellcheck="true">//  ================================================================ 分割线</span>        <span class="token keyword">const</span> columnArr <span class="token operator">=</span> colIndexs<span class="token punctuation">.</span>length          <span class="token operator">?</span> titleData<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">const</span> index <span class="token operator">=</span> colIndexs<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>realV <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>realV <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> v <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>realV<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i <span class="token operator">===</span> v<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按传递进来的规则过滤</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>oldMergeTabel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 给this添加oldMergeTabel属性，防止后面报错</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> columnArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>v1 <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConnectArr</span><span class="token punctuation">(</span>            data<span class="token punctuation">,</span>            v1<span class="token punctuation">.</span>prop<span class="token punctuation">,</span>            keywords<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>oldMergeTabel          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>oldMergeTabel <span class="token operator">=</span> obj<span class="token punctuation">.</span>connect<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存前一条的connect数组信息</span>          <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">getConnectArr</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> keywords<span class="token punctuation">,</span> oldMergeTabel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取connect数组</span>        <span class="token comment" spellcheck="true">/**         * desc 该方法会触发n次，n是过滤后的，要合并的表头data的length;         * @param  {Array}  data          [ 表格的data数据 ]         * @param  {String} key           [ 要合并的表头的prop名 ]         * @param  {Array}  keywords      [ 一些prop名的集合，这些porp名代表的字段 在每个做过合并的行数据集合里 它的的值 都是唯一的（比如区域、片区、中心名称之类的）。这个集合用于确保合并信息的唯一性，确保表格不会错乱 ]         * @param  {Object} oldMergeTabel [ 前一条组合好的connect数组信息,用于确保表格不会错乱 ]         * @return {Object} 包含合并的行和列信息（其实就是 ‘合并表格的信息数组’ 的一个成员，看上面getMergeTabelArr方法的示例）         */</span>        <span class="token comment" spellcheck="true">//  ================================================================ 分割线</span>        <span class="token keyword">const</span> oldArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存上一个数组</span>        <span class="token keyword">let</span> oldObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 控制只跟上一个元素做对比,不跟整个数组对比</span>        <span class="token comment" spellcheck="true">// 正确的代码</span>        data<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> newObj<span class="token punctuation">;</span>          <span class="token keyword">let</span> newKey <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保证唯一性的key</span>          keywords<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>k <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            newKey <span class="token operator">+</span><span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-`</span></span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          newKey <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> oldIndex <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存的数组里是否存在与当前表头数据一样的元素（注意，findIndex找到的是第一个匹配的元素的下标）</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>oldIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> oldObj<span class="token punctuation">.</span>key <span class="token operator">===</span> newKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newObj <span class="token operator">=</span> <span class="token punctuation">{</span>              key<span class="token punctuation">:</span> newKey<span class="token punctuation">,</span>              value<span class="token punctuation">:</span> <span class="token number">0</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            oldArr<span class="token punctuation">[</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 找到重复项的第一项，值加1</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            newObj <span class="token operator">=</span> <span class="token punctuation">{</span>              key<span class="token punctuation">:</span> newKey<span class="token punctuation">,</span>              value<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          oldArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>          oldObj <span class="token operator">=</span> newObj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保存当前数据，用作与下一条数据的对比，看是否相同，相同把下一条数据的占用列置成0，这样表格不会错乱</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> connect <span class="token operator">=</span> oldArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldMergeTabel<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 控制数组合并。如果有重复项也不能跨越过上一条的合并行</span>          oldMergeTabel<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oldVal<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> newVal <span class="token operator">=</span> connect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 新值</span>            <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// connect数组各项值的和,</span>            <span class="token keyword">const</span> rule1 <span class="token operator">=</span> newVal <span class="token operator">></span> oldVal <span class="token operator">&amp;&amp;</span> oldVal <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> rule2 <span class="token operator">=</span> newVal <span class="token operator">&lt;</span> oldVal <span class="token operator">&amp;&amp;</span> newVal <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rule1 <span class="token operator">||</span> rule2<span class="token punctuation">)</span> <span class="token punctuation">{</span>              connect<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> oldVal<span class="token punctuation">;</span>              connect<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                count <span class="token operator">+</span><span class="token operator">=</span> v<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 赋值后计算connect数组各项值的和</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// connect数组各项值加起来不能超过表格数据data的length,（可能有bug，以后再解决吧，哈哈哈）</span>                connect<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">-</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>          key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>          connect<span class="token punctuation">:</span> connect        <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 查询数据</span>      <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在工作中，一般是要调接口去查询数据，在查询之前，需要将mergeTabelArr置为空数组，然后在执行之后的操作。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mergeTabelArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.tableHeader</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> red <span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="3、options-js-数据来源文件"><a href="#3、options-js-数据来源文件" class="headerlink" title="3、options.js 数据来源文件"></a>3、<code>options.js</code> 数据来源文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 表头配置 */</span><span class="token keyword">const</span> tableTitleData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    minWidth<span class="token punctuation">:</span> <span class="token string">'100'</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token string">'areaName'</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">'片区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    minWidth<span class="token punctuation">:</span> <span class="token string">'100'</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token string">'managementAreaName'</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">'省区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    minWidth<span class="token punctuation">:</span> <span class="token string">'100'</span><span class="token punctuation">,</span>    prop<span class="token punctuation">:</span> <span class="token string">'centerName'</span><span class="token punctuation">,</span>    label<span class="token punctuation">:</span> <span class="token string">'市区'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'哈尔滨市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'齐齐哈尔市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'鹤岗市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'牡丹江市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'佳木斯市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'黑龙江'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'绥化市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'长春市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'磐石市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'东北'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'吉林'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'舒兰市'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'青浦区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'徐汇区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'黄浦区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'浦东新区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'松江区'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    areaName<span class="token punctuation">:</span> <span class="token string">'华东'</span><span class="token punctuation">,</span>    managementAreaName<span class="token punctuation">:</span> <span class="token string">'上海'</span><span class="token punctuation">,</span>    centerName<span class="token punctuation">:</span> <span class="token string">'嘉定区'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> tableTitleData<span class="token punctuation">,</span> tableData <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="4、完整-Table-合并代码-Demo"><a href="#4、完整-Table-合并代码-Demo" class="headerlink" title="4、完整 Table 合并代码 Demo"></a>4、完整 Table 合并代码 Demo</h3><p><a href="https://github.com/libing-cheer/merge-table" target="_blank" rel="noopener">Github Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 表格合并 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 表格合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript前端分页</title>
      <link href="/2019/09/16/qian-duan-fen-ye/"/>
      <url>/2019/09/16/qian-duan-fen-ye/</url>
      
        <content type="html"><![CDATA[<h3 id="1、适合情形"><a href="#1、适合情形" class="headerlink" title="1、适合情形"></a>1、适合情形</h3><p>前端分页一般用于数据量较小的情况，一次请求把数据全部从后端请求回来。</p><h3 id="2、前端分页例子"><a href="#2、前端分页例子" class="headerlink" title="2、前端分页例子"></a>2、前端分页例子</h3><p><a href="https://github.com/libing-cheer/front-end-paging" target="_blank" rel="noopener">前端分页代码示例</a></p><pre class=" language-javascript"><code class="language-javascript">cd front<span class="token operator">-</span>end<span class="token operator">-</span>page                   进入front<span class="token operator">-</span>end<span class="token operator">-</span>page 文件夹下npm install                         安装依赖npm run dev                         运行</code></pre><h3 id="3、实现关键"><a href="#3、实现关键" class="headerlink" title="3、实现关键"></a>3、实现关键</h3><p>使用计算属性对获取的数据进行处理，即<code>computed</code>中<code>frontEndPageChange</code>方法。<code>el-table</code>中的<code>:data</code>绑定<code>frontEndPageChange</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>table  <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">"frontEndPageChange"</span>  stripe  style<span class="token operator">=</span><span class="token string">"width: 1000px;margin:30px auto;"</span>  height<span class="token operator">=</span><span class="token string">"550"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">></span>computed<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 计算属性对数据进行处理</span><span class="token function">frontEndPageChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4、vue-文件完整代码"><a href="#4、vue-文件完整代码" class="headerlink" title="4、vue 文件完整代码"></a>4、<code>vue</code> 文件完整代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>table        <span class="token punctuation">:</span>data<span class="token operator">=</span><span class="token string">"frontEndPageChange"</span>        stripe        style<span class="token operator">=</span><span class="token string">"width: 1000px;margin:30px auto;"</span>        height<span class="token operator">=</span><span class="token string">"550"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          prop<span class="token operator">=</span><span class="token string">"date"</span>          label<span class="token operator">=</span><span class="token string">"日期"</span>          width<span class="token operator">=</span><span class="token string">"100"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          prop<span class="token operator">=</span><span class="token string">"name"</span>          label<span class="token operator">=</span><span class="token string">"姓名"</span>          width<span class="token operator">=</span><span class="token string">"100"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          prop<span class="token operator">=</span><span class="token string">"address"</span>          label<span class="token operator">=</span><span class="token string">"地址"</span>          width<span class="token operator">=</span><span class="token string">"190"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column          label<span class="token operator">=</span><span class="token string">"个人信息"</span>          width<span class="token operator">=</span><span class="token string">"180"</span>          align<span class="token operator">=</span><span class="token string">"center"</span>        <span class="token operator">></span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column            prop<span class="token operator">=</span><span class="token string">"age"</span>            label<span class="token operator">=</span><span class="token string">"年龄"</span>            align<span class="token operator">=</span><span class="token string">"center"</span>          <span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>          <span class="token operator">&lt;</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column            prop<span class="token operator">=</span><span class="token string">"height"</span>            label<span class="token operator">=</span><span class="token string">"身高"</span>            align<span class="token operator">=</span><span class="token string">"center"</span>          <span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">-</span>column<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>table<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>el<span class="token operator">-</span>pagination            @size<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handleSizeChange"</span>            @current<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">"handlePageChange"</span>            <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"z-pagination"</span>            <span class="token punctuation">:</span>current<span class="token operator">-</span>page<span class="token operator">=</span><span class="token string">"paginationOptions.currentPage"</span>            <span class="token punctuation">:</span>page<span class="token operator">-</span>size<span class="token operator">=</span><span class="token string">"paginationOptions.pageSize"</span>            <span class="token punctuation">:</span>page<span class="token operator">-</span>sizes<span class="token operator">=</span><span class="token string">"paginationOptions.pageSizes"</span>            layout<span class="token operator">=</span><span class="token string">"sizes, prev, pager, next, jumper,total"</span>            <span class="token punctuation">:</span>total<span class="token operator">=</span><span class="token string">"tableData.length"</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>pagination<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// 数据来源</span><span class="token keyword">import</span> <span class="token punctuation">{</span> tableData <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./js/options'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'frontEndPage'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'前端分页'</span><span class="token punctuation">,</span>      paginationOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        currentPage<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当前页</span>        pageSize<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 展示页数</span>        pageSizes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 可选择展示页数 数组</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      tableData<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计算属性对数据进行处理</span>    <span class="token function">frontEndPageChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> end <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 改变分页数量</span>    <span class="token function">handleSizeChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>pageSize <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 改变当前页</span>    <span class="token function">handlePageChange</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>paginationOptions<span class="token punctuation">.</span>currentPage <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="5、options-js-数据来源文件"><a href="#5、options-js-数据来源文件" class="headerlink" title="5、options.js 数据来源文件"></a>5、<code>options.js</code> 数据来源文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 表头配置 */</span><span class="token keyword">const</span> tableData <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-02"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"王小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1510 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-04"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"李小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1511 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-01"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"孙小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1512 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-02"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"朱小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1513 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-04"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"钱小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1514 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-01"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"杜小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1515 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-03"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"赵小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1516 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-02"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"陈小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1510 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-04"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"吴小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1511 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-01"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"徐小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1512 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-02"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"黄小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1513 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    date<span class="token punctuation">:</span> <span class="token string">"2016-05-04"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"秦小虎"</span><span class="token punctuation">,</span>    address<span class="token punctuation">:</span> <span class="token string">"上海市普陀区金沙江路 1514 弄"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span> <span class="token string">"180cm"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">{</span> tableData <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端分页 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 前端分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之 async 函数</title>
      <link href="/2019/09/05/es6-zhi-async-han-shu/"/>
      <url>/2019/09/05/es6-zhi-async-han-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1、含义"><a href="#1、含义" class="headerlink" title="1、含义"></a>1、含义</h3><hr><p>在<code>ES2017</code>标准中引入了<code>async</code>函数，使得一步操作变得更加方便。<br>那么<code>async</code>函数是什么？一句话，它就是<code>Generator</code>函数的语法糖。<br>有一个<code>Generator</code>函数如下，依次读取两个文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> readFile <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码的函数<code>gen</code>可以写成<code>async</code>函数，就是下面 👇 这样。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> asyncReadFile <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> f1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/fstab'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> f2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/shells'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f2<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>一比较就会发现，<code>async</code>函数就是将<code>Generator</code>函数的（<code>*</code>）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code>，仅此而已。<code>async</code>函数对<code>Generator</code>函数的改进，体现在以下四点。</p><ul><li>（1）内置执行器<br><code>Generator</code>函数的执行必须依靠执行器，所以才有了<code>co</code>模块，而<code>async</code>函数自带执行器。也就是说，<code>async</code>函数的执行，与普通函数一模一样，只要一行。</li><li>（2）更好的语义<br><code>async</code>和<code>await</code>，比起星号和<code>yield</code>，语义更清楚了。<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在后面的表达式需要等待结果。</li><li>（3）更广的适应性<br><code>co</code>模块约定，<code>yield</code>命令后面只能是<code>Thunk</code>函数或<code>Promise</code>对象，而<code>async</code>函数的<code>await</code>命令后面，可以是<code>Promise</code>对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即<code>resolved</code>的<code>Promise</code>对象）。</li><li>（4）返回之是<code>Promise</code><br><code>async</code>函数的返回值是<code>Promise</code>对象，这比<code>Generator</code>函数的返回值<code>Iterator</code>对象方便多了。你可以用<code>then</code>方法指定下一步的操作。<br>进一步说，<code>async</code>函数完全可以看作多个异步操作，包装成的一个<code>Promise</code>对象，而<code>async</code>命令就是内部<code>then</code>命令的语法糖。</li></ul><hr><h3 id="2、基本用法"><a href="#2、基本用法" class="headerlink" title="2、基本用法"></a>2、基本用法</h3><hr><p>使用<code>async</code>的函数会返回一个<code>Promise</code>对象，可以使用<code>then</code>方法添加回掉函数。当函数执行的时候，一旦遇到<code>await</code>就会先返回，等到异步操作完成，再接着执行函数体后面的语句。<br>下面 👇 是一个例子 🌰。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStockPriceByName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> symbol <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStockSymbol</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> stockPrice <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStockPrice</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getStockPriceByName</span><span class="token punctuation">(</span><span class="token string">'good'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码是一个获取股票报价的函数，函数前面的<code>async</code>关键字，表明该函数内部有异步操作。调用该函数时，会立即返回一个<code>Promise</code>对象。</p><p>下面 👇 是另一个例子 🌰。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPrint</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncPrint</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码指定<code>50</code>毫秒后，输出<code>hello world</code>。</p><p>由于<code>async</code>函数返回的是<code>Promise</code>对象，可以作为<code>await</code>命令的参数。所以，上面 👆 的例子也可以写成下面的形式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncPrint</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ms<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">timeout</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">asyncPrint</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用<code>async</code>函数的多种形式。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 函数声明</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数表达式</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 对象的方法</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Class 的方法</span><span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>catchPromise <span class="token operator">=</span> caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'avatars'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">async</span> <span class="token function">getAvatar</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>catchProise<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">catch</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">'/avatars/${name}.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>storage<span class="token punctuation">.</span><span class="token function">getAvatar</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数</span><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3、语法"><a href="#3、语法" class="headerlink" title="3、语法"></a>3、语法</h3><p>关于语法，<code>async</code>函数的语法规则总体上比较简单，难点是错误处理机制。</p><hr><h4 id="3-1、返回-Promise-对象"><a href="#3-1、返回-Promise-对象" class="headerlink" title="3.1、返回 Promise 对象"></a>3.1、返回 <code>Promise</code> 对象</h4><p>我们知道，<code>async</code>函数返回一个<code>Promise</code>对象。<br>而且<code>async</code>函数内部<code>return</code>语句返回的值，会成为<code>then</code>方法回调函数的参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello world</span></code></pre><p>上面 👆 代码中，函数<code>f</code>内部<code>return</code>命令返回的值，会被<code>then</code>方法回调函数接收到。<br>命令<code>async</code>函数内部抛出错误，会导致返回的<code>Promise</code>对象变为<code>reject</code>状态。抛出的错误对象会被<code>catch</code>方法回调函数接收到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: 出错了</span></code></pre><hr><h4 id="3-2、Promise-对象的状态变化"><a href="#3-2、Promise-对象的状态变化" class="headerlink" title="3.2、Promise 对象的状态变化"></a>3.2、<code>Promise</code> 对象的状态变化</h4><p>命令<code>async</code>函数返回的<code>Promise</code>对象，必须等到内部所有<code>await</code>命令后面的<code>Promise</code>对象执行完，才会发生状态改变，除非遇到<code>return</code>语句或者抛出错误。也就是说，只有<code>async</code>函数内部的异步操作执行完，才会执行<code>then</code>方法指定的回调函数。</p><p>下面 👇 是一个例子。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getTitle</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> html<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/&lt;title>([\s\S]+)&lt;\/title>/i</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token string">'http://es6.ruanyifeng.com/#docs/async#%E8%AF%AD%E6%B3%95'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>  res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ECMAScript 6入门</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，函数<code>getTitle</code>内部有三个操作：抓取网页、取出文本、匹配页面标题。只有这三个操作全部完成，才会执行<code>then</code>方法里面的<code>console.log</code></p><hr><h4 id="3-3、await-命令"><a href="#3-3、await-命令" class="headerlink" title="3.3、await 命令"></a>3.3、<code>await</code> 命令</h4><p>正常情况下，<code>await</code>命令后面是一个<code>Promise</code>对象，返回该对象的结果。如果不是<code>Promise</code>对象，就直接返回对应的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 等同于</span>  <span class="token comment" spellcheck="true">// return 123;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，<code>await</code>命令的参数是数值<code>123</code>，这时等同于<code>return 123</code>。<br>另一种情况是，<code>await</code>命令后面是一个<code>thenable</code>对象（即定义<code>then</code>方法的对象），那么<code>await</code>会将其等同于<code>Promise</code>对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Sleep</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> startTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> sleepTime <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sleepTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1000</span></code></pre><p>上面 👆 代码中，<code>await</code>命令后面是一个<code>Sleep</code>对象的实例。这个实例不是<code>Promise</code>对象，因为定义了<code>then</code>方法，<code>await</code>会将其视为<code>Promise</code>对象处理。<br>这个例子还演示了如何实现休眠效果。<code>Javascript</code>一直没有休眠的语法，但是借助<code>await</code>命令就可以让程序停顿指定的时间。下面给出了一个简化的<code>sleep</code>实现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">one2FiveInAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 2 3 4 5</span></code></pre><p><code>await</code>命令后的<code>Promise</code>对象如果变为<code>reject</code>状态，则<code>reject</code>的参数会被<code>catch</code>方法的回调函数接收到。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 出错了</span></code></pre><p>注意，上面 👆 代码中，<code>await</code>语句前面没有<code>return</code>，但是<code>reject</code>方法的参数依然传入了<code>catch</code>方法的回调函数。这里如果在<code>await</code>命令前面加上<code>return</code>，效果是一样的。</p><p>任何一个<code>await</code>语句后面的<code>Promise</code>对象变为<code>reject</code>状态，那么整个<code>async</code>函数都会中断执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会执行</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码中，第二个<code>await</code>语句是不会执行的，因为第一个<code>await</code>语句状态变成了<code>reject</code>。<br>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个<code>await</code>放在<code>try...catch</code>结构里面，这样不管这个异步操作是否成功，第二个异步操作都会执行。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">Promise</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// hello world</span></code></pre><p>另一种方法是<code>await</code>后面的<code>Promise</code>对象再跟一个<code>catch</code>方法，处理前面可能出现的错误。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 出错了</span><span class="token comment" spellcheck="true">// hello world</span></code></pre><hr><h4 id="3-4、错误处理"><a href="#3-4、错误处理" class="headerlink" title="3.4、错误处理"></a>3.4、错误处理</h4><p>如果<code>await</code>后面的异步操作出错，那么等同于<code>async</code>函数返回的<code>Promise</code>对象被<code>reject</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Error: 出错了</span></code></pre><p>上面 👆 代码中，<code>async</code>函数<code>f</code>执行后，<code>await</code>后面的<code>Promise</code>对象会抛出一个错误对象，导致<code>catch</code>方法的回调函数被调用，它的参数就是抛出的错误对象。具体的执行机制，可以参考后文的<code>async 函数的实现原理</code>。</p><p>防止出错的方法，也是将其放在<code>try...catch</code>代码块之中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果有多个<code>await</code>命令，可以统一放在<code>try...catch</code>结构中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> val1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">firstStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> val2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">secondStep</span><span class="token punctuation">(</span>val1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> val3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">thirdStep</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Final：'</span> <span class="token operator">+</span> val3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面 👇 的例子 🌰 使用<code>try...catch</code>结构，实现多次重复尝试。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> superagent <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'superagent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> NUM_RETRIES <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_RETRIES<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">await</span> superagent<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://google.com/this-throws-an-error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，如果<code>await</code>操作成功，就会使用<code>break</code>语句跳出循环 ♻️；如果失败，会被<code>catch</code>语句捕捉，然后进入下一轮循环 ♻️。</p><hr><h4 id="3-5、使用注意点"><a href="#3-5、使用注意点" class="headerlink" title="3.5、使用注意点"></a>3.5、使用注意点</h4><p>第一点，前面已经说过，<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>rejected</code>，所以最好把<code>await</code>命令放在<code>try...catch</code>代码块中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">somethingThatReturnsAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 另一种写法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">somethingThatReturnsAPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二点，多个<code>await</code>命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，<code>getFoo</code>和<code>getBar</code>是两个独立的异步操作（相互不依赖），被写成继发关系。这样比较耗时，因为只有<code>getFoo</code>完成之后，才会执行<code>getBar</code>，完全可以让它们同时触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 写法一</span><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 写法二</span><span class="token keyword">let</span> fooPromise <span class="token operator">=</span> <span class="token function">getFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> barPromise <span class="token operator">=</span> <span class="token function">getBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token keyword">await</span> fooPromise<span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token keyword">await</span> barPromise<span class="token punctuation">;</span></code></pre><p>上面 👆 两种写法，<code>getFoo</code>和<code>getBar</code>都是同时触发，这样就会缩短程序的执行时间。</p><p>第三点，<code>await</code>命令只能用在<code>async</code>函数之中，如果用在普通函数，就会报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  docs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>doc<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Uncaught SyntaxError: await is only valid in async function</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码会报错，因为<code>await</code>语句用在普通函数之中了。但是，如果将<code>forEach</code>方法的参数改成<code>async</code>函数，也有问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这里不需要 async</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 可能得到错误结果</span>  docs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码可能不会正常工作，原因是这时三个<code>db.post</code>操作将是并发执行，也就是同时执行，而不是继发执行。正确的写法是采用<code>for</code>循环。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFunc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> doc <span class="token keyword">of</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果确实希望多个请求并发执行，可以使用<code>Promise.all</code>方法。当三个请求都会<code>resolved</code>时，下面两种写法效果相同。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> docs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者使用下面的写法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbFuc</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> docs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> peomises <span class="token operator">=</span> docs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>doc <span class="token operator">=</span><span class="token operator">></span> db<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>    results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">await</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-6、async-函数可以保留堆栈"><a href="#3-6、async-函数可以保留堆栈" class="headerlink" title="3.6、async 函数可以保留堆栈"></a>3.6、<code>async</code> 函数可以保留堆栈</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，函数<code>a</code>内部运行了一个异步任务<code>b()</code>。当<code>b()</code>运行的时候，函数<code>a</code>不会中断，而是继续执行。等到<code>b()</code>运行结束，可能<code>a()</code>早就运行结束了，<code>b</code>所在的上下文环境已经消失了。如果<code>b()</code>或<code>c()</code>报错，错误堆栈将不包括<code>a()</code>。</p><p>现在将这个例子 🌰 改成<code>await</code>函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面 👆 的代码中，<code>b()</code>运行的时候，<code>a()</code>是暂停执行，上下文环境都保存着。一旦<code>b()</code>或<code>c()</code>报错，错误堆栈将包括<code>a()</code>。</p><h3 id="4、async-函数的实现原理"><a href="#4、async-函数的实现原理" class="headerlink" title="4、async 函数的实现原理"></a>4、<code>async</code> 函数的实现原理</h3><p><code>async</code>函数的实现原理，就是将<code>Generator</code>函数和自动执行器，包装在一个函数里。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所有的<code>async</code>函数都可以写成上面的第二种形式，其中的<code>spawn</code>函数就是自动执行器。<br>下面给出<code>spawn</code>函数的实现，基本就是前文自动执行器的翻版。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">spawn</span><span class="token punctuation">(</span>genF<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> gen <span class="token operator">=</span> <span class="token function">genF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">step</span><span class="token punctuation">(</span>nextF<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> next<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        next <span class="token operator">=</span> <span class="token function">nextF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>        v <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> gen<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><hr><h3 id="5、与其他异步处理方法的比较"><a href="#5、与其他异步处理方法的比较" class="headerlink" title="5、与其他异步处理方法的比较"></a>5、与其他异步处理方法的比较</h3><p>我们通过一个例子，来看<code>async</code>函数与<code>Generator</code>与<code>Promise</code>函数的比较。<br>假定某个<code>DOM</code>元素上面，部署了一系列的动画，前一个动画结束，才能开始下一个。如果当中有一个动画出错，返回上一个成功执行的动画的返回值。</p><p>首先是<code>Promise</code>的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chainAnimationsPromise</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 变量 ret 用来保存上一个动画的返回值</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 新建一个空的 Promise</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 then 方法添加所有动画</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ret <span class="token operator">=</span> val<span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 返回一个部署了错误机制的 Promise</span>  <span class="token keyword">return</span> p    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*忽略错误，继续执行*/</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然<code>Promise</code>的写法比回调函数的写法大大改进，但是一眼看上去，代码完全都是<code>Promise</code>的<code>API</code>（<code>then</code>、<code>catch</code>等等），操作本身的语义反而不容易看出来。</p><p>接着是<code>Generator</code>函数的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">chainAnimationsGenerator</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/*忽略错误，继续执行*/</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码使用<code>Generator</code>函数遍历了每个动画，语义比<code>Promise</code>写法更清晰，用户定义的操作全部都出现在<code>spawn</code>函数的内部。这个写法的问题在于，必须有一个任务运行器，自动执行<code>Generator</code>函数，上面的代码<code>spawn</code>就是自动执行器，它返回一个<code>Promise</code>对象，而且必须保证<code>yield</code>语句后面的表达式，必须返回一个<code>Promise</code>。</p><p>最后是<code>async</code>函数的写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">chainAnimationsAsync</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> anim <span class="token keyword">of</span> animations<span class="token punctuation">)</span> <span class="token punctuation">{</span>      ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">anim</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*忽略错误，继续执行*/</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看到，<code>async</code></p><hr><p>本文参考来源 <a href="http://es6.ruanyifeng.com/#docs/async" target="_blank" rel="noopener">阮一峰博客 async</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6之 let 和 const 命令</title>
      <link href="/2019/08/30/es6-zhi-let-he-const/"/>
      <url>/2019/08/30/es6-zhi-let-he-const/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6-之-let-和-const-命令"><a href="#ES6-之-let-和-const-命令" class="headerlink" title="ES6 之 let 和 const 命令"></a>ES6 之 let 和 const 命令</h2><hr><h3 id="1、let-命令"><a href="#1、let-命令" class="headerlink" title="1、let 命令"></a>1、let 命令</h3><hr><h4 id="1-1、基本用法"><a href="#1-1、基本用法" class="headerlink" title="1.1、基本用法"></a>1.1、基本用法</h4><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span class="token punctuation">}</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: a is not defined</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span></code></pre><p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块内生效。</p><p>用<code>for</code>循环的计数器，就很适合使用<code></code>let`命令。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: i is not defined</span></code></pre><p>上面 👆 代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><p>下面 👇 的代码如果使用<code>var</code>，最后输出的是<code>10</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span></code></pre><p>上面 👆 代码中，变量<code>i</code>是<code>var</code>声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的里面成员的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是<code>10</code>。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是<code>6</code>。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span></code></pre><p>上面 👆 代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环内有效，所以每一次循环的<code>i</code>其实都是一个新的变量所以左后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为<code>Javascript</code>引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p><p>另外，<code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// abc</span><span class="token comment" spellcheck="true">// abc</span></code></pre><p>上面 👆 代码正确运行，输出了<code>3</code>次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><hr><h4 id="1-2、不存在变量提升"><a href="#1-2、不存在变量提升" class="headerlink" title="1.2、不存在变量提升"></a>1.2、不存在变量提升</h4><p>使用<code>var</code>命令会发生<code>变量提升</code>现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇葩的，按照一般的逻辑，变量应该在语句声明之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变的了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 使用 var 的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">'foo'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用 let 的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: bar is not defined</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，变量<code>foo</code>用<code>var</code>声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>声明，不会发生变量提升。这表明在声明它之前变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><hr><h4 id="1-3、暂时性死区"><a href="#1-3、暂时性死区" class="headerlink" title="1.3、暂时性死区"></a>1.3、暂时性死区</h4><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就绑定（binding）这个区域，不再受外部的影响。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  temp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: Cannot access 'tmp' before initialization</span>  <span class="token keyword">let</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面代码中，存在全局变量<code>temp</code>，但是块级作用域内<code>let</code>又声明了一个变量<code>temp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>temp</code>赋值会报错。</p><p><code>ES6</code>明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。总之，在代码块内，使用<code>let</code>命令声明变量之前，改变量都是不可用的。这在语法上，成为”暂时性死区”（temporal dead zone，简称 TDZ）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// TDZ 开始</span>  temp <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">let</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TDZ 结束</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>  temp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码中，在<code>let</code>命令声明变量<code>temp</code>之前，都属于变量<code>temp</code>的”死区”。<br>“暂时性死区”意味着<code>typeof</code>不再是一个百分之百安全的操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span class="token keyword">let</span> x<span class="token punctuation">;</span></code></pre><p>声明代码中，变量<code>x</code>使用<code>let</code>命令声明，所以在声明之前，都属于<code>x</code>的死区，只要用到改变量就会报错。因此<code>typeof</code>就会抛出一个<code>ReferenceError</code>。</p><p>作为比较，如果一个变量根本没有被声明，使用<code>typeof</code>反而不会报错。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">typeof</span> undeclared_variable<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面 👆 代码中，<code>undeclared_variable</code>是一个不存在的变量名，结果返回”<code>undefined</code>“。所以，在没有<code>let</code>之前，<code>typeof</code>运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p><p>有些”死区”比较隐蔽，不太容易发现。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: Cannot access 'y' before initialization</span></code></pre><p>另外，下面 👇 的代码也会报错，与<code>var</code>的行为不同。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">var</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 报错 ReferenceError：x is not defined</span><span class="token keyword">let</span> x <span class="token operator">=</span> x<span class="token punctuation">;</span></code></pre><p>上面 👆 代码报错，是因为存在暂时性死区。使用<code>let</code>声明变量时，只要变量还没有在声明完成前使用，就会报错。上面这行就属于这个情况，在变量<code>x</code>的声明语句还没有执行完成之前，就去取<code>x</code>的值，导致报错”<code>x 未定义</code>“。</p><p>在<code>ES6</code>中，规定暂时性死区和<code>let</code>、<code>const</code>语句不出现变量提升，主要是为了减少运行时错误，防止变量在声明前就使用这个变量，从而导致意料之外的行为。这样的错误在<code>ES5</code>是很常见的，现在有了这种规定，避免此类错误就很容易了。</p><p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用改变量。</p><hr><h4 id="1-4、不允许重复声明"><a href="#1-4、不允许重复声明" class="headerlink" title="1.4、不允许重复声明"></a>1.4、不允许重复声明</h4><p>命令<code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError: Identifier 'a' has already been declared</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError: Identifier 'a' has already been declared</span><span class="token punctuation">}</span></code></pre><p>因此，不能再函数内部重新声明参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// SyntaxError：Identifier 'arg' has already been declared</span><span class="token comment" spellcheck="true">// 不报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token keyword">let</span> arg<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><h3 id="2、块级作用域"><a href="#2、块级作用域" class="headerlink" title="2、块级作用域"></a>2、块级作用域</h3><hr><h4 id="2-1、为什么需要块级作用域"><a href="#2-1、为什么需要块级作用域" class="headerlink" title="2.1、为什么需要块级作用域"></a>2.1、为什么需要块级作用域</h4><p>在<code>ES5</code>中，只有全局作用域和函数作用域，没有块级作用域，这会带来很多不合理的场景。<br>第一种场景，内层变量可能会覆盖外部变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面 👆 代码的原意是，<code>if</code>代码块的外部使用的是外层<code>temp</code>变量，内部使用的是内层的<code>temp</code>变量。但是，函数<code>f()</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>temp</code>变量覆盖了外层的<code>temp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// h e l l o</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span></code></pre><p>上面 👆 代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄漏成了全局变量。</p><hr><h4 id="2-2、ES6-的块级作用域"><a href="#2-2、ES6-的块级作用域" class="headerlink" title="2.2、ES6 的块级作用域"></a>2.2、ES6 的块级作用域</h4><p>命令<code>let</code>实际上为 JavaScript 新增了块级作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token punctuation">}</span></code></pre><p>上面 👆 的的函数有两个代码块，都声明了变量<code>n</code>，运行后输出<code>5</code>。这表示外层代码块不受内层代码块的影响。如果两次都使用<code>var</code>定义变量<code>n</code>，最后输出的值才是<code>10</code>。</p><p>在<code>ES6</code>中，允许块级作用域的任意嵌套。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token punctuation">{</span>          <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>insane<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: insane is not defined</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面 👆 的代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</p><p>内层作用域可以定义外层作用域的同名变量。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>      <span class="token punctuation">{</span>        <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>        <span class="token punctuation">{</span>          <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>块级作用域的出现，实际上使得广泛使用的匿名立即执行函数表达式（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">匿名 IIFE</a>）不再必要了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// IIFE 写法</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Barry'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: name2 is not defined</span><span class="token comment" spellcheck="true">// 块级作用域写法</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Barry'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError: name2 is not defined</span></code></pre><hr><h4 id="2-3、块级作用域与函数声明"><a href="#2-3、块级作用域与函数声明" class="headerlink" title="2.3、块级作用域与函数声明"></a>2.3、块级作用域与函数声明</h4><p>函数能不能在函数作用域之中声明？这是一个相当令人混淆的问题。<br>在<code>ES5</code>中规定，函数只能在顶层作用域好函数作用域中声明，不能在块级作用域中声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 情况一</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 情况二</span><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面 👆 两种情况声明，根据<code>ES5</code>的规定都是非法的。</p><p>但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域中声明函数，因此上面两种情况实际都能运行，不会报错。</p><p>在<code>ES6</code>中引入块级作用域，明确允许在块级作用域中声明函数。<code>ES6</code>规定，块级作用域之中，函数声明语句的行为类似于<code>let</code>，在块级作用域之外不可引用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数 f()</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码在<code>ES5</code>中运行，会得到”I am inside”，因为在<code>if</code>内声明函数<code>f</code>会被提升到函数头部，实际运行的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ES5 环境</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数 f()</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>但在<code>ES6</code>中就完全不一样了，理论上会得到”I am outside”。因为块级作用域内声明的函数类似于<code>let</code>，对作用域之外没有影响。但是，如果你真的在<code>ES6</code>浏览器中运行一下上面 👆 的代码，是会报错的这是为什么呢？</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 浏览器的 ES6 环境</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 重复声明一次函数 f()</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught TypeError: f is not a function</span></code></pre><p>上面 👆 的代码在浏览器中，都会报错。</p><p>原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大的影响。为了减轻因此产生的不兼容问题，<code>ES6</code>在<a href="http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics" target="_blank" rel="noopener">附录 B</a>里面规定，浏览器的实现可以不遵守上面的规定，有自己的<a href="https://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6" target="_blank" rel="noopener">行为方式</a>。</p><ul><li>允许在块级作用域内声明函数。</li><li>函数声明类似于<code>var</code>，即会提升到全局作用域或函数作用域的头部。</li><li>同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><p>注意 ⚠️：上面三条规则只对<code>ES6</code>的浏览器实现有效，其他环境的实现不遵守，还是将块级作用域的函数声明当作<code>let</code>处理。</p><p>根据这三条规则，浏览器的<code>ES6</code>环境中，块级作用域内声明的函数，行为类似于<code>var</code>声明的变量。上面的例子实际允许的代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 浏览器的 ES6 环境</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am outside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> f <span class="token operator">=</span> undefined<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I am inside'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Uncaught TypeError: f is not a function</span></code></pre><p>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 块级作用域内部的函数声明语句，建议不要使用。</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 块级作用域内部，优先使用函数表达式。</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">;</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>另外，还有一个需要注意的地方。<code>ES6</code>的块级作用域必须有大括号，如果没有大括号，<code>JavaScript</code>引擎就认为不存在块级作用域。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一种写法 报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught SyntaxError: Lexical declaration cannot appear in a single-statement context</span><span class="token comment" spellcheck="true">// 第二种写法 不报错</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>上面 👆 代码中，第一种写法没有大括号，所以不存在块级作用域，而<code>let</code>只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。</p><p>函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不报错</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Uncaught SyntaxError: In strict mode code, functions can only be declared at top level or inside a block</span></code></pre><hr><h3 id="3、const-命令"><a href="#3、const-命令" class="headerlink" title="3、const 命令"></a>3、const 命令</h3><hr><h4 id="3-1、基本用法"><a href="#3-1、基本用法" class="headerlink" title="3.1、基本用法"></a>3.1、基本用法</h4><p>命令<code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>PI<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.1415</span>PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Assignment to constant variable</span></code></pre><p>上面 👆 的代码表明，改变常量的值会报错。</p><p>命令<code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SyntaxError: Missing initializer in const declaration</span></code></pre><p>上面 👆 代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p>命令<code>const</code>的作用域与<code>let</code>相同：只在声明所在的块级作用域内有效。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MAX<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught ReferenceError: MAX is not defined</span></code></pre><p>命令<code>const</code>声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Uncaught ReferenceError: Cannot access 'MAX' before initialization</span><span class="token punctuation">}</span></code></pre><p>上面 👆 代码在常量<code>MAX</code>声明之前就调用，结果报错。</p><p>命令<code>const</code>声明的变量，也与<code>let</code>一样不可重复声明。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下两行都会报错</span><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">'Goodbye'</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SyntaxError: Identifier 'message' has already been declared</span><span class="token comment" spellcheck="true">// SyntaxError: Identifier 'age' has already been declared</span></code></pre><hr><h4 id="3-2、本质"><a href="#3-2、本质" class="headerlink" title="3.2、本质"></a>3.2、本质</h4><p>命令<code>const</code>实际上保证的，并不是变量的只不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单的数据类型（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向一个固定的地址），至于它指向的数据机构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为 foo 添加一个属性，可以成功</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将 foo 指向另一个对象，就会报错</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Assignment to constant variable</span></code></pre><p>上面 👆 代码中，常量<code>foo</code>储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把<code>foo</code>指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><p>下面 👇 是另一个例子 🌰。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错 TypeError</span></code></pre><p>如果真的想将对象冻结，应该使用<code>Object.freeze</code>方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 常规模式时，下面一行不起作用</span><span class="token comment" spellcheck="true">// 严格模式时，改行会报错</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></code></pre><p>上面 👆 代码中，常量<code>foo</code>指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错<code>TypeError</code>。</p><p>除了将对象本身冻结，对象的属性也应该冻结。下面 👇 是一个将对象彻底冻结的函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> constantize <span class="token operator">=</span> obj <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">constanize</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><hr><h4 id="3-3、声明变量的六种方法"><a href="#3-3、声明变量的六种方法" class="headerlink" title="3.3、声明变量的六种方法"></a>3.3、声明变量的六种方法</h4><p>在<code>ES5</code>中只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。在<code>ES6</code>中，除了添加<code>let</code>命令和<code>const</code>命令外，还有<code>import</code>命令和<code>class</code>命令。所以<code>ES6</code>中一共有 6 中声明变量的方法。</p><hr><h3 id="4、顶层对象的属性"><a href="#4、顶层对象的属性" class="headerlink" title="4、顶层对象的属性"></a>4、顶层对象的属性</h3><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在<code>Node</code>指的是<code>global</code>对象。<code>ES5</code>之中，顶层对象的属性与全局变量是等价的。</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span></code></pre><p>上面 👆 代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p><p>顶层对象的属性与全局属性挂钩，被认为是<code>JavaScript</code>语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在未编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能时顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉的就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，<code>window</code>对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</p><p>命令<code>ES6</code>为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从<code>ES6</code>开始，全局变量将逐渐与顶层对象脱钩。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果在 Node 的 REPL 环境，可以写成 global.a</span><span class="token comment" spellcheck="true">// 或者写成通用方法，写成 this.a</span>window<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>上面 👆 代码中，全部变量<code>a</code>由<code>var</code>命令声明，所以它是顶层对象的属性。全局变量<code>b</code>由<code>let</code>命令声明，所以它不是顶层对象的属性，所以返回<code>undefined</code>。</p><hr><h3 id="5、globalThis-对象"><a href="#5、globalThis-对象" class="headerlink" title="5、globalThis 对象"></a>5、globalThis 对象</h3><hr><p>我们知道，<code>JavaScript</code>语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</p><ul><li>浏览器里面，顶层对象是<code>window</code>，但<code>Node</code>与<code>Web Worker</code>没有<code>window</code>。</li><li>浏览器和<code>Web Worker</code>里面，<code>self</code>也指向顶层对象，但是<code>Node</code>没有<code>self</code>。</li><li>在<code>Node</code>里面，顶层对象是<code>global</code>，但其他环境都不支持。</li></ul><p>同一段代码为了为了能够在各种环境都能取到顶层对象，一般都是使用<code>this</code>变量，但是有局限性。</p><ul><li>全局环境中，<code>this</code>会返回顶层对象。但是<code>Node</code>模块和<code>ES6</code>模块中，<code>this</code>返回的是当前模块。</li><li>函数里面的<code>this</code>，如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code>this</code>会指向顶层对象。但是，严格模式下，这时<code>this</code>会返回<code>undefined</code>。</li><li>不管是严格模式，还是普通模式，<code>new Function(&#39;return this&#39;)()</code>总是会返回全局对象。但是，如果浏览器用了<code>CSP</code>（<code>Content Security Policy</code>，内容安全策略），那么，<code>eval</code>、<code>new Function</code>这些方法都可能无法使用。</li></ul><p>综上所述，很难找到一周可以在所有情况下，都取到顶层对象。下面 👇 是两种勉强可以使用的方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方法一</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span>  <span class="token operator">?</span> window  <span class="token punctuation">:</span> <span class="token keyword">typeof</span> process <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span>    <span class="token keyword">typeof</span> global <span class="token operator">===</span> <span class="token string">'object'</span>  <span class="token operator">?</span> global  <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">var</span> getGlobal <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> self<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> window<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> global<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unable locate global object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>现有一个<a href="https://github.com/tc39/proposal-global" target="_blank" rel="noopener">提案</a>，在语言标准的层面，引入<code>globalThis</code>作为顶层对象。也就是说，任何环境下，<code>globalThis</code>都是存在的，都可以从它拿到顶层对象，指向全局环境下的<code>this</code>。</p><p>垫片库<code>global-this</code>模拟了这个提案，可以在所有环境拿到<code>globalThis</code>。</p><hr><p>本文参考来源 <a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">阮一峰博客 let&amp;&amp;const</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> let </tag>
            
            <tag> const </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue国际化   vue-i18n</title>
      <link href="/2019/07/11/vue-guo-ji-hua-vue-i18n-de-shi-yong/"/>
      <url>/2019/07/11/vue-guo-ji-hua-vue-i18n-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h3><p><a href="https://github.com/libing-cheer/vue-international-i18n" target="_blank" rel="noopener">demo 代码示例</a></p><p>代码下载后运行以下命令，即可跑起来看到效果。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> run serve</code></pre><h3 id="二、目录结构"><a href="#二、目录结构" class="headerlink" title="二、目录结构"></a>二、目录结构</h3><ul><li>📁src @根<ul><li>📁assets 静态资源目录<ul><li>📁common 字体库</li><li>📄cn.js 中文字体库</li><li>📄en.js 英文字体库</li><li>📄fa.js 法语字体库</li><li>📄ft.js 中文繁体字体库</li><li>img</li><li>cn.png 中文预览效果图</li><li>en.png 英文预览效果图</li><li>fa.png 法语预览效果图</li><li>ft.png 中文繁体预览效果图</li></ul></li><li>📁components 组件<ul><li>📄vue-international-i18n.vue 展示切换语言组件</li></ul></li><li>📄App.vue 入口模版</li><li>📄main.js 入口主函数</li></ul></li></ul><h3 id="三、vue-i18n-的使用"><a href="#三、vue-i18n-的使用" class="headerlink" title="三、vue-i18n 的使用"></a>三、vue-i18n 的使用</h3><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-i18n</code></pre><p>也可以这样</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue/dist/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/vue-i18n/dist/vue-i18n.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h4 id="2、入口文件-main-js-配置"><a href="#2、入口文件-main-js-配置" class="headerlink" title="2、入口文件 main.js 配置"></a>2、入口文件 main.js 配置</h4><p>在 入口文件 <code>main.js</code> 中引用, <code>demo</code> 用了 <code>elementUI</code> 的组件，所以在这里全局引用了 <code>element-ui</code> 。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueI18n <span class="token keyword">from</span> <span class="token string">'vue-i18n'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*---------挂载全局使用-----------*/</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueI18n<span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*---------基本使用-----------*/</span><span class="token comment" spellcheck="true">// </span><span class="token comment" spellcheck="true">/*---------使用语言包-----------*/</span><span class="token keyword">const</span> i18n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueI18n</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  locale<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 语言标识</span>  messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'zh-CN'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/cn'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 中文语言包</span>    <span class="token string">'zh-EN'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/en'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 英文语言包</span>    <span class="token string">'zh-FA'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/fa'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 法语语言包</span>    <span class="token string">'zh-FT'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./assets/common/ft'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 繁体字语言包</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  i18n<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里不要忘记哦！</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3、语言包示例"><a href="#3、语言包示例" class="headerlink" title="3、语言包示例"></a>3、语言包示例</h4><p>语言包是自己定义的 <code>js</code> 文件，以中文 <code>cn.js</code> 和 英文 <code>en.js</code> 为例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  cn.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">{</span>    music<span class="token punctuation">:</span> <span class="token string">'网易云音乐'</span><span class="token punctuation">,</span>    findMusic<span class="token punctuation">:</span> <span class="token string">'发现音乐'</span><span class="token punctuation">,</span>    myMusic<span class="token punctuation">:</span> <span class="token string">'我的音乐'</span><span class="token punctuation">,</span>    friend<span class="token punctuation">:</span> <span class="token string">'朋友'</span><span class="token punctuation">,</span>    musician<span class="token punctuation">:</span> <span class="token string">'音乐人'</span><span class="token punctuation">,</span>    download<span class="token punctuation">:</span> <span class="token string">'下载客户端'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  en.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">{</span>    music<span class="token punctuation">:</span> <span class="token string">'Music'</span><span class="token punctuation">,</span>    findMusic<span class="token punctuation">:</span> <span class="token string">'FIND MUSIC'</span><span class="token punctuation">,</span>    myMusic<span class="token punctuation">:</span> <span class="token string">'MY MUSIC'</span><span class="token punctuation">,</span>    friend<span class="token punctuation">:</span> <span class="token string">'FRIEND'</span><span class="token punctuation">,</span>    musician<span class="token punctuation">:</span> <span class="token string">'MUSICIAN'</span><span class="token punctuation">,</span>    download<span class="token punctuation">:</span> <span class="token string">'DOWNLOAD'</span><span class="token punctuation">}</span></code></pre><h4 id="4、vue-international-i18n-vue-文件"><a href="#4、vue-international-i18n-vue-文件" class="headerlink" title="4、vue-international-i18n.vue 文件"></a>4、vue-international-i18n.vue 文件</h4><p><code>changeLangEvent</code> 事件实现语言切换；重点在于”关键语句”：<code>this.\$i18n.locale</code>：<br>当赋值为”<code>zh-CN</code>“时，导航栏就变成中文；<br>当赋值为 “<code>zh-EN</code>“时，导航栏就变成英文；<br>当赋值为”<code>zh-FA</code>“时，导航栏就变成法语；<br>当赋值为”<code>zh-FT</code>“时，导航栏就变成中文繁体。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>international<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 切换语言 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>language<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>        <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择<span class="token punctuation">"</span></span>        <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeLangEvent(value)<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in options<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>          <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>          <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- tabs标签页 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tabs</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activeName<span class="token punctuation">"</span></span> <span class="token attr-name">@tab-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.music<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.music')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.findMusic<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.findMusic')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.myMusic<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.myMusic')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.friend<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fourth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.friend')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.musician<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fivth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.musician')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>message.download<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sixth<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          {{$t('message.download')}}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tabs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'vueInternationalI18n'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        value<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>        lang<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>        activeName<span class="token punctuation">:</span> <span class="token string">'first'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'中文'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-EN'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'英文'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-FA'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'法语'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            value<span class="token punctuation">:</span> <span class="token string">'zh-FT'</span><span class="token punctuation">,</span>            label<span class="token punctuation">:</span> <span class="token string">'繁体'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 切换语言</span>      <span class="token function">changeLangEvent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">case</span> <span class="token string">'zh-CN'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'zh-EN'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'zh-FA'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">case</span> <span class="token string">'zh-FT'</span><span class="token punctuation">:</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lang <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$i18n<span class="token punctuation">.</span>locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lang<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关键语句</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.international</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">75</span>vw<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.language</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">12.5</span>vw<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">20000000</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.tabs</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="四、vue-i18n-数据渲染的模板语法"><a href="#四、vue-i18n-数据渲染的模板语法" class="headerlink" title="四、vue-i18n 数据渲染的模板语法"></a>四、vue-i18n 数据渲染的模板语法</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- v-text 形式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$t(<span class="token punctuation">'</span>m.music<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- {{}} 形式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{{$t('m.music')}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="五、效果预览"><a href="#五、效果预览" class="headerlink" title="五、效果预览"></a>五、效果预览</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/cn.png" alt="中文"><br><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/en.png" alt="英文"><br><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/fa.png" alt="法语"><br><img src="https://raw.githubusercontent.com/libing-cheer/vue-international-i18n/master/src/assets/img/ft.png" alt="中文繁体"></p><h3 id="6、vue-i18n-了解更多"><a href="#6、vue-i18n-了解更多" class="headerlink" title="6、vue-i18n 了解更多"></a>6、vue-i18n 了解更多</h3><p>若想了解更多关于 <code>vue-i18n</code> 的使用，请前往 <a href="https://kazupon.github.io/vue-i18n/zh/introduction.html" target="_blank" rel="noopener">vue-i18n 官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 国际化 </tag>
            
            <tag> Vue </tag>
            
            <tag> vue-i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementUI中table表格自定义表头Tooltip文字提示</title>
      <link href="/2019/07/03/elementui-zhong-table-biao-ge-zi-ding-yi-biao-tou-tooltip-wen-zi-ti-shi/"/>
      <url>/2019/07/03/elementui-zhong-table-biao-ge-zi-ding-yi-biao-tou-tooltip-wen-zi-ti-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="table-header-tips"><a href="#table-header-tips" class="headerlink" title="table-header-tips"></a>table-header-tips</h2><p>应用 <code>element</code> 中的 <code>table</code> 组件，自定义表头 <code>Tooltip</code> 文字提示。</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/table-header-tips/master/src/assets/tooltip.png" alt="效果图"></p><h3 id="示例-demo-代码"><a href="#示例-demo-代码" class="headerlink" title="示例 demo 代码"></a>示例 demo 代码</h3><p><a href="https://github.com/libing-cheer/table-header-tips" target="_blank" rel="noopener">请点这里</a></p><h3 id="引用-element-ui"><a href="#引用-element-ui" class="headerlink" title="引用 element-ui"></a>引用 element-ui</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> element-ui</code></pre><p>在 <code>main.js</code> 中引入</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="增加全局组件-promptMessages-并在全局引用"><a href="#增加全局组件-promptMessages-并在全局引用" class="headerlink" title="增加全局组件 promptMessages 并在全局引用"></a>增加全局组件 promptMessages 并在全局引用</h3><p>在 <code>src -&gt; modules -&gt; components -&gt; messages</code> 中增加 <code>promptMessages</code> 组件及 <code>index.js</code> 文件</p><p><code>promptMessages</code> 组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltip<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span> <span class="token attr-name">effect</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dark<span class="token punctuation">"</span></span> <span class="token attr-name">placement</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 插槽，可提供多行的提示信息 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 全局组件，这里是配置图标icon和提示信息的地方 --></span>        <span class="token comment" spellcheck="true">&lt;!-- 在其他组件中引用方式详见 table-header-tips.vue 组件中的 renderHeaderMethods 方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) in messages<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{item}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-icon-info<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#409eff</span><span class="token punctuation">;</span><span class="token property">margin-left</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'promptMessages'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      messages<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><code>index.js</code> 文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> promptMessages <span class="token keyword">from</span> <span class="token string">'./promptMessages.vue'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* istanbul ignore next */</span>promptMessages<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span>promptMessages<span class="token punctuation">.</span>name<span class="token punctuation">,</span> promptMessages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> promptMessages<span class="token punctuation">;</span></code></pre><p>在 <code>utils</code> 文件夹 📁 下，新增 <code>components.js</code> 用于 引入全局组件<br><code>components.js</code> 文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * Created by Administrator on 2019/07/03 0030. * 所有自定义全局组件在此引入 */</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> promptMessages <span class="token keyword">from</span> <span class="token string">'@/modules/components/messages'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>promptMessages<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表头提示自定义提示信息组件</span></code></pre><p>最后在 <code>main.js</code> 中引入 <code>components.js</code> 文件即可全局使用 <code>promptMessages</code> 组件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'@/utils/components.js'</span><span class="token punctuation">;</span> // 自定义组件 js</code></pre><h3 id="table-header-tips-组件-自定义表头方法-renderHeaderMethods"><a href="#table-header-tips-组件-自定义表头方法-renderHeaderMethods" class="headerlink" title="table-header-tips 组件 自定义表头方法 renderHeaderMethods"></a>table-header-tips 组件 自定义表头方法 renderHeaderMethods</h3><p>应用了 <code>element table</code> 组件的 <code>render-header</code>（列标题 <code>Label</code> 区域渲染使用的 <code>Function</code>）。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table-header-tips<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span> <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">stripe</span> <span class="token attr-name">border</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>日期<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>180<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>        <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span>        <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>地址<span class="token punctuation">"</span></span>        <span class="token attr-name">:show-overflow-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">:render-header</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>renderHeaderMethods<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'tableHeaderTips'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-02'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'王小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'SlideShare Inc., 490 2nd St, Suite 300, San Francisco, CA 94107'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-04'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'李小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'Room 201,No.34,Lane 125,XiKang Road(South),HongKou District'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-01'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'赵小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'Room 702, 7th Building, Hengda Garden, East District, Zhongshan'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            date<span class="token punctuation">:</span> <span class="token string">'2016-05-03'</span><span class="token punctuation">,</span>            name<span class="token punctuation">:</span> <span class="token string">'黑小虎'</span><span class="token punctuation">,</span>            address<span class="token punctuation">:</span>              <span class="token string">'Room 403,No.37,ShiFan Residential Quarter,BaoShan District'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 自定义表格</span>      <span class="token comment" spellcheck="true">// 例如：给表头 地址 加一个 icon，鼠标移入icon展示提示信息</span>      <span class="token function">renderHeaderMethods</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">{</span> column <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>          <span class="token string">'div'</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            style<span class="token punctuation">:</span> <span class="token string">'display:flex;margin:auto;'</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span> column<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">'promptMessages'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 引用 promptMessages 全局组件</span>              props<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// messages 里面配置的信息即为 Tooltip 提示信息</span>                messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'地址提示信息，以下地址有中国🇨🇳和澳洲🇦🇺请仔细查看。'</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.table-header-tips</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Element </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
            <tag> 自定义表头 </tag>
            
            <tag> Tooltip文字提示 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue视频播放器</title>
      <link href="/2019/06/12/vue-shi-pin-bo-fang-qi/"/>
      <url>/2019/06/12/vue-shi-pin-bo-fang-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-Video-Player"><a href="#Vue-Video-Player" class="headerlink" title="Vue-Video-Player"></a>Vue-Video-Player</h3><p>适用于 <code>Vue</code> 的 <code>video.js</code> 播放器组件。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://github.com/libing-cheer/video-player" target="_blank" rel="noopener">demo 代码示例</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/video.js/dist/video-js.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/video.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>path/to/dist/vue-video-player.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>VueVideoPlayer<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-video-player --save</code></pre><h3 id="全局引用样式文件"><a href="#全局引用样式文件" class="headerlink" title="全局引用样式文件"></a>全局引用样式文件</h3><p>在 main.js 中引用 vue-video-player 样式文件以及自定义的样式文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'video.js/dist/video-js.css'</span><span class="token function">import</span> <span class="token string">'vue-video-player/src/custom-theme.css'</span><span class="token function">import</span> <span class="token string">'@/../static/theme.css'</span>                // 自定义样式文件 播放button按钮</code></pre><h3 id="组件中使用"><a href="#组件中使用" class="headerlink" title="组件中使用"></a>组件中使用</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>player<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video-player</span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>video-player vjs-custom-skin<span class="token punctuation">"</span></span>        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>videoPlayer<span class="token punctuation">"</span></span>        <span class="token attr-name">:playsinline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>playerOptions<span class="token punctuation">"</span></span>        <span class="token attr-name">@play</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerPlay($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@pause</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerPause($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@ended</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerEnded($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@waiting</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerWaiting($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@playing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerPlaying($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@loadeddata</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerLoadeddata($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@timeupdate</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerTimeupdate($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@canplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerCanplay($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@canplaythrough</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onPlayerCanplaythrough($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@statechanged</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>playerStateChanged($event)<span class="token punctuation">"</span></span>        <span class="token attr-name">@ready</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>playerReadied<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video-player</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> videoPlayer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-video-player'</span><span class="token punctuation">;</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'VideoPlayer'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        playerOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>          playbackRates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//播放速度</span>          autoplay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//如果true,浏览器准备好时开始回放。</span>          muted<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认情况下将会消除任何音频。</span>          loop<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 导致视频一结束就重新开始。</span>          preload<span class="token punctuation">:</span> <span class="token string">'auto'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 建议浏览器在&lt;video>加载元素后是否应该开始下载视频数据。</span>          <span class="token comment" spellcheck="true">// auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）</span>          language<span class="token punctuation">:</span> <span class="token string">'zh-CN'</span><span class="token punctuation">,</span>          aspectRatio<span class="token punctuation">:</span> <span class="token string">'16:9'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。</span>          <span class="token comment" spellcheck="true">// 值应该代表一个比例 - 用冒号分隔的两个数字（例如"16:9"或"4:3"）</span>          fluid<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 当fluid为true时，Video.js player将拥有流体大小。</span>          <span class="token comment" spellcheck="true">// 换句话说，它将按比例缩放以适应其容器。</span>          sources<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              type<span class="token punctuation">:</span> <span class="token string">'video/mp4'</span><span class="token punctuation">,</span>              src<span class="token punctuation">:</span> <span class="token string">'http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4'</span>              <span class="token comment" spellcheck="true">//你的视频地址（必填）</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>          poster<span class="token punctuation">:</span> <span class="token string">'poster.jpg'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//你的封面地址</span>          width<span class="token punctuation">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span>          notSupportedMessage<span class="token punctuation">:</span> <span class="token string">'此视频暂无法播放，请稍后再试'</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//允许覆盖Video.js无法播放媒体源时显示的默认信息。</span>          controlBar<span class="token punctuation">:</span> <span class="token punctuation">{</span>            timeDivider<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            durationDisplay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            remainingTimeDisplay<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            fullscreenToggle<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//全屏按钮</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      videoPlayer    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 播放事件</span>      <span class="token function">onPlayerPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 暂停事件</span>      <span class="token function">onPlayerPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 播放结束事件</span>      <span class="token function">onPlayerEnded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerWaiting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerPlaying</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerLoadeddata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerTimeupdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerTimeupdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerCanplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">onPlayerCanplaythrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">playerStateChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function">playerReadied</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the player is readied'</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// you can use it to do something...</span>        <span class="token comment" spellcheck="true">// player.[methods]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h3><p>了解更多点击<a href="https://www.npmjs.com/package/vue-video-player" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue视频播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue导出Excel表格</title>
      <link href="/2019/05/29/vue-dao-chu-excel-biao-ge/"/>
      <url>/2019/05/29/vue-dao-chu-excel-biao-ge/</url>
      
        <content type="html"><![CDATA[<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><a href="https://github.com/libing-cheer/excel-export" target="_blank" rel="noopener">demo 代码示例</a></p><h3 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h3><pre class=" language-bash"><code class="language-bash">vue init webpack excel-export       建立excel-export项目<span class="token function">cd</span> excel-export                     进入excel-export文件夹下<span class="token function">npm</span> <span class="token function">install</span>                         安装依赖<span class="token function">npm</span> run dev                         运行</code></pre><h3 id="导出-Excel-关键"><a href="#导出-Excel-关键" class="headerlink" title="导出 Excel 关键"></a>导出 Excel 关键</h3><h4 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -S file-saver           用来生成文件的web应用程序</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -S xlsx                 电子表格格式的解析器</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -D script-loader        将js挂载在全局下</code></pre><h4 id="2、添加-Blob-js-及-Export2Excel-js-文件"><a href="#2、添加-Blob-js-及-Export2Excel-js-文件" class="headerlink" title="2、添加 Blob.js 及 Export2Excel.js 文件"></a>2、添加 Blob.js 及 Export2Excel.js 文件</h4><p>在 <code>src</code> 目录下创建一个文件(<code>vendor</code>) 并添加<a href="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/vendor/Blob.js" target="_blank" rel="noopener">Blob.js</a>和<a href="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/vendor/Export2Excel.js" target="_blank" rel="noopener">Export2Excel.js</a>，对 <code>Export2Excel.js</code> 添加了一段代码，可以使导出的表格列宽自适应。所改动代码为 147 - 155 行，具体如下：</p><pre class=" language-bash"><code class="language-bash">/*设置worksheet每列的最大宽度*/  const colWidth <span class="token operator">=</span> data.map<span class="token punctuation">(</span>row <span class="token operator">=</span><span class="token operator">></span> row.map<span class="token punctuation">(</span>val <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    /*先判断是否为null/undefined*/    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'wch'</span><span class="token keyword">:</span> 10 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /*再判断是否为中文*/    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.charCodeAt<span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token operator">></span> 255<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'wch'</span><span class="token keyword">:</span> val.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.length * 2 + 5 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token string">'wch'</span><span class="token keyword">:</span> val.toString<span class="token punctuation">(</span><span class="token punctuation">)</span>.length + 5 <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">))</span>/*以第一行为初始值*/   <span class="token keyword">let</span> result <span class="token operator">=</span> colWidth<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>let i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colWidth.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>let j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> colWidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.length<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> colWidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span> <span class="token operator">=</span> colWidth<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'wch'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  ws<span class="token punctuation">[</span><span class="token string">'!cols'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span></code></pre><h4 id="3、配置加载时的路径"><a href="#3、配置加载时的路径" class="headerlink" title="3、配置加载时的路径"></a>3、配置加载时的路径</h4><p>在 <code>build</code> 文件夹下的 <code>webpack.base.conf.js</code> 文件下修改，配置要加载时的路径</p><pre class=" language-bash"><code class="language-bash">alias: <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token keyword">:</span> <span class="token string">'vue/dist/vue.esm.js'</span>,      <span class="token string">'@'</span><span class="token keyword">:</span> resolve<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>,      <span class="token string">'vendor'</span><span class="token keyword">:</span> resolve<span class="token punctuation">(</span><span class="token string">'src/vendor'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><h4 id="4、Export2Excel-js-引用依赖"><a href="#4、Export2Excel-js-引用依赖" class="headerlink" title="4、Export2Excel.js 引用依赖"></a>4、Export2Excel.js 引用依赖</h4><p>在 <code>Export2Excel.js</code> 引用依赖如下：</p><pre class=" language-bash"><code class="language-bash">require<span class="token punctuation">(</span><span class="token string">'./Blob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require<span class="token punctuation">(</span><span class="token string">'script-loader!file-saver'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require<span class="token punctuation">(</span><span class="token string">'script-loader!xlsx/dist/xlsx.core.min'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="element-ui-使用"><a href="#element-ui-使用" class="headerlink" title="element-ui 使用"></a>element-ui 使用</h3><p>用了 <code>element-ui</code> 中的 <code>table</code> 和 <code>button</code> 组件，安装依赖：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -S element-ui</code></pre><p>在 main.js 中引用 element 及其样式：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Element from <span class="token string">'element-ui'</span>                    // 引入element ui<span class="token function">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>       // 引入 element ui 样式Vue.use<span class="token punctuation">(</span>Element, <span class="token punctuation">{</span>  size: <span class="token string">'mini'</span>                                      // <span class="token keyword">set</span> element-ui default size<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Vue-文件使用"><a href="#Vue-文件使用" class="headerlink" title="Vue 文件使用"></a>Vue 文件使用</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>el-button        type<span class="token operator">=</span><span class="token string">"primary"</span>        size<span class="token operator">=</span><span class="token string">"mini"</span>        style<span class="token operator">=</span><span class="token string">"margin:30px auto;"</span>        @click<span class="token operator">=</span><span class="token string">"handleDownloadData"</span>      <span class="token operator">></span>导出<span class="token operator">&lt;</span>/el-button<span class="token operator">></span>      <span class="token operator">&lt;</span>el-table        :data<span class="token operator">=</span><span class="token string">"tableData"</span>        stripe        style<span class="token operator">=</span><span class="token string">"width: 600px;margin:30px auto;"</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          prop<span class="token operator">=</span><span class="token string">"date"</span>          label<span class="token operator">=</span><span class="token string">"日期"</span>          width<span class="token operator">=</span><span class="token string">"180"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          prop<span class="token operator">=</span><span class="token string">"name"</span>          label<span class="token operator">=</span><span class="token string">"姓名"</span>          width<span class="token operator">=</span><span class="token string">"180"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>        <span class="token operator">&lt;</span>el-table-column          prop<span class="token operator">=</span><span class="token string">"address"</span>          label<span class="token operator">=</span><span class="token string">"地址"</span>        <span class="token operator">></span>        <span class="token operator">&lt;</span>/el-table-column<span class="token operator">></span>      <span class="token operator">&lt;</span>/el-table<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>  name: <span class="token string">'excelExport'</span>,  data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg: <span class="token string">'Welcome to Your Excel Export'</span>,      tableData: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-02'</span>,          name: <span class="token string">'王小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1510 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-04'</span>,          name: <span class="token string">'李小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1511 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-01'</span>,          name: <span class="token string">'孙小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1512 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-02'</span>,          name: <span class="token string">'朱小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1513 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-04'</span>,          name: <span class="token string">'钱小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1514 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-01'</span>,          name: <span class="token string">'杜小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1515 弄'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          date: <span class="token string">'2016-05-03'</span>,          name: <span class="token string">'赵小虎'</span>,          address: <span class="token string">'上海市普陀区金沙江路 1516 弄'</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>,      tableTitleData: <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          label: <span class="token string">'日期'</span>,          prop: <span class="token string">'date'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          label: <span class="token string">'姓名'</span>,          prop: <span class="token string">'name'</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          label: <span class="token string">'地址'</span>,          prop: <span class="token string">'address'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  methods: <span class="token punctuation">{</span>    // 导出的方法    handleDownloadData<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      // 导出表格的表头设置      <span class="token keyword">let</span> allColumns <span class="token operator">=</span> this.tableTitleData      var columnNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      var columnValues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> allColumns.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>        columnNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> allColumns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.label        columnValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> allColumns<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.prop      <span class="token punctuation">}</span>      require.ensure<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        const <span class="token punctuation">{</span> export_json_to_excel <span class="token punctuation">}</span> <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">'vendor/Export2Excel'</span><span class="token punctuation">)</span>        const tHeader <span class="token operator">=</span> columnNames        const filterVal <span class="token operator">=</span> columnValues        const list <span class="token operator">=</span> this.tableData        const data <span class="token operator">=</span> this.formatJson<span class="token punctuation">(</span>filterVal, list<span class="token punctuation">)</span>        export_json_to_excel<span class="token punctuation">(</span>tHeader, data, <span class="token string">'导出excel列表demo'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>,    formatJson<span class="token punctuation">(</span>filterVal, jsonData<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> jsonData.map<span class="token punctuation">(</span>v <span class="token operator">=</span><span class="token operator">></span> filterVal.map<span class="token punctuation">(</span>j <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">))</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图"></a>运行效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/assets/%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="运行效果图"></p><h3 id="导出效果图"><a href="#导出效果图" class="headerlink" title="导出效果图"></a>导出效果图</h3><p><img src="https://raw.githubusercontent.com/libing-cheer/excel-export/master/src/assets/%E5%AF%BC%E5%87%BA%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt="导出效果图"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 导出表格 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 导出Excel表格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue拖拽排序</title>
      <link href="/2019/05/28/vue-tuo-zhuai-pai-xu/"/>
      <url>/2019/05/28/vue-tuo-zhuai-pai-xu/</url>
      
        <content type="html"><![CDATA[<h3 id="Awe-dnd"><a href="#Awe-dnd" class="headerlink" title="Awe-dnd"></a>Awe-dnd</h3><p><code>Awe-dnd</code>：一个轻量的 <code>Vue</code> 拖动排序插件，可使您的元素在 <code>Vue</code> 中可拖动。</p><h5 id="demo-示例图"><a href="#demo-示例图" class="headerlink" title="demo 示例图"></a><a href="https://github.com/hilongjw/vue-dragging/blob/master/preview.gif" target="_blank" rel="noopener">demo 示例图</a></h5><h3 id="Awe-dnd-特点"><a href="#Awe-dnd-特点" class="headerlink" title="Awe-dnd 特点"></a>Awe-dnd 特点</h3><ul><li>支持桌面和移动设备</li><li><code>Vue</code> 数据驱动理念</li><li>支持 <code>multi drag</code></li><li>支持 <code>Vue 1.0</code> and <code>Vue 2.0</code></li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ul><li><code>Vue: ^1.0.0 or ^2.0.0</code></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> awe-dnd --save</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class=" language-bash"><code class="language-bash">// main.js<span class="token function">import</span> VueDND from <span class="token string">'awe-dnd'</span>Vue.use<span class="token punctuation">(</span>VueDND<span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--your.vue--<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token function">export</span> default <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        colors: <span class="token punctuation">[</span><span class="token punctuation">{</span>            text: <span class="token string">"Aquamarine"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Hotpink"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Gold"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Crimson"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Blueviolet"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Lightblue"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Cornflowerblue"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Skyblue"</span>        <span class="token punctuation">}</span>, <span class="token punctuation">{</span>            text: <span class="token string">"Burlywood"</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  /* <span class="token keyword">if</span> your need multi drag  mounted: function<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      this.colors.forEach<span class="token punctuation">((</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          Vue.set<span class="token punctuation">(</span>item, <span class="token string">'isComb'</span>, false<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> */<span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div          class<span class="token operator">=</span><span class="token string">"color-item"</span>          v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color' }"</span>          :key<span class="token operator">=</span><span class="token string">"color.text"</span>      <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span></code></pre><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><pre class=" language-bash"><code class="language-bash">v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color' }"</span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><code>{item} Object</code></li><li><code>{list} Array</code></li><li><code>{group} String</code></li><li><p><code>{comb} String</code></p><p>group is unique key of dragable list.</p><p>comb use for multi drag</p></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- Vue2.0 --<span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div        class<span class="token operator">=</span><span class="token string">"color-item"</span>        v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color' }"</span>        :key<span class="token operator">=</span><span class="token string">"color.text"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- Vue1.0 --<span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div        class<span class="token operator">=</span><span class="token string">"color-item"</span>        v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color', key: color.text }"</span>        track-by<span class="token operator">=</span><span class="token string">"text"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"color-list"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div        class<span class="token operator">=</span><span class="token string">"color-item"</span>        v-for<span class="token operator">=</span><span class="token string">"color in colors"</span> v-dragging<span class="token operator">=</span><span class="token string">"{ item: color, list: colors, group: 'color', otherData: otherData, comb: 'isComb' }"</span>        :key<span class="token operator">=</span><span class="token string">"color.text"</span>    <span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>color.text<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> default <span class="token punctuation">{</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    this.<span class="token variable">$dragging</span><span class="token keyword">.</span><span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'dragged'</span>, <span class="token punctuation">(</span><span class="token punctuation">{</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console.log<span class="token punctuation">(</span>value.item<span class="token punctuation">)</span>      console.log<span class="token punctuation">(</span>value.list<span class="token punctuation">)</span>      console.log<span class="token punctuation">(</span>value.otherData<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    this.<span class="token variable">$dragging</span><span class="token keyword">.</span><span class="token variable">$on</span><span class="token punctuation">(</span><span class="token string">'dragend'</span>, <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h3><p><a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT 许可证</a></p><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><p><a href="https://www.npmjs.com/search?q=keywords:vue-dragging" target="_blank" rel="noopener">vue-dragging</a><br><a href="https://www.npmjs.com/search?q=keywords:vue-drag" target="_blank" rel="noopener">vue-drag</a><br><a href="https://www.npmjs.com/search?q=keywords:vue-dnd" target="_blank" rel="noopener">vue-dnd</a><br><a href="https://www.npmjs.com/search?q=keywords:vue" target="_blank" rel="noopener">vue</a><br><a href="https://www.npmjs.com/search?q=keywords:draggable" target="_blank" rel="noopener">draggable</a><br><a href="https://www.npmjs.com/search?q=keywords:drag" target="_blank" rel="noopener">drag</a><br><a href="https://www.npmjs.com/search?q=keywords:drop" target="_blank" rel="noopener">drop</a><br><a href="https://www.npmjs.com/search?q=keywords:html5" target="_blank" rel="noopener">html5</a><br><a href="https://www.npmjs.com/search?q=keywords:draggable" target="_blank" rel="noopener">draggable</a><br><a href="https://www.npmjs.com/search?q=keywords:droppable" target="_blank" rel="noopener">droppable</a><br><a href="https://www.npmjs.com/search?q=keywords:dnd" target="_blank" rel="noopener">drag-and-drop</a><br><a href="https://www.npmjs.com/search?q=keywords:dnd" target="_blank" rel="noopener">dnd</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 拖拽排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 拖拽排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm command not found</title>
      <link href="/2019/05/19/mac-xia-node-an-zhuang-cheng-gong-dan-ti-shi-npm-command-not-found/"/>
      <url>/2019/05/19/mac-xia-node-an-zhuang-cheng-gong-dan-ti-shi-npm-command-not-found/</url>
      
        <content type="html"><![CDATA[<h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>从官网下载了 <code>node</code> 的 <code>.pkg</code> 文件安装 <code>node</code>，安装好后，在 <code>mac</code> 终端下输入 <code>npm -v</code> 和 <code>node -v</code> 均提示 <code>command not found</code>。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>1、第一步：创建 <code>.bash_profile</code> 文件，～表示在～目录下，.表示隐藏文件，打开终端，输入命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">touch</span> ~/.bash_profile</code></pre><p>2、第二步：打开 <code>.bash_profile</code> 文件，输入命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">open</span> -e .bash_profile</code></pre><p>3、第三步：这时候会弹出 <code>.bash_profile</code> 文本编辑框，在文本编辑框里面编辑：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></pre><p>4、第四步：<code>command+s</code> 保存 <code>.bash_profile</code> 文件，为使 <code>.bash_profile</code> 文件生效，输入命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> .bash_profile</code></pre><p>5、第五步：再输入 <code>npm -v</code> 或者 <code>node -v</code> 就能看到版本号啦~。</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> -v</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue文件预览</title>
      <link href="/2019/05/10/vue-wen-jian-yu-lan/"/>
      <url>/2019/05/10/vue-wen-jian-yu-lan/</url>
      
        <content type="html"><![CDATA[<h3 id="pdf文件预览"><a href="#pdf文件预览" class="headerlink" title="pdf文件预览"></a>pdf文件预览</h3><h4 id="1、embed-标签"><a href="#1、embed-标签" class="headerlink" title="1、embed 标签"></a>1、embed 标签</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"height:100vh"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>embed src<span class="token operator">=</span><span class="token string">"https://fscdn.xxx.com/pdf文件地址.pdf"</span>         width<span class="token operator">=</span><span class="token string">"100%"</span>         height<span class="token operator">=</span><span class="token string">"100%"</span>                  type<span class="token operator">=</span><span class="token string">"application/pdf"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span></code></pre><h4 id="2、iframe-标签"><a href="#2、iframe-标签" class="headerlink" title="2、iframe 标签"></a>2、iframe 标签</h4><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"height:100vh"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>iframe src<span class="token operator">=</span><span class="token string">"https://fscdn.xxx.com/pdf文件地址.pdf"</span>         width<span class="token operator">=</span><span class="token string">"100%"</span>         height<span class="token operator">=</span><span class="token string">"100%"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span></code></pre><h4 id="3、-pdf-js"><a href="#3、-pdf-js" class="headerlink" title="3、 pdf.js"></a>3、 pdf.js</h4><p>请前往<br><a href="https://www.jb51.net/article/117166.htm" target="_blank" rel="noopener">vue2.0全局组件之pdf详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 文件预览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue图片预览</title>
      <link href="/2019/05/04/vue-tu-pian-yu-lan/"/>
      <url>/2019/05/04/vue-tu-pian-yu-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="v-viewer"><a href="#v-viewer" class="headerlink" title="v-viewer"></a>v-viewer</h2><p>用于图片浏览的 <code>Vue</code> 组件，支持旋转、缩放、翻转等操作，基于 <code>viewer.js</code>。</p><h5 id="演示示例"><a href="#演示示例" class="headerlink" title="演示示例"></a><a href="https://mirari.cc/v-viewer/" target="_blank" rel="noopener">演示示例</a></h5><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> v-viewer</code></pre><h3 id="手动引入样式文件"><a href="#手动引入样式文件" class="headerlink" title="手动引入样式文件"></a>手动引入样式文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入 <code>v-viewer</code> 及必需的 <code>css</code> 样式，并使用 <code>Vue.use()</code> 注册插件，之后即可使用。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- directive --<span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-viewer<span class="token operator">></span>      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"1.jpg"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"2.jpg"</span><span class="token operator">></span>      <span class="token punctuation">..</span>.    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- component --<span class="token operator">></span>    <span class="token operator">&lt;</span>viewer :images<span class="token operator">=</span><span class="token string">"images"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/viewer<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span>  <span class="token function">import</span> Vue from <span class="token string">'vue'</span>  Vue.use<span class="token punctuation">(</span>Viewer<span class="token punctuation">)</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="以指令形式使用"><a href="#以指令形式使用" class="headerlink" title="以指令形式使用"></a>以指令形式使用</h3><p>只需要将 <code>v-viewer</code> 指令添加到任意元素即可，该元素下的所有 <code>img</code> 元素都会被 <code>viewer</code> 自动处理。</p><p>你可以像这样传入配置项： <code>v-viewer=&quot;{inline: true}&quot;</code></p><p>如果有必要，可以先用选择器查找到目标元素，然后可以用 <code>el.\$viewer</code> 来获取 <code>viewer</code> 实例。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-viewer<span class="token operator">=</span><span class="token string">"{movable: false}"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Show<span class="token operator">&lt;</span>/button<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span>  <span class="token function">import</span> Vue from <span class="token string">'vue'</span>  Vue.use<span class="token punctuation">(</span>Viewer<span class="token punctuation">)</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>      show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        const viewer <span class="token operator">=</span> this.<span class="token variable">$el</span>.querySelector<span class="token punctuation">(</span><span class="token string">'.images'</span><span class="token punctuation">)</span>.<span class="token variable">$viewer</span>        viewer.show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="指令修饰器"><a href="#指令修饰器" class="headerlink" title="指令修饰器"></a>指令修饰器</h3><p>添加修饰器后，<code>viewer</code> 的创建只会在元素绑定指令时执行一次。<br>如果你确定元素内的图片不会再发生变化，使用它可以避免不必要的重建动作。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-viewer.static<span class="token operator">=</span><span class="token string">"{inline: true}"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span></code></pre><h3 id="以组件形式使用"><a href="#以组件形式使用" class="headerlink" title="以组件形式使用"></a>以组件形式使用</h3><p>你也可以单独引入全屏组件并局部注册它。</p><p>使用作用域插槽来定制你的图片展示方式。</p><p>监听 <code>inited</code> 事件来获取 <code>viewer</code> 实例，或者也可以用 <code>this.refs.xxx.\$viewer</code> 这种方法。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>viewer :options<span class="token operator">=</span><span class="token string">"options"</span> :images<span class="token operator">=</span><span class="token string">"images"</span>            @inited<span class="token operator">=</span><span class="token string">"inited"</span>            class<span class="token operator">=</span><span class="token string">"viewer"</span> ref<span class="token operator">=</span><span class="token string">"viewer"</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in scope.images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>scope.options<span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span>/template<span class="token operator">></span>    <span class="token operator">&lt;</span>/viewer<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Show<span class="token operator">&lt;</span>/button<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Viewer from <span class="token string">"v-viewer/src/component.vue"</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    components: <span class="token punctuation">{</span>      Viewer    <span class="token punctuation">}</span>,    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>      inited <span class="token punctuation">(</span>viewer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.<span class="token variable">$viewer</span> <span class="token operator">=</span> viewer      <span class="token punctuation">}</span>,      show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.<span class="token variable">$viewer</span>.show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="配置项-amp-方法"><a href="#配置项-amp-方法" class="headerlink" title="配置项 &amp; 方法"></a>配置项 &amp; 方法</h3><p>请参考<a href="https://github.com/fengyuanchen/viewerjs" target="_blank" rel="noopener">viewer.js.</a></p><h3 id="插件配置项"><a href="#插件配置项" class="headerlink" title="插件配置项"></a>插件配置项</h3><p><strong> name</strong></p><ul><li><code>Type: String</code></li><li><code>Default: viewer</code></li></ul><p>如果你需要避免重名冲突，可以像这样引入:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"images"</span> v-vuer<span class="token operator">=</span><span class="token string">"{movable: false}"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>img v-for<span class="token operator">=</span><span class="token string">"src in images"</span> :src<span class="token operator">=</span><span class="token string">"src"</span> :key<span class="token operator">=</span><span class="token string">"src"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"button"</span> @click<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span>Show<span class="token operator">&lt;</span>/button<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">import</span> <span class="token string">'viewerjs/dist/viewer.css'</span>  <span class="token function">import</span> Vuer from <span class="token string">'v-viewer'</span>  <span class="token function">import</span> Vue from <span class="token string">'vue'</span>  Vue.use<span class="token punctuation">(</span>Vuer, <span class="token punctuation">{</span>name: <span class="token string">'vuer'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token function">export</span> default <span class="token punctuation">{</span>    data<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      images: <span class="token punctuation">[</span><span class="token string">'1.jpg'</span>, <span class="token string">'2.jpg'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>,    methods: <span class="token punctuation">{</span>      show <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        const vuer <span class="token operator">=</span> this.<span class="token variable">$el</span>.querySelector<span class="token punctuation">(</span><span class="token string">'.images'</span><span class="token punctuation">)</span>.<span class="token variable">$vuer</span>        vuer.show<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span>/script<span class="token operator">></span></code></pre><h3 id="默认配置项"><a href="#默认配置项" class="headerlink" title="默认配置项"></a>默认配置项</h3><ul><li><code>Type: Object</code></li><li><code>Default: undefined</code><br>如果你需要修改 <code>viewer.js</code> 的全局默认配置项，可以像这样引入：</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span><span class="token function">import</span> Vue from <span class="token string">'vue'</span>Vue.use<span class="token punctuation">(</span>Viewer, <span class="token punctuation">{</span>  defaultOptions: <span class="token punctuation">{</span>    zIndex: 9999  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>你还可以在任何时候像这样修改全局默认配置项：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> Viewer from <span class="token string">'v-viewer'</span><span class="token function">import</span> Vue from <span class="token string">'vue'</span>Vue.use<span class="token punctuation">(</span>Viewer<span class="token punctuation">)</span>Viewer.setDefaults<span class="token punctuation">(</span><span class="token punctuation">{</span>  zIndexInline: 2017<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
          <category> 图片预览 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue图片预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/04/hello-world/"/>
      <url>/2019/05/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
